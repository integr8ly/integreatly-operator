---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rhmi-operator
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - events
      - configmaps
      - secrets
    verbs:
      - list
      - get
      - watch
      - create
      - update
      - patch
  # For deleting configmaps in operator namespace
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - delete
  # For monitoring functions by operator-sdk
  - apiGroups:
      - ""
    resources:
      - services
      - services/finalizers
    verbs:
      - list
      - get
      - watch
      - create
      - update
      - delete
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
      - create
  - apiGroups:
      - apps
    resources:
      - deployments/finalizers
      - replicasets
    verbs:
      - update
      - get
  # END For monitoring functions by operator-sdk

  # Our own Subscription needs to be switched into Manual mode after initial installation
  - apiGroups:
      - operators.coreos.com
    resources:
      - subscriptions
      - subscriptions/status
    verbs:
      - get
      - list
      - watch
      - update

  # Monitoring resources ar not covered by namespace "admin" permissions
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - watch
  # Adding a role and rolebinding to allow GitHub Secret management by dedicated-admins
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete

  # Allow operator to approve its own install plan
  - apiGroups:
      - operators.coreos.com
    resources:
      - installplans
    verbs:
      - get
      - update
      - list
      - watch
      - delete

  # Permissions needed to be able to grant to prometheus-k8s SA from openshift-monitoring NS
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  # END Permissions needed to be able to grant to prometheus-k8s SA from openshift-monitoring NS

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rhmi-operator
rules:
  - apiGroups:
      - integreatly.org
      - applicationmonitoring.integreatly.org
    resources:
      - "*"
    verbs:
      - "*"
  # We need to create consolelinks which are cluster level objects
  - apiGroups:
      - console.openshift.io
    resources:
      - "consolelinks"
    verbs:
      - get
      - create
      - update
      - delete
  # We are using ProjectRequests API to create namespaces where we automatically become admins
  - apiGroups:
      - ""
      - project.openshift.io
    resources:
      - projectrequests
    verbs:
      - create

  # Preflights check for existing installations of products
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - apps.openshift.io
    resources:
      - deploymentconfigs
    verbs:
      - list
      - get
      - watch
  # END Preflights check for existing installations of products

  # We need to get console route for a solution explorer
  - apiGroups:
      - route.openshift.io
    resources:
      - routes
    resourceNames:
      - console
    verbs:
      - get

  # Reconciling Fuse templates and image streams
  - apiGroups:
      - template.openshift.io
    resources:
      - templates
    verbs:
      - get
      - create
      - update
      - delete
  - apiGroups:
      - image.openshift.io
    resources:
      - imagestreams
    verbs:
      - get
      - create
      - delete
      - update
  # END Reconciling Fuse templates and image streams

  # Registry pull secret needs to be read to be then copied into some RHMI namespaces
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - samples-registry-credentials
    verbs:
      - get

  # We need to read this Secret from openshift-monitoring namespace in order to setup our monitoring stack
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - grafana-datasources
    verbs:
      - get

  # OAuthClients are used for login into products with OpenShift User identity
  - apiGroups:
      - oauth.openshift.io
    resources:
      - oauthclients
    verbs:
      - create
      - get
      - update
      - delete

  # We need to watch for the changes to members of the dedicated-admins group to give them additional permissions in RHMI products
  - apiGroups:
      - user.openshift.io
    resources:
      - groups
    verbs:
      - get
      - list
      - watch

  # We create the "rhmi-developers" group and populate it with users dynamically
  - apiGroups:
      - user.openshift.io
    resources:
      - groups
    verbs:
      - create
  - apiGroups:
      - user.openshift.io
    resources:
      - groups
    resourceNames:
      - rhmi-developers
    verbs:
      - update
      - delete
  - apiGroups:
      - user.openshift.io
    resources:
      - users
    verbs:
      - watch
      - get
      - list
  # END We create the "rhmi-developers" group and populate it with users dynamically

  # Updating the samples operator config cr to ignore fuse imagestreams and templates
  - apiGroups:
      - samples.operator.openshift.io
    resources:
      - configs
    resourceNames:
      - cluster
    verbs:
      - get
      - update

  # Permissions needed for our namespaces, but not given by "admin" role

  # Namespace update permissions are needed for setting labels
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - update

  # Installation of product operators
  - apiGroups:
      - operators.coreos.com
    resources:
      - catalogsources
      - operatorgroups
    verbs:
      - create
      - list
      - get
  - apiGroups:
      - operators.coreos.com
    resources:
      - catalogsources
    resourceNames:
      - rhmi-registry-cs
    verbs:
      - update

  # OperatorGroup update is not implemented yet, but might be added at a later date
  # - apiGroups:
  #     - operators.coreos.com
  #   resources:
  #     - operatorgroups
  #   resourceNames:
  #     - rhmi-registry-og
  #   verbs:
  #     - update

  - apiGroups:
      - operators.coreos.com
    resources:
      - installplans
    verbs:
      - update

  # END Installation of product operators

  # Monitoring resources not covered by namespace "admin" permissions
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - prometheusrules
      - servicemonitors
    verbs:
      - get
      - list
      - create
      - update
      - delete

  # Adding a rolebinding to the monitoring federation namespace
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - get
      - list
      - create
      - update
      - delete

  # END Permissions needed for our namespaces, but not given by "admin" role

  # Permission to fetch identity to get email for created Keycloak users in openshift realm
  - apiGroups:
      - user.openshift.io
    resources:
      - identities
    verbs:
      - get
  # END Permission to fetch identity to get email for created Keycloak users in openshift realm

  # Permission to manage ValidatingWebhookConfiguration CRs pointing to the webhook server
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - watch
      - list
      - create
      - update
      - delete
  # END Permission to manage ValidatingWebhookConfiguration CRs pointing to the webhook server

  # Permission to get the ConfigMap that embeds the CSV for an InstallPlan
  - verbs:
      - get
    apiGroups:
      - ''
    resources:
      - configmaps
  # END Permission to get the ConfigMap that embeds the CSV for an InstallPlan
  