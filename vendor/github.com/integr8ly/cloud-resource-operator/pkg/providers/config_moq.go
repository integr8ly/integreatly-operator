// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package providers

import (
	"context"
	"sync"
)

var (
	lockConfigManagerMockGetStrategyMappingForDeploymentType sync.RWMutex
)

// Ensure, that ConfigManagerMock does implement ConfigManager.
// If this is not the case, regenerate this file with moq.
var _ ConfigManager = &ConfigManagerMock{}

// ConfigManagerMock is a mock implementation of ConfigManager.
//
//     func TestSomethingThatUsesConfigManager(t *testing.T) {
//
//         // make and configure a mocked ConfigManager
//         mockedConfigManager := &ConfigManagerMock{
//             GetStrategyMappingForDeploymentTypeFunc: func(ctx context.Context, t string) (*DeploymentStrategyMapping, error) {
// 	               panic("mock out the GetStrategyMappingForDeploymentType method")
//             },
//         }
//
//         // use mockedConfigManager in code that requires ConfigManager
//         // and then make assertions.
//
//     }
type ConfigManagerMock struct {
	// GetStrategyMappingForDeploymentTypeFunc mocks the GetStrategyMappingForDeploymentType method.
	GetStrategyMappingForDeploymentTypeFunc func(ctx context.Context, t string) (*DeploymentStrategyMapping, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStrategyMappingForDeploymentType holds details about calls to the GetStrategyMappingForDeploymentType method.
		GetStrategyMappingForDeploymentType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T string
		}
	}
}

// GetStrategyMappingForDeploymentType calls GetStrategyMappingForDeploymentTypeFunc.
func (mock *ConfigManagerMock) GetStrategyMappingForDeploymentType(ctx context.Context, t string) (*DeploymentStrategyMapping, error) {
	if mock.GetStrategyMappingForDeploymentTypeFunc == nil {
		panic("ConfigManagerMock.GetStrategyMappingForDeploymentTypeFunc: method is nil but ConfigManager.GetStrategyMappingForDeploymentType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   string
	}{
		Ctx: ctx,
		T:   t,
	}
	lockConfigManagerMockGetStrategyMappingForDeploymentType.Lock()
	mock.calls.GetStrategyMappingForDeploymentType = append(mock.calls.GetStrategyMappingForDeploymentType, callInfo)
	lockConfigManagerMockGetStrategyMappingForDeploymentType.Unlock()
	return mock.GetStrategyMappingForDeploymentTypeFunc(ctx, t)
}

// GetStrategyMappingForDeploymentTypeCalls gets all the calls that were made to GetStrategyMappingForDeploymentType.
// Check the length with:
//     len(mockedConfigManager.GetStrategyMappingForDeploymentTypeCalls())
func (mock *ConfigManagerMock) GetStrategyMappingForDeploymentTypeCalls() []struct {
	Ctx context.Context
	T   string
} {
	var calls []struct {
		Ctx context.Context
		T   string
	}
	lockConfigManagerMockGetStrategyMappingForDeploymentType.RLock()
	calls = mock.calls.GetStrategyMappingForDeploymentType
	lockConfigManagerMockGetStrategyMappingForDeploymentType.RUnlock()
	return calls
}
