// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package resources

import (
	"k8s.io/api/apps/v1"
	"sync"
)

var (
	lockPodCommanderMockExecIntoPod sync.RWMutex
)

// Ensure, that PodCommanderMock does implement PodCommander.
// If this is not the case, regenerate this file with moq.
var _ PodCommander = &PodCommanderMock{}

// PodCommanderMock is a mock implementation of PodCommander.
//
//     func TestSomethingThatUsesPodCommander(t *testing.T) {
//
//         // make and configure a mocked PodCommander
//         mockedPodCommander := &PodCommanderMock{
//             ExecIntoPodFunc: func(dpl *v1.Deployment, cmd string) error {
// 	               panic("mock out the ExecIntoPod method")
//             },
//         }
//
//         // use mockedPodCommander in code that requires PodCommander
//         // and then make assertions.
//
//     }
type PodCommanderMock struct {
	// ExecIntoPodFunc mocks the ExecIntoPod method.
	ExecIntoPodFunc func(dpl *v1.Deployment, cmd string) error

	// calls tracks calls to the methods.
	calls struct {
		// ExecIntoPod holds details about calls to the ExecIntoPod method.
		ExecIntoPod []struct {
			// Dpl is the dpl argument value.
			Dpl *v1.Deployment
			// Cmd is the cmd argument value.
			Cmd string
		}
	}
}

// ExecIntoPod calls ExecIntoPodFunc.
func (mock *PodCommanderMock) ExecIntoPod(dpl *v1.Deployment, cmd string) error {
	if mock.ExecIntoPodFunc == nil {
		panic("PodCommanderMock.ExecIntoPodFunc: method is nil but PodCommander.ExecIntoPod was just called")
	}
	callInfo := struct {
		Dpl *v1.Deployment
		Cmd string
	}{
		Dpl: dpl,
		Cmd: cmd,
	}
	lockPodCommanderMockExecIntoPod.Lock()
	mock.calls.ExecIntoPod = append(mock.calls.ExecIntoPod, callInfo)
	lockPodCommanderMockExecIntoPod.Unlock()
	return mock.ExecIntoPodFunc(dpl, cmd)
}

// ExecIntoPodCalls gets all the calls that were made to ExecIntoPod.
// Check the length with:
//     len(mockedPodCommander.ExecIntoPodCalls())
func (mock *PodCommanderMock) ExecIntoPodCalls() []struct {
	Dpl *v1.Deployment
	Cmd string
} {
	var calls []struct {
		Dpl *v1.Deployment
		Cmd string
	}
	lockPodCommanderMockExecIntoPod.RLock()
	calls = mock.calls.ExecIntoPod
	lockPodCommanderMockExecIntoPod.RUnlock()
	return calls
}
