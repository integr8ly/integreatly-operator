// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package common

import (
	"github.com/keycloak/keycloak-operator/pkg/apis/keycloak/v1alpha1"
	"sync"
)

var (
	lockKeycloakInterfaceMockAddExecutionToAuthenticatonFlow      sync.RWMutex
	lockKeycloakInterfaceMockAddUserToGroup                       sync.RWMutex
	lockKeycloakInterfaceMockCreateAuthenticationFlow             sync.RWMutex
	lockKeycloakInterfaceMockCreateAuthenticatorConfig            sync.RWMutex
	lockKeycloakInterfaceMockCreateClient                         sync.RWMutex
	lockKeycloakInterfaceMockCreateFederatedIdentity              sync.RWMutex
	lockKeycloakInterfaceMockCreateGroup                          sync.RWMutex
	lockKeycloakInterfaceMockCreateGroupClientRole                sync.RWMutex
	lockKeycloakInterfaceMockCreateGroupRealmRole                 sync.RWMutex
	lockKeycloakInterfaceMockCreateIdentityProvider               sync.RWMutex
	lockKeycloakInterfaceMockCreateRealm                          sync.RWMutex
	lockKeycloakInterfaceMockCreateUser                           sync.RWMutex
	lockKeycloakInterfaceMockCreateUserClientRole                 sync.RWMutex
	lockKeycloakInterfaceMockCreateUserRealmRole                  sync.RWMutex
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig            sync.RWMutex
	lockKeycloakInterfaceMockDeleteClient                         sync.RWMutex
	lockKeycloakInterfaceMockDeleteIdentityProvider               sync.RWMutex
	lockKeycloakInterfaceMockDeleteRealm                          sync.RWMutex
	lockKeycloakInterfaceMockDeleteUser                           sync.RWMutex
	lockKeycloakInterfaceMockDeleteUserClientRole                 sync.RWMutex
	lockKeycloakInterfaceMockDeleteUserFromGroup                  sync.RWMutex
	lockKeycloakInterfaceMockDeleteUserRealmRole                  sync.RWMutex
	lockKeycloakInterfaceMockFindAuthenticationExecutionForFlow   sync.RWMutex
	lockKeycloakInterfaceMockFindAuthenticationFlowByAlias        sync.RWMutex
	lockKeycloakInterfaceMockFindAvailableGroupClientRole         sync.RWMutex
	lockKeycloakInterfaceMockFindGroupByName                      sync.RWMutex
	lockKeycloakInterfaceMockFindGroupClientRole                  sync.RWMutex
	lockKeycloakInterfaceMockFindUserByEmail                      sync.RWMutex
	lockKeycloakInterfaceMockFindUserByUsername                   sync.RWMutex
	lockKeycloakInterfaceMockGetAuthenticatorConfig               sync.RWMutex
	lockKeycloakInterfaceMockGetClient                            sync.RWMutex
	lockKeycloakInterfaceMockGetClientInstall                     sync.RWMutex
	lockKeycloakInterfaceMockGetClientSecret                      sync.RWMutex
	lockKeycloakInterfaceMockGetIdentityProvider                  sync.RWMutex
	lockKeycloakInterfaceMockGetRealm                             sync.RWMutex
	lockKeycloakInterfaceMockGetUser                              sync.RWMutex
	lockKeycloakInterfaceMockGetUserFederatedIdentities           sync.RWMutex
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow  sync.RWMutex
	lockKeycloakInterfaceMockListAuthenticationFlows              sync.RWMutex
	lockKeycloakInterfaceMockListAvailableGroupClientRoles        sync.RWMutex
	lockKeycloakInterfaceMockListAvailableGroupRealmRoles         sync.RWMutex
	lockKeycloakInterfaceMockListAvailableUserClientRoles         sync.RWMutex
	lockKeycloakInterfaceMockListAvailableUserRealmRoles          sync.RWMutex
	lockKeycloakInterfaceMockListClients                          sync.RWMutex
	lockKeycloakInterfaceMockListDefaultGroups                    sync.RWMutex
	lockKeycloakInterfaceMockListGroupClientRoles                 sync.RWMutex
	lockKeycloakInterfaceMockListGroupRealmRoles                  sync.RWMutex
	lockKeycloakInterfaceMockListIdentityProviders                sync.RWMutex
	lockKeycloakInterfaceMockListRealms                           sync.RWMutex
	lockKeycloakInterfaceMockListUserClientRoles                  sync.RWMutex
	lockKeycloakInterfaceMockListUserRealmRoles                   sync.RWMutex
	lockKeycloakInterfaceMockListUsers                            sync.RWMutex
	lockKeycloakInterfaceMockListUsersInGroup                     sync.RWMutex
	lockKeycloakInterfaceMockMakeGroupDefault                     sync.RWMutex
	lockKeycloakInterfaceMockPing                                 sync.RWMutex
	lockKeycloakInterfaceMockRemoveFederatedIdentity              sync.RWMutex
	lockKeycloakInterfaceMockSetGroupChild                        sync.RWMutex
	lockKeycloakInterfaceMockUpdateAuthenticationExecutionForFlow sync.RWMutex
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig            sync.RWMutex
	lockKeycloakInterfaceMockUpdateClient                         sync.RWMutex
	lockKeycloakInterfaceMockUpdateIdentityProvider               sync.RWMutex
	lockKeycloakInterfaceMockUpdatePassword                       sync.RWMutex
	lockKeycloakInterfaceMockUpdateRealm                          sync.RWMutex
	lockKeycloakInterfaceMockUpdateUser                           sync.RWMutex
)

// Ensure, that KeycloakInterfaceMock does implement KeycloakInterface.
// If this is not the case, regenerate this file with moq.
var _ KeycloakInterface = &KeycloakInterfaceMock{}

// KeycloakInterfaceMock is a mock implementation of KeycloakInterface.
//
//     func TestSomethingThatUsesKeycloakInterface(t *testing.T) {
//
//         // make and configure a mocked KeycloakInterface
//         mockedKeycloakInterface := &KeycloakInterfaceMock{
//             AddExecutionToAuthenticatonFlowFunc: func(flowAlias string, realmName string, providerID string, requirement Requirement) error {
// 	               panic("mock out the AddExecutionToAuthenticatonFlow method")
//             },
//             AddUserToGroupFunc: func(realmName string, userID string, groupID string) error {
// 	               panic("mock out the AddUserToGroup method")
//             },
//             CreateAuthenticationFlowFunc: func(authFlow AuthenticationFlow, realmName string) (string, error) {
// 	               panic("mock out the CreateAuthenticationFlow method")
//             },
//             CreateAuthenticatorConfigFunc: func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) (string, error) {
// 	               panic("mock out the CreateAuthenticatorConfig method")
//             },
//             CreateClientFunc: func(client *v1alpha1.KeycloakAPIClient, realmName string) (string, error) {
// 	               panic("mock out the CreateClient method")
//             },
//             CreateFederatedIdentityFunc: func(fid v1alpha1.FederatedIdentity, userID string, realmName string) (string, error) {
// 	               panic("mock out the CreateFederatedIdentity method")
//             },
//             CreateGroupFunc: func(group string, realmName string) (string, error) {
// 	               panic("mock out the CreateGroup method")
//             },
//             CreateGroupClientRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, groupID string) (string, error) {
// 	               panic("mock out the CreateGroupClientRole method")
//             },
//             CreateGroupRealmRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, groupID string) (string, error) {
// 	               panic("mock out the CreateGroupRealmRole method")
//             },
//             CreateIdentityProviderFunc: func(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) (string, error) {
// 	               panic("mock out the CreateIdentityProvider method")
//             },
//             CreateRealmFunc: func(realm *v1alpha1.KeycloakRealm) (string, error) {
// 	               panic("mock out the CreateRealm method")
//             },
//             CreateUserFunc: func(user *v1alpha1.KeycloakAPIUser, realmName string) (string, error) {
// 	               panic("mock out the CreateUser method")
//             },
//             CreateUserClientRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) (string, error) {
// 	               panic("mock out the CreateUserClientRole method")
//             },
//             CreateUserRealmRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, userID string) (string, error) {
// 	               panic("mock out the CreateUserRealmRole method")
//             },
//             DeleteAuthenticatorConfigFunc: func(configID string, realmName string) error {
// 	               panic("mock out the DeleteAuthenticatorConfig method")
//             },
//             DeleteClientFunc: func(clientID string, realmName string) error {
// 	               panic("mock out the DeleteClient method")
//             },
//             DeleteIdentityProviderFunc: func(alias string, realmName string) error {
// 	               panic("mock out the DeleteIdentityProvider method")
//             },
//             DeleteRealmFunc: func(realmName string) error {
// 	               panic("mock out the DeleteRealm method")
//             },
//             DeleteUserFunc: func(userID string, realmName string) error {
// 	               panic("mock out the DeleteUser method")
//             },
//             DeleteUserClientRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) error {
// 	               panic("mock out the DeleteUserClientRole method")
//             },
//             DeleteUserFromGroupFunc: func(realmName string, userID string, groupID string) error {
// 	               panic("mock out the DeleteUserFromGroup method")
//             },
//             DeleteUserRealmRoleFunc: func(role *v1alpha1.KeycloakUserRole, realmName string, userID string) error {
// 	               panic("mock out the DeleteUserRealmRole method")
//             },
//             FindAuthenticationExecutionForFlowFunc: func(flowAlias string, realmName string, predicate func(*v1alpha1.AuthenticationExecutionInfo) bool) (*v1alpha1.AuthenticationExecutionInfo, error) {
// 	               panic("mock out the FindAuthenticationExecutionForFlow method")
//             },
//             FindAuthenticationFlowByAliasFunc: func(flowAlias string, realmName string) (*AuthenticationFlow, error) {
// 	               panic("mock out the FindAuthenticationFlowByAlias method")
//             },
//             FindAvailableGroupClientRoleFunc: func(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the FindAvailableGroupClientRole method")
//             },
//             FindGroupByNameFunc: func(groupName string, realmName string) (*Group, error) {
// 	               panic("mock out the FindGroupByName method")
//             },
//             FindGroupClientRoleFunc: func(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the FindGroupClientRole method")
//             },
//             FindUserByEmailFunc: func(email string, realm string) (*v1alpha1.KeycloakAPIUser, error) {
// 	               panic("mock out the FindUserByEmail method")
//             },
//             FindUserByUsernameFunc: func(name string, realm string) (*v1alpha1.KeycloakAPIUser, error) {
// 	               panic("mock out the FindUserByUsername method")
//             },
//             GetAuthenticatorConfigFunc: func(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error) {
// 	               panic("mock out the GetAuthenticatorConfig method")
//             },
//             GetClientFunc: func(clientID string, realmName string) (*v1alpha1.KeycloakAPIClient, error) {
// 	               panic("mock out the GetClient method")
//             },
//             GetClientInstallFunc: func(clientID string, realmName string) ([]byte, error) {
// 	               panic("mock out the GetClientInstall method")
//             },
//             GetClientSecretFunc: func(clientID string, realmName string) (string, error) {
// 	               panic("mock out the GetClientSecret method")
//             },
//             GetIdentityProviderFunc: func(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error) {
// 	               panic("mock out the GetIdentityProvider method")
//             },
//             GetRealmFunc: func(realmName string) (*v1alpha1.KeycloakRealm, error) {
// 	               panic("mock out the GetRealm method")
//             },
//             GetUserFunc: func(userID string, realmName string) (*v1alpha1.KeycloakAPIUser, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUserFederatedIdentitiesFunc: func(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error) {
// 	               panic("mock out the GetUserFederatedIdentities method")
//             },
//             ListAuthenticationExecutionsForFlowFunc: func(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error) {
// 	               panic("mock out the ListAuthenticationExecutionsForFlow method")
//             },
//             ListAuthenticationFlowsFunc: func(realmName string) ([]*AuthenticationFlow, error) {
// 	               panic("mock out the ListAuthenticationFlows method")
//             },
//             ListAvailableGroupClientRolesFunc: func(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListAvailableGroupClientRoles method")
//             },
//             ListAvailableGroupRealmRolesFunc: func(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListAvailableGroupRealmRoles method")
//             },
//             ListAvailableUserClientRolesFunc: func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListAvailableUserClientRoles method")
//             },
//             ListAvailableUserRealmRolesFunc: func(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListAvailableUserRealmRoles method")
//             },
//             ListClientsFunc: func(realmName string) ([]*v1alpha1.KeycloakAPIClient, error) {
// 	               panic("mock out the ListClients method")
//             },
//             ListDefaultGroupsFunc: func(realmName string) ([]*Group, error) {
// 	               panic("mock out the ListDefaultGroups method")
//             },
//             ListGroupClientRolesFunc: func(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListGroupClientRoles method")
//             },
//             ListGroupRealmRolesFunc: func(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListGroupRealmRoles method")
//             },
//             ListIdentityProvidersFunc: func(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error) {
// 	               panic("mock out the ListIdentityProviders method")
//             },
//             ListRealmsFunc: func() ([]*v1alpha1.KeycloakAPIRealm, error) {
// 	               panic("mock out the ListRealms method")
//             },
//             ListUserClientRolesFunc: func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListUserClientRoles method")
//             },
//             ListUserRealmRolesFunc: func(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
// 	               panic("mock out the ListUserRealmRoles method")
//             },
//             ListUsersFunc: func(realmName string) ([]*v1alpha1.KeycloakAPIUser, error) {
// 	               panic("mock out the ListUsers method")
//             },
//             ListUsersInGroupFunc: func(realmName string, groupID string) ([]*v1alpha1.KeycloakAPIUser, error) {
// 	               panic("mock out the ListUsersInGroup method")
//             },
//             MakeGroupDefaultFunc: func(groupID string, realmName string) error {
// 	               panic("mock out the MakeGroupDefault method")
//             },
//             PingFunc: func() error {
// 	               panic("mock out the Ping method")
//             },
//             RemoveFederatedIdentityFunc: func(fid v1alpha1.FederatedIdentity, userID string, realmName string) error {
// 	               panic("mock out the RemoveFederatedIdentity method")
//             },
//             SetGroupChildFunc: func(groupID string, realmName string, childGroup *Group) error {
// 	               panic("mock out the SetGroupChild method")
//             },
//             UpdateAuthenticationExecutionForFlowFunc: func(flowAlias string, realmName string, execution *v1alpha1.AuthenticationExecutionInfo) error {
// 	               panic("mock out the UpdateAuthenticationExecutionForFlow method")
//             },
//             UpdateAuthenticatorConfigFunc: func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error {
// 	               panic("mock out the UpdateAuthenticatorConfig method")
//             },
//             UpdateClientFunc: func(specClient *v1alpha1.KeycloakAPIClient, realmName string) error {
// 	               panic("mock out the UpdateClient method")
//             },
//             UpdateIdentityProviderFunc: func(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
// 	               panic("mock out the UpdateIdentityProvider method")
//             },
//             UpdatePasswordFunc: func(user *v1alpha1.KeycloakAPIUser, realmName string, newPass string) error {
// 	               panic("mock out the UpdatePassword method")
//             },
//             UpdateRealmFunc: func(specRealm *v1alpha1.KeycloakRealm) error {
// 	               panic("mock out the UpdateRealm method")
//             },
//             UpdateUserFunc: func(specUser *v1alpha1.KeycloakAPIUser, realmName string) error {
// 	               panic("mock out the UpdateUser method")
//             },
//         }
//
//         // use mockedKeycloakInterface in code that requires KeycloakInterface
//         // and then make assertions.
//
//     }
type KeycloakInterfaceMock struct {
	// AddExecutionToAuthenticatonFlowFunc mocks the AddExecutionToAuthenticatonFlow method.
	AddExecutionToAuthenticatonFlowFunc func(flowAlias string, realmName string, providerID string, requirement Requirement) error

	// AddUserToGroupFunc mocks the AddUserToGroup method.
	AddUserToGroupFunc func(realmName string, userID string, groupID string) error

	// CreateAuthenticationFlowFunc mocks the CreateAuthenticationFlow method.
	CreateAuthenticationFlowFunc func(authFlow AuthenticationFlow, realmName string) (string, error)

	// CreateAuthenticatorConfigFunc mocks the CreateAuthenticatorConfig method.
	CreateAuthenticatorConfigFunc func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) (string, error)

	// CreateClientFunc mocks the CreateClient method.
	CreateClientFunc func(client *v1alpha1.KeycloakAPIClient, realmName string) (string, error)

	// CreateFederatedIdentityFunc mocks the CreateFederatedIdentity method.
	CreateFederatedIdentityFunc func(fid v1alpha1.FederatedIdentity, userID string, realmName string) (string, error)

	// CreateGroupFunc mocks the CreateGroup method.
	CreateGroupFunc func(group string, realmName string) (string, error)

	// CreateGroupClientRoleFunc mocks the CreateGroupClientRole method.
	CreateGroupClientRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, groupID string) (string, error)

	// CreateGroupRealmRoleFunc mocks the CreateGroupRealmRole method.
	CreateGroupRealmRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, groupID string) (string, error)

	// CreateIdentityProviderFunc mocks the CreateIdentityProvider method.
	CreateIdentityProviderFunc func(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) (string, error)

	// CreateRealmFunc mocks the CreateRealm method.
	CreateRealmFunc func(realm *v1alpha1.KeycloakRealm) (string, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *v1alpha1.KeycloakAPIUser, realmName string) (string, error)

	// CreateUserClientRoleFunc mocks the CreateUserClientRole method.
	CreateUserClientRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) (string, error)

	// CreateUserRealmRoleFunc mocks the CreateUserRealmRole method.
	CreateUserRealmRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, userID string) (string, error)

	// DeleteAuthenticatorConfigFunc mocks the DeleteAuthenticatorConfig method.
	DeleteAuthenticatorConfigFunc func(configID string, realmName string) error

	// DeleteClientFunc mocks the DeleteClient method.
	DeleteClientFunc func(clientID string, realmName string) error

	// DeleteIdentityProviderFunc mocks the DeleteIdentityProvider method.
	DeleteIdentityProviderFunc func(alias string, realmName string) error

	// DeleteRealmFunc mocks the DeleteRealm method.
	DeleteRealmFunc func(realmName string) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(userID string, realmName string) error

	// DeleteUserClientRoleFunc mocks the DeleteUserClientRole method.
	DeleteUserClientRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) error

	// DeleteUserFromGroupFunc mocks the DeleteUserFromGroup method.
	DeleteUserFromGroupFunc func(realmName string, userID string, groupID string) error

	// DeleteUserRealmRoleFunc mocks the DeleteUserRealmRole method.
	DeleteUserRealmRoleFunc func(role *v1alpha1.KeycloakUserRole, realmName string, userID string) error

	// FindAuthenticationExecutionForFlowFunc mocks the FindAuthenticationExecutionForFlow method.
	FindAuthenticationExecutionForFlowFunc func(flowAlias string, realmName string, predicate func(*v1alpha1.AuthenticationExecutionInfo) bool) (*v1alpha1.AuthenticationExecutionInfo, error)

	// FindAuthenticationFlowByAliasFunc mocks the FindAuthenticationFlowByAlias method.
	FindAuthenticationFlowByAliasFunc func(flowAlias string, realmName string) (*AuthenticationFlow, error)

	// FindAvailableGroupClientRoleFunc mocks the FindAvailableGroupClientRole method.
	FindAvailableGroupClientRoleFunc func(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error)

	// FindGroupByNameFunc mocks the FindGroupByName method.
	FindGroupByNameFunc func(groupName string, realmName string) (*Group, error)

	// FindGroupClientRoleFunc mocks the FindGroupClientRole method.
	FindGroupClientRoleFunc func(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error)

	// FindUserByEmailFunc mocks the FindUserByEmail method.
	FindUserByEmailFunc func(email string, realm string) (*v1alpha1.KeycloakAPIUser, error)

	// FindUserByUsernameFunc mocks the FindUserByUsername method.
	FindUserByUsernameFunc func(name string, realm string) (*v1alpha1.KeycloakAPIUser, error)

	// GetAuthenticatorConfigFunc mocks the GetAuthenticatorConfig method.
	GetAuthenticatorConfigFunc func(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error)

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(clientID string, realmName string) (*v1alpha1.KeycloakAPIClient, error)

	// GetClientInstallFunc mocks the GetClientInstall method.
	GetClientInstallFunc func(clientID string, realmName string) ([]byte, error)

	// GetClientSecretFunc mocks the GetClientSecret method.
	GetClientSecretFunc func(clientID string, realmName string) (string, error)

	// GetIdentityProviderFunc mocks the GetIdentityProvider method.
	GetIdentityProviderFunc func(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error)

	// GetRealmFunc mocks the GetRealm method.
	GetRealmFunc func(realmName string) (*v1alpha1.KeycloakRealm, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(userID string, realmName string) (*v1alpha1.KeycloakAPIUser, error)

	// GetUserFederatedIdentitiesFunc mocks the GetUserFederatedIdentities method.
	GetUserFederatedIdentitiesFunc func(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error)

	// ListAuthenticationExecutionsForFlowFunc mocks the ListAuthenticationExecutionsForFlow method.
	ListAuthenticationExecutionsForFlowFunc func(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error)

	// ListAuthenticationFlowsFunc mocks the ListAuthenticationFlows method.
	ListAuthenticationFlowsFunc func(realmName string) ([]*AuthenticationFlow, error)

	// ListAvailableGroupClientRolesFunc mocks the ListAvailableGroupClientRoles method.
	ListAvailableGroupClientRolesFunc func(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListAvailableGroupRealmRolesFunc mocks the ListAvailableGroupRealmRoles method.
	ListAvailableGroupRealmRolesFunc func(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListAvailableUserClientRolesFunc mocks the ListAvailableUserClientRoles method.
	ListAvailableUserClientRolesFunc func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListAvailableUserRealmRolesFunc mocks the ListAvailableUserRealmRoles method.
	ListAvailableUserRealmRolesFunc func(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListClientsFunc mocks the ListClients method.
	ListClientsFunc func(realmName string) ([]*v1alpha1.KeycloakAPIClient, error)

	// ListDefaultGroupsFunc mocks the ListDefaultGroups method.
	ListDefaultGroupsFunc func(realmName string) ([]*Group, error)

	// ListGroupClientRolesFunc mocks the ListGroupClientRoles method.
	ListGroupClientRolesFunc func(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListGroupRealmRolesFunc mocks the ListGroupRealmRoles method.
	ListGroupRealmRolesFunc func(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListIdentityProvidersFunc mocks the ListIdentityProviders method.
	ListIdentityProvidersFunc func(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error)

	// ListRealmsFunc mocks the ListRealms method.
	ListRealmsFunc func() ([]*v1alpha1.KeycloakAPIRealm, error)

	// ListUserClientRolesFunc mocks the ListUserClientRoles method.
	ListUserClientRolesFunc func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListUserRealmRolesFunc mocks the ListUserRealmRoles method.
	ListUserRealmRolesFunc func(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(realmName string) ([]*v1alpha1.KeycloakAPIUser, error)

	// ListUsersInGroupFunc mocks the ListUsersInGroup method.
	ListUsersInGroupFunc func(realmName string, groupID string) ([]*v1alpha1.KeycloakAPIUser, error)

	// MakeGroupDefaultFunc mocks the MakeGroupDefault method.
	MakeGroupDefaultFunc func(groupID string, realmName string) error

	// PingFunc mocks the Ping method.
	PingFunc func() error

	// RemoveFederatedIdentityFunc mocks the RemoveFederatedIdentity method.
	RemoveFederatedIdentityFunc func(fid v1alpha1.FederatedIdentity, userID string, realmName string) error

	// SetGroupChildFunc mocks the SetGroupChild method.
	SetGroupChildFunc func(groupID string, realmName string, childGroup *Group) error

	// UpdateAuthenticationExecutionForFlowFunc mocks the UpdateAuthenticationExecutionForFlow method.
	UpdateAuthenticationExecutionForFlowFunc func(flowAlias string, realmName string, execution *v1alpha1.AuthenticationExecutionInfo) error

	// UpdateAuthenticatorConfigFunc mocks the UpdateAuthenticatorConfig method.
	UpdateAuthenticatorConfigFunc func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error

	// UpdateClientFunc mocks the UpdateClient method.
	UpdateClientFunc func(specClient *v1alpha1.KeycloakAPIClient, realmName string) error

	// UpdateIdentityProviderFunc mocks the UpdateIdentityProvider method.
	UpdateIdentityProviderFunc func(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error

	// UpdatePasswordFunc mocks the UpdatePassword method.
	UpdatePasswordFunc func(user *v1alpha1.KeycloakAPIUser, realmName string, newPass string) error

	// UpdateRealmFunc mocks the UpdateRealm method.
	UpdateRealmFunc func(specRealm *v1alpha1.KeycloakRealm) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(specUser *v1alpha1.KeycloakAPIUser, realmName string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddExecutionToAuthenticatonFlow holds details about calls to the AddExecutionToAuthenticatonFlow method.
		AddExecutionToAuthenticatonFlow []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
			// ProviderID is the providerID argument value.
			ProviderID string
			// Requirement is the requirement argument value.
			Requirement Requirement
		}
		// AddUserToGroup holds details about calls to the AddUserToGroup method.
		AddUserToGroup []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// CreateAuthenticationFlow holds details about calls to the CreateAuthenticationFlow method.
		CreateAuthenticationFlow []struct {
			// AuthFlow is the authFlow argument value.
			AuthFlow AuthenticationFlow
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateAuthenticatorConfig holds details about calls to the CreateAuthenticatorConfig method.
		CreateAuthenticatorConfig []struct {
			// AuthenticatorConfig is the authenticatorConfig argument value.
			AuthenticatorConfig *v1alpha1.AuthenticatorConfig
			// RealmName is the realmName argument value.
			RealmName string
			// ExecutionID is the executionID argument value.
			ExecutionID string
		}
		// CreateClient holds details about calls to the CreateClient method.
		CreateClient []struct {
			// Client is the client argument value.
			Client *v1alpha1.KeycloakAPIClient
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateFederatedIdentity holds details about calls to the CreateFederatedIdentity method.
		CreateFederatedIdentity []struct {
			// Fid is the fid argument value.
			Fid v1alpha1.FederatedIdentity
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateGroup holds details about calls to the CreateGroup method.
		CreateGroup []struct {
			// Group is the group argument value.
			Group string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateGroupClientRole holds details about calls to the CreateGroupClientRole method.
		CreateGroupClientRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// CreateGroupRealmRole holds details about calls to the CreateGroupRealmRole method.
		CreateGroupRealmRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// CreateIdentityProvider holds details about calls to the CreateIdentityProvider method.
		CreateIdentityProvider []struct {
			// IdentityProvider is the identityProvider argument value.
			IdentityProvider *v1alpha1.KeycloakIdentityProvider
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateRealm holds details about calls to the CreateRealm method.
		CreateRealm []struct {
			// Realm is the realm argument value.
			Realm *v1alpha1.KeycloakRealm
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *v1alpha1.KeycloakAPIUser
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateUserClientRole holds details about calls to the CreateUserClientRole method.
		CreateUserClientRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// CreateUserRealmRole holds details about calls to the CreateUserRealmRole method.
		CreateUserRealmRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
		}
		// DeleteAuthenticatorConfig holds details about calls to the DeleteAuthenticatorConfig method.
		DeleteAuthenticatorConfig []struct {
			// ConfigID is the configID argument value.
			ConfigID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteClient holds details about calls to the DeleteClient method.
		DeleteClient []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteIdentityProvider holds details about calls to the DeleteIdentityProvider method.
		DeleteIdentityProvider []struct {
			// Alias is the alias argument value.
			Alias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteRealm holds details about calls to the DeleteRealm method.
		DeleteRealm []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteUserClientRole holds details about calls to the DeleteUserClientRole method.
		DeleteUserClientRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// DeleteUserFromGroup holds details about calls to the DeleteUserFromGroup method.
		DeleteUserFromGroup []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// DeleteUserRealmRole holds details about calls to the DeleteUserRealmRole method.
		DeleteUserRealmRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserRole
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
		}
		// FindAuthenticationExecutionForFlow holds details about calls to the FindAuthenticationExecutionForFlow method.
		FindAuthenticationExecutionForFlow []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
			// Predicate is the predicate argument value.
			Predicate func(*v1alpha1.AuthenticationExecutionInfo) bool
		}
		// FindAuthenticationFlowByAlias holds details about calls to the FindAuthenticationFlowByAlias method.
		FindAuthenticationFlowByAlias []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// FindAvailableGroupClientRole holds details about calls to the FindAvailableGroupClientRole method.
		FindAvailableGroupClientRole []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
			// Predicate is the predicate argument value.
			Predicate func(*v1alpha1.KeycloakUserRole) bool
		}
		// FindGroupByName holds details about calls to the FindGroupByName method.
		FindGroupByName []struct {
			// GroupName is the groupName argument value.
			GroupName string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// FindGroupClientRole holds details about calls to the FindGroupClientRole method.
		FindGroupClientRole []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
			// Predicate is the predicate argument value.
			Predicate func(*v1alpha1.KeycloakUserRole) bool
		}
		// FindUserByEmail holds details about calls to the FindUserByEmail method.
		FindUserByEmail []struct {
			// Email is the email argument value.
			Email string
			// Realm is the realm argument value.
			Realm string
		}
		// FindUserByUsername holds details about calls to the FindUserByUsername method.
		FindUserByUsername []struct {
			// Name is the name argument value.
			Name string
			// Realm is the realm argument value.
			Realm string
		}
		// GetAuthenticatorConfig holds details about calls to the GetAuthenticatorConfig method.
		GetAuthenticatorConfig []struct {
			// ConfigID is the configID argument value.
			ConfigID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClientInstall holds details about calls to the GetClientInstall method.
		GetClientInstall []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClientSecret holds details about calls to the GetClientSecret method.
		GetClientSecret []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetIdentityProvider holds details about calls to the GetIdentityProvider method.
		GetIdentityProvider []struct {
			// Alias is the alias argument value.
			Alias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetRealm holds details about calls to the GetRealm method.
		GetRealm []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetUserFederatedIdentities holds details about calls to the GetUserFederatedIdentities method.
		GetUserFederatedIdentities []struct {
			// UserName is the userName argument value.
			UserName string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListAuthenticationExecutionsForFlow holds details about calls to the ListAuthenticationExecutionsForFlow method.
		ListAuthenticationExecutionsForFlow []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListAuthenticationFlows holds details about calls to the ListAuthenticationFlows method.
		ListAuthenticationFlows []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListAvailableGroupClientRoles holds details about calls to the ListAvailableGroupClientRoles method.
		ListAvailableGroupClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// ListAvailableGroupRealmRoles holds details about calls to the ListAvailableGroupRealmRoles method.
		ListAvailableGroupRealmRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// ListAvailableUserClientRoles holds details about calls to the ListAvailableUserClientRoles method.
		ListAvailableUserClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// ListAvailableUserRealmRoles holds details about calls to the ListAvailableUserRealmRoles method.
		ListAvailableUserRealmRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
		}
		// ListClients holds details about calls to the ListClients method.
		ListClients []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListDefaultGroups holds details about calls to the ListDefaultGroups method.
		ListDefaultGroups []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListGroupClientRoles holds details about calls to the ListGroupClientRoles method.
		ListGroupClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// ListGroupRealmRoles holds details about calls to the ListGroupRealmRoles method.
		ListGroupRealmRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// ListIdentityProviders holds details about calls to the ListIdentityProviders method.
		ListIdentityProviders []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListRealms holds details about calls to the ListRealms method.
		ListRealms []struct {
		}
		// ListUserClientRoles holds details about calls to the ListUserClientRoles method.
		ListUserClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// ListUserRealmRoles holds details about calls to the ListUserRealmRoles method.
		ListUserRealmRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// UserID is the userID argument value.
			UserID string
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListUsersInGroup holds details about calls to the ListUsersInGroup method.
		ListUsersInGroup []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// MakeGroupDefault holds details about calls to the MakeGroupDefault method.
		MakeGroupDefault []struct {
			// GroupID is the groupID argument value.
			GroupID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
		}
		// RemoveFederatedIdentity holds details about calls to the RemoveFederatedIdentity method.
		RemoveFederatedIdentity []struct {
			// Fid is the fid argument value.
			Fid v1alpha1.FederatedIdentity
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// SetGroupChild holds details about calls to the SetGroupChild method.
		SetGroupChild []struct {
			// GroupID is the groupID argument value.
			GroupID string
			// RealmName is the realmName argument value.
			RealmName string
			// ChildGroup is the childGroup argument value.
			ChildGroup *Group
		}
		// UpdateAuthenticationExecutionForFlow holds details about calls to the UpdateAuthenticationExecutionForFlow method.
		UpdateAuthenticationExecutionForFlow []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
			// Execution is the execution argument value.
			Execution *v1alpha1.AuthenticationExecutionInfo
		}
		// UpdateAuthenticatorConfig holds details about calls to the UpdateAuthenticatorConfig method.
		UpdateAuthenticatorConfig []struct {
			// AuthenticatorConfig is the authenticatorConfig argument value.
			AuthenticatorConfig *v1alpha1.AuthenticatorConfig
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdateClient holds details about calls to the UpdateClient method.
		UpdateClient []struct {
			// SpecClient is the specClient argument value.
			SpecClient *v1alpha1.KeycloakAPIClient
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdateIdentityProvider holds details about calls to the UpdateIdentityProvider method.
		UpdateIdentityProvider []struct {
			// SpecIdentityProvider is the specIdentityProvider argument value.
			SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdatePassword holds details about calls to the UpdatePassword method.
		UpdatePassword []struct {
			// User is the user argument value.
			User *v1alpha1.KeycloakAPIUser
			// RealmName is the realmName argument value.
			RealmName string
			// NewPass is the newPass argument value.
			NewPass string
		}
		// UpdateRealm holds details about calls to the UpdateRealm method.
		UpdateRealm []struct {
			// SpecRealm is the specRealm argument value.
			SpecRealm *v1alpha1.KeycloakRealm
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// SpecUser is the specUser argument value.
			SpecUser *v1alpha1.KeycloakAPIUser
			// RealmName is the realmName argument value.
			RealmName string
		}
	}
}

// AddExecutionToAuthenticatonFlow calls AddExecutionToAuthenticatonFlowFunc.
func (mock *KeycloakInterfaceMock) AddExecutionToAuthenticatonFlow(flowAlias string, realmName string, providerID string, requirement Requirement) error {
	if mock.AddExecutionToAuthenticatonFlowFunc == nil {
		panic("KeycloakInterfaceMock.AddExecutionToAuthenticatonFlowFunc: method is nil but KeycloakInterface.AddExecutionToAuthenticatonFlow was just called")
	}
	callInfo := struct {
		FlowAlias   string
		RealmName   string
		ProviderID  string
		Requirement Requirement
	}{
		FlowAlias:   flowAlias,
		RealmName:   realmName,
		ProviderID:  providerID,
		Requirement: requirement,
	}
	lockKeycloakInterfaceMockAddExecutionToAuthenticatonFlow.Lock()
	mock.calls.AddExecutionToAuthenticatonFlow = append(mock.calls.AddExecutionToAuthenticatonFlow, callInfo)
	lockKeycloakInterfaceMockAddExecutionToAuthenticatonFlow.Unlock()
	return mock.AddExecutionToAuthenticatonFlowFunc(flowAlias, realmName, providerID, requirement)
}

// AddExecutionToAuthenticatonFlowCalls gets all the calls that were made to AddExecutionToAuthenticatonFlow.
// Check the length with:
//     len(mockedKeycloakInterface.AddExecutionToAuthenticatonFlowCalls())
func (mock *KeycloakInterfaceMock) AddExecutionToAuthenticatonFlowCalls() []struct {
	FlowAlias   string
	RealmName   string
	ProviderID  string
	Requirement Requirement
} {
	var calls []struct {
		FlowAlias   string
		RealmName   string
		ProviderID  string
		Requirement Requirement
	}
	lockKeycloakInterfaceMockAddExecutionToAuthenticatonFlow.RLock()
	calls = mock.calls.AddExecutionToAuthenticatonFlow
	lockKeycloakInterfaceMockAddExecutionToAuthenticatonFlow.RUnlock()
	return calls
}

// AddUserToGroup calls AddUserToGroupFunc.
func (mock *KeycloakInterfaceMock) AddUserToGroup(realmName string, userID string, groupID string) error {
	if mock.AddUserToGroupFunc == nil {
		panic("KeycloakInterfaceMock.AddUserToGroupFunc: method is nil but KeycloakInterface.AddUserToGroup was just called")
	}
	callInfo := struct {
		RealmName string
		UserID    string
		GroupID   string
	}{
		RealmName: realmName,
		UserID:    userID,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockAddUserToGroup.Lock()
	mock.calls.AddUserToGroup = append(mock.calls.AddUserToGroup, callInfo)
	lockKeycloakInterfaceMockAddUserToGroup.Unlock()
	return mock.AddUserToGroupFunc(realmName, userID, groupID)
}

// AddUserToGroupCalls gets all the calls that were made to AddUserToGroup.
// Check the length with:
//     len(mockedKeycloakInterface.AddUserToGroupCalls())
func (mock *KeycloakInterfaceMock) AddUserToGroupCalls() []struct {
	RealmName string
	UserID    string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		UserID    string
		GroupID   string
	}
	lockKeycloakInterfaceMockAddUserToGroup.RLock()
	calls = mock.calls.AddUserToGroup
	lockKeycloakInterfaceMockAddUserToGroup.RUnlock()
	return calls
}

// CreateAuthenticationFlow calls CreateAuthenticationFlowFunc.
func (mock *KeycloakInterfaceMock) CreateAuthenticationFlow(authFlow AuthenticationFlow, realmName string) (string, error) {
	if mock.CreateAuthenticationFlowFunc == nil {
		panic("KeycloakInterfaceMock.CreateAuthenticationFlowFunc: method is nil but KeycloakInterface.CreateAuthenticationFlow was just called")
	}
	callInfo := struct {
		AuthFlow  AuthenticationFlow
		RealmName string
	}{
		AuthFlow:  authFlow,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateAuthenticationFlow.Lock()
	mock.calls.CreateAuthenticationFlow = append(mock.calls.CreateAuthenticationFlow, callInfo)
	lockKeycloakInterfaceMockCreateAuthenticationFlow.Unlock()
	return mock.CreateAuthenticationFlowFunc(authFlow, realmName)
}

// CreateAuthenticationFlowCalls gets all the calls that were made to CreateAuthenticationFlow.
// Check the length with:
//     len(mockedKeycloakInterface.CreateAuthenticationFlowCalls())
func (mock *KeycloakInterfaceMock) CreateAuthenticationFlowCalls() []struct {
	AuthFlow  AuthenticationFlow
	RealmName string
} {
	var calls []struct {
		AuthFlow  AuthenticationFlow
		RealmName string
	}
	lockKeycloakInterfaceMockCreateAuthenticationFlow.RLock()
	calls = mock.calls.CreateAuthenticationFlow
	lockKeycloakInterfaceMockCreateAuthenticationFlow.RUnlock()
	return calls
}

// CreateAuthenticatorConfig calls CreateAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) CreateAuthenticatorConfig(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) (string, error) {
	if mock.CreateAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.CreateAuthenticatorConfigFunc: method is nil but KeycloakInterface.CreateAuthenticatorConfig was just called")
	}
	callInfo := struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
		ExecutionID         string
	}{
		AuthenticatorConfig: authenticatorConfig,
		RealmName:           realmName,
		ExecutionID:         executionID,
	}
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.Lock()
	mock.calls.CreateAuthenticatorConfig = append(mock.calls.CreateAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.Unlock()
	return mock.CreateAuthenticatorConfigFunc(authenticatorConfig, realmName, executionID)
}

// CreateAuthenticatorConfigCalls gets all the calls that were made to CreateAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.CreateAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) CreateAuthenticatorConfigCalls() []struct {
	AuthenticatorConfig *v1alpha1.AuthenticatorConfig
	RealmName           string
	ExecutionID         string
} {
	var calls []struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
		ExecutionID         string
	}
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.RLock()
	calls = mock.calls.CreateAuthenticatorConfig
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.RUnlock()
	return calls
}

// CreateClient calls CreateClientFunc.
func (mock *KeycloakInterfaceMock) CreateClient(client *v1alpha1.KeycloakAPIClient, realmName string) (string, error) {
	if mock.CreateClientFunc == nil {
		panic("KeycloakInterfaceMock.CreateClientFunc: method is nil but KeycloakInterface.CreateClient was just called")
	}
	callInfo := struct {
		Client    *v1alpha1.KeycloakAPIClient
		RealmName string
	}{
		Client:    client,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateClient.Lock()
	mock.calls.CreateClient = append(mock.calls.CreateClient, callInfo)
	lockKeycloakInterfaceMockCreateClient.Unlock()
	return mock.CreateClientFunc(client, realmName)
}

// CreateClientCalls gets all the calls that were made to CreateClient.
// Check the length with:
//     len(mockedKeycloakInterface.CreateClientCalls())
func (mock *KeycloakInterfaceMock) CreateClientCalls() []struct {
	Client    *v1alpha1.KeycloakAPIClient
	RealmName string
} {
	var calls []struct {
		Client    *v1alpha1.KeycloakAPIClient
		RealmName string
	}
	lockKeycloakInterfaceMockCreateClient.RLock()
	calls = mock.calls.CreateClient
	lockKeycloakInterfaceMockCreateClient.RUnlock()
	return calls
}

// CreateFederatedIdentity calls CreateFederatedIdentityFunc.
func (mock *KeycloakInterfaceMock) CreateFederatedIdentity(fid v1alpha1.FederatedIdentity, userID string, realmName string) (string, error) {
	if mock.CreateFederatedIdentityFunc == nil {
		panic("KeycloakInterfaceMock.CreateFederatedIdentityFunc: method is nil but KeycloakInterface.CreateFederatedIdentity was just called")
	}
	callInfo := struct {
		Fid       v1alpha1.FederatedIdentity
		UserID    string
		RealmName string
	}{
		Fid:       fid,
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateFederatedIdentity.Lock()
	mock.calls.CreateFederatedIdentity = append(mock.calls.CreateFederatedIdentity, callInfo)
	lockKeycloakInterfaceMockCreateFederatedIdentity.Unlock()
	return mock.CreateFederatedIdentityFunc(fid, userID, realmName)
}

// CreateFederatedIdentityCalls gets all the calls that were made to CreateFederatedIdentity.
// Check the length with:
//     len(mockedKeycloakInterface.CreateFederatedIdentityCalls())
func (mock *KeycloakInterfaceMock) CreateFederatedIdentityCalls() []struct {
	Fid       v1alpha1.FederatedIdentity
	UserID    string
	RealmName string
} {
	var calls []struct {
		Fid       v1alpha1.FederatedIdentity
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockCreateFederatedIdentity.RLock()
	calls = mock.calls.CreateFederatedIdentity
	lockKeycloakInterfaceMockCreateFederatedIdentity.RUnlock()
	return calls
}

// CreateGroup calls CreateGroupFunc.
func (mock *KeycloakInterfaceMock) CreateGroup(group string, realmName string) (string, error) {
	if mock.CreateGroupFunc == nil {
		panic("KeycloakInterfaceMock.CreateGroupFunc: method is nil but KeycloakInterface.CreateGroup was just called")
	}
	callInfo := struct {
		Group     string
		RealmName string
	}{
		Group:     group,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateGroup.Lock()
	mock.calls.CreateGroup = append(mock.calls.CreateGroup, callInfo)
	lockKeycloakInterfaceMockCreateGroup.Unlock()
	return mock.CreateGroupFunc(group, realmName)
}

// CreateGroupCalls gets all the calls that were made to CreateGroup.
// Check the length with:
//     len(mockedKeycloakInterface.CreateGroupCalls())
func (mock *KeycloakInterfaceMock) CreateGroupCalls() []struct {
	Group     string
	RealmName string
} {
	var calls []struct {
		Group     string
		RealmName string
	}
	lockKeycloakInterfaceMockCreateGroup.RLock()
	calls = mock.calls.CreateGroup
	lockKeycloakInterfaceMockCreateGroup.RUnlock()
	return calls
}

// CreateGroupClientRole calls CreateGroupClientRoleFunc.
func (mock *KeycloakInterfaceMock) CreateGroupClientRole(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, groupID string) (string, error) {
	if mock.CreateGroupClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.CreateGroupClientRoleFunc: method is nil but KeycloakInterface.CreateGroupClientRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		GroupID   string
	}{
		Role:      role,
		RealmName: realmName,
		ClientID:  clientID,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockCreateGroupClientRole.Lock()
	mock.calls.CreateGroupClientRole = append(mock.calls.CreateGroupClientRole, callInfo)
	lockKeycloakInterfaceMockCreateGroupClientRole.Unlock()
	return mock.CreateGroupClientRoleFunc(role, realmName, clientID, groupID)
}

// CreateGroupClientRoleCalls gets all the calls that were made to CreateGroupClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.CreateGroupClientRoleCalls())
func (mock *KeycloakInterfaceMock) CreateGroupClientRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	ClientID  string
	GroupID   string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		GroupID   string
	}
	lockKeycloakInterfaceMockCreateGroupClientRole.RLock()
	calls = mock.calls.CreateGroupClientRole
	lockKeycloakInterfaceMockCreateGroupClientRole.RUnlock()
	return calls
}

// CreateGroupRealmRole calls CreateGroupRealmRoleFunc.
func (mock *KeycloakInterfaceMock) CreateGroupRealmRole(role *v1alpha1.KeycloakUserRole, realmName string, groupID string) (string, error) {
	if mock.CreateGroupRealmRoleFunc == nil {
		panic("KeycloakInterfaceMock.CreateGroupRealmRoleFunc: method is nil but KeycloakInterface.CreateGroupRealmRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		GroupID   string
	}{
		Role:      role,
		RealmName: realmName,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockCreateGroupRealmRole.Lock()
	mock.calls.CreateGroupRealmRole = append(mock.calls.CreateGroupRealmRole, callInfo)
	lockKeycloakInterfaceMockCreateGroupRealmRole.Unlock()
	return mock.CreateGroupRealmRoleFunc(role, realmName, groupID)
}

// CreateGroupRealmRoleCalls gets all the calls that were made to CreateGroupRealmRole.
// Check the length with:
//     len(mockedKeycloakInterface.CreateGroupRealmRoleCalls())
func (mock *KeycloakInterfaceMock) CreateGroupRealmRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	GroupID   string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		GroupID   string
	}
	lockKeycloakInterfaceMockCreateGroupRealmRole.RLock()
	calls = mock.calls.CreateGroupRealmRole
	lockKeycloakInterfaceMockCreateGroupRealmRole.RUnlock()
	return calls
}

// CreateIdentityProvider calls CreateIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) CreateIdentityProvider(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) (string, error) {
	if mock.CreateIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.CreateIdentityProviderFunc: method is nil but KeycloakInterface.CreateIdentityProvider was just called")
	}
	callInfo := struct {
		IdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName        string
	}{
		IdentityProvider: identityProvider,
		RealmName:        realmName,
	}
	lockKeycloakInterfaceMockCreateIdentityProvider.Lock()
	mock.calls.CreateIdentityProvider = append(mock.calls.CreateIdentityProvider, callInfo)
	lockKeycloakInterfaceMockCreateIdentityProvider.Unlock()
	return mock.CreateIdentityProviderFunc(identityProvider, realmName)
}

// CreateIdentityProviderCalls gets all the calls that were made to CreateIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.CreateIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) CreateIdentityProviderCalls() []struct {
	IdentityProvider *v1alpha1.KeycloakIdentityProvider
	RealmName        string
} {
	var calls []struct {
		IdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName        string
	}
	lockKeycloakInterfaceMockCreateIdentityProvider.RLock()
	calls = mock.calls.CreateIdentityProvider
	lockKeycloakInterfaceMockCreateIdentityProvider.RUnlock()
	return calls
}

// CreateRealm calls CreateRealmFunc.
func (mock *KeycloakInterfaceMock) CreateRealm(realm *v1alpha1.KeycloakRealm) (string, error) {
	if mock.CreateRealmFunc == nil {
		panic("KeycloakInterfaceMock.CreateRealmFunc: method is nil but KeycloakInterface.CreateRealm was just called")
	}
	callInfo := struct {
		Realm *v1alpha1.KeycloakRealm
	}{
		Realm: realm,
	}
	lockKeycloakInterfaceMockCreateRealm.Lock()
	mock.calls.CreateRealm = append(mock.calls.CreateRealm, callInfo)
	lockKeycloakInterfaceMockCreateRealm.Unlock()
	return mock.CreateRealmFunc(realm)
}

// CreateRealmCalls gets all the calls that were made to CreateRealm.
// Check the length with:
//     len(mockedKeycloakInterface.CreateRealmCalls())
func (mock *KeycloakInterfaceMock) CreateRealmCalls() []struct {
	Realm *v1alpha1.KeycloakRealm
} {
	var calls []struct {
		Realm *v1alpha1.KeycloakRealm
	}
	lockKeycloakInterfaceMockCreateRealm.RLock()
	calls = mock.calls.CreateRealm
	lockKeycloakInterfaceMockCreateRealm.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *KeycloakInterfaceMock) CreateUser(user *v1alpha1.KeycloakAPIUser, realmName string) (string, error) {
	if mock.CreateUserFunc == nil {
		panic("KeycloakInterfaceMock.CreateUserFunc: method is nil but KeycloakInterface.CreateUser was just called")
	}
	callInfo := struct {
		User      *v1alpha1.KeycloakAPIUser
		RealmName string
	}{
		User:      user,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockKeycloakInterfaceMockCreateUser.Unlock()
	return mock.CreateUserFunc(user, realmName)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedKeycloakInterface.CreateUserCalls())
func (mock *KeycloakInterfaceMock) CreateUserCalls() []struct {
	User      *v1alpha1.KeycloakAPIUser
	RealmName string
} {
	var calls []struct {
		User      *v1alpha1.KeycloakAPIUser
		RealmName string
	}
	lockKeycloakInterfaceMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockKeycloakInterfaceMockCreateUser.RUnlock()
	return calls
}

// CreateUserClientRole calls CreateUserClientRoleFunc.
func (mock *KeycloakInterfaceMock) CreateUserClientRole(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) (string, error) {
	if mock.CreateUserClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.CreateUserClientRoleFunc: method is nil but KeycloakInterface.CreateUserClientRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		UserID    string
	}{
		Role:      role,
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockCreateUserClientRole.Lock()
	mock.calls.CreateUserClientRole = append(mock.calls.CreateUserClientRole, callInfo)
	lockKeycloakInterfaceMockCreateUserClientRole.Unlock()
	return mock.CreateUserClientRoleFunc(role, realmName, clientID, userID)
}

// CreateUserClientRoleCalls gets all the calls that were made to CreateUserClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.CreateUserClientRoleCalls())
func (mock *KeycloakInterfaceMock) CreateUserClientRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockCreateUserClientRole.RLock()
	calls = mock.calls.CreateUserClientRole
	lockKeycloakInterfaceMockCreateUserClientRole.RUnlock()
	return calls
}

// CreateUserRealmRole calls CreateUserRealmRoleFunc.
func (mock *KeycloakInterfaceMock) CreateUserRealmRole(role *v1alpha1.KeycloakUserRole, realmName string, userID string) (string, error) {
	if mock.CreateUserRealmRoleFunc == nil {
		panic("KeycloakInterfaceMock.CreateUserRealmRoleFunc: method is nil but KeycloakInterface.CreateUserRealmRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		UserID    string
	}{
		Role:      role,
		RealmName: realmName,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockCreateUserRealmRole.Lock()
	mock.calls.CreateUserRealmRole = append(mock.calls.CreateUserRealmRole, callInfo)
	lockKeycloakInterfaceMockCreateUserRealmRole.Unlock()
	return mock.CreateUserRealmRoleFunc(role, realmName, userID)
}

// CreateUserRealmRoleCalls gets all the calls that were made to CreateUserRealmRole.
// Check the length with:
//     len(mockedKeycloakInterface.CreateUserRealmRoleCalls())
func (mock *KeycloakInterfaceMock) CreateUserRealmRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	UserID    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		UserID    string
	}
	lockKeycloakInterfaceMockCreateUserRealmRole.RLock()
	calls = mock.calls.CreateUserRealmRole
	lockKeycloakInterfaceMockCreateUserRealmRole.RUnlock()
	return calls
}

// DeleteAuthenticatorConfig calls DeleteAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) DeleteAuthenticatorConfig(configID string, realmName string) error {
	if mock.DeleteAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.DeleteAuthenticatorConfigFunc: method is nil but KeycloakInterface.DeleteAuthenticatorConfig was just called")
	}
	callInfo := struct {
		ConfigID  string
		RealmName string
	}{
		ConfigID:  configID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.Lock()
	mock.calls.DeleteAuthenticatorConfig = append(mock.calls.DeleteAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.Unlock()
	return mock.DeleteAuthenticatorConfigFunc(configID, realmName)
}

// DeleteAuthenticatorConfigCalls gets all the calls that were made to DeleteAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) DeleteAuthenticatorConfigCalls() []struct {
	ConfigID  string
	RealmName string
} {
	var calls []struct {
		ConfigID  string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.RLock()
	calls = mock.calls.DeleteAuthenticatorConfig
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.RUnlock()
	return calls
}

// DeleteClient calls DeleteClientFunc.
func (mock *KeycloakInterfaceMock) DeleteClient(clientID string, realmName string) error {
	if mock.DeleteClientFunc == nil {
		panic("KeycloakInterfaceMock.DeleteClientFunc: method is nil but KeycloakInterface.DeleteClient was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteClient.Lock()
	mock.calls.DeleteClient = append(mock.calls.DeleteClient, callInfo)
	lockKeycloakInterfaceMockDeleteClient.Unlock()
	return mock.DeleteClientFunc(clientID, realmName)
}

// DeleteClientCalls gets all the calls that were made to DeleteClient.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteClientCalls())
func (mock *KeycloakInterfaceMock) DeleteClientCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteClient.RLock()
	calls = mock.calls.DeleteClient
	lockKeycloakInterfaceMockDeleteClient.RUnlock()
	return calls
}

// DeleteIdentityProvider calls DeleteIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) DeleteIdentityProvider(alias string, realmName string) error {
	if mock.DeleteIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.DeleteIdentityProviderFunc: method is nil but KeycloakInterface.DeleteIdentityProvider was just called")
	}
	callInfo := struct {
		Alias     string
		RealmName string
	}{
		Alias:     alias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteIdentityProvider.Lock()
	mock.calls.DeleteIdentityProvider = append(mock.calls.DeleteIdentityProvider, callInfo)
	lockKeycloakInterfaceMockDeleteIdentityProvider.Unlock()
	return mock.DeleteIdentityProviderFunc(alias, realmName)
}

// DeleteIdentityProviderCalls gets all the calls that were made to DeleteIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) DeleteIdentityProviderCalls() []struct {
	Alias     string
	RealmName string
} {
	var calls []struct {
		Alias     string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteIdentityProvider.RLock()
	calls = mock.calls.DeleteIdentityProvider
	lockKeycloakInterfaceMockDeleteIdentityProvider.RUnlock()
	return calls
}

// DeleteRealm calls DeleteRealmFunc.
func (mock *KeycloakInterfaceMock) DeleteRealm(realmName string) error {
	if mock.DeleteRealmFunc == nil {
		panic("KeycloakInterfaceMock.DeleteRealmFunc: method is nil but KeycloakInterface.DeleteRealm was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteRealm.Lock()
	mock.calls.DeleteRealm = append(mock.calls.DeleteRealm, callInfo)
	lockKeycloakInterfaceMockDeleteRealm.Unlock()
	return mock.DeleteRealmFunc(realmName)
}

// DeleteRealmCalls gets all the calls that were made to DeleteRealm.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteRealmCalls())
func (mock *KeycloakInterfaceMock) DeleteRealmCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteRealm.RLock()
	calls = mock.calls.DeleteRealm
	lockKeycloakInterfaceMockDeleteRealm.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *KeycloakInterfaceMock) DeleteUser(userID string, realmName string) error {
	if mock.DeleteUserFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserFunc: method is nil but KeycloakInterface.DeleteUser was just called")
	}
	callInfo := struct {
		UserID    string
		RealmName string
	}{
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockKeycloakInterfaceMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(userID, realmName)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserCalls())
func (mock *KeycloakInterfaceMock) DeleteUserCalls() []struct {
	UserID    string
	RealmName string
} {
	var calls []struct {
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockKeycloakInterfaceMockDeleteUser.RUnlock()
	return calls
}

// DeleteUserClientRole calls DeleteUserClientRoleFunc.
func (mock *KeycloakInterfaceMock) DeleteUserClientRole(role *v1alpha1.KeycloakUserRole, realmName string, clientID string, userID string) error {
	if mock.DeleteUserClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserClientRoleFunc: method is nil but KeycloakInterface.DeleteUserClientRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		UserID    string
	}{
		Role:      role,
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockDeleteUserClientRole.Lock()
	mock.calls.DeleteUserClientRole = append(mock.calls.DeleteUserClientRole, callInfo)
	lockKeycloakInterfaceMockDeleteUserClientRole.Unlock()
	return mock.DeleteUserClientRoleFunc(role, realmName, clientID, userID)
}

// DeleteUserClientRoleCalls gets all the calls that were made to DeleteUserClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserClientRoleCalls())
func (mock *KeycloakInterfaceMock) DeleteUserClientRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockDeleteUserClientRole.RLock()
	calls = mock.calls.DeleteUserClientRole
	lockKeycloakInterfaceMockDeleteUserClientRole.RUnlock()
	return calls
}

// DeleteUserFromGroup calls DeleteUserFromGroupFunc.
func (mock *KeycloakInterfaceMock) DeleteUserFromGroup(realmName string, userID string, groupID string) error {
	if mock.DeleteUserFromGroupFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserFromGroupFunc: method is nil but KeycloakInterface.DeleteUserFromGroup was just called")
	}
	callInfo := struct {
		RealmName string
		UserID    string
		GroupID   string
	}{
		RealmName: realmName,
		UserID:    userID,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockDeleteUserFromGroup.Lock()
	mock.calls.DeleteUserFromGroup = append(mock.calls.DeleteUserFromGroup, callInfo)
	lockKeycloakInterfaceMockDeleteUserFromGroup.Unlock()
	return mock.DeleteUserFromGroupFunc(realmName, userID, groupID)
}

// DeleteUserFromGroupCalls gets all the calls that were made to DeleteUserFromGroup.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserFromGroupCalls())
func (mock *KeycloakInterfaceMock) DeleteUserFromGroupCalls() []struct {
	RealmName string
	UserID    string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		UserID    string
		GroupID   string
	}
	lockKeycloakInterfaceMockDeleteUserFromGroup.RLock()
	calls = mock.calls.DeleteUserFromGroup
	lockKeycloakInterfaceMockDeleteUserFromGroup.RUnlock()
	return calls
}

// DeleteUserRealmRole calls DeleteUserRealmRoleFunc.
func (mock *KeycloakInterfaceMock) DeleteUserRealmRole(role *v1alpha1.KeycloakUserRole, realmName string, userID string) error {
	if mock.DeleteUserRealmRoleFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserRealmRoleFunc: method is nil but KeycloakInterface.DeleteUserRealmRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		UserID    string
	}{
		Role:      role,
		RealmName: realmName,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockDeleteUserRealmRole.Lock()
	mock.calls.DeleteUserRealmRole = append(mock.calls.DeleteUserRealmRole, callInfo)
	lockKeycloakInterfaceMockDeleteUserRealmRole.Unlock()
	return mock.DeleteUserRealmRoleFunc(role, realmName, userID)
}

// DeleteUserRealmRoleCalls gets all the calls that were made to DeleteUserRealmRole.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserRealmRoleCalls())
func (mock *KeycloakInterfaceMock) DeleteUserRealmRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserRole
	RealmName string
	UserID    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserRole
		RealmName string
		UserID    string
	}
	lockKeycloakInterfaceMockDeleteUserRealmRole.RLock()
	calls = mock.calls.DeleteUserRealmRole
	lockKeycloakInterfaceMockDeleteUserRealmRole.RUnlock()
	return calls
}

// FindAuthenticationExecutionForFlow calls FindAuthenticationExecutionForFlowFunc.
func (mock *KeycloakInterfaceMock) FindAuthenticationExecutionForFlow(flowAlias string, realmName string, predicate func(*v1alpha1.AuthenticationExecutionInfo) bool) (*v1alpha1.AuthenticationExecutionInfo, error) {
	if mock.FindAuthenticationExecutionForFlowFunc == nil {
		panic("KeycloakInterfaceMock.FindAuthenticationExecutionForFlowFunc: method is nil but KeycloakInterface.FindAuthenticationExecutionForFlow was just called")
	}
	callInfo := struct {
		FlowAlias string
		RealmName string
		Predicate func(*v1alpha1.AuthenticationExecutionInfo) bool
	}{
		FlowAlias: flowAlias,
		RealmName: realmName,
		Predicate: predicate,
	}
	lockKeycloakInterfaceMockFindAuthenticationExecutionForFlow.Lock()
	mock.calls.FindAuthenticationExecutionForFlow = append(mock.calls.FindAuthenticationExecutionForFlow, callInfo)
	lockKeycloakInterfaceMockFindAuthenticationExecutionForFlow.Unlock()
	return mock.FindAuthenticationExecutionForFlowFunc(flowAlias, realmName, predicate)
}

// FindAuthenticationExecutionForFlowCalls gets all the calls that were made to FindAuthenticationExecutionForFlow.
// Check the length with:
//     len(mockedKeycloakInterface.FindAuthenticationExecutionForFlowCalls())
func (mock *KeycloakInterfaceMock) FindAuthenticationExecutionForFlowCalls() []struct {
	FlowAlias string
	RealmName string
	Predicate func(*v1alpha1.AuthenticationExecutionInfo) bool
} {
	var calls []struct {
		FlowAlias string
		RealmName string
		Predicate func(*v1alpha1.AuthenticationExecutionInfo) bool
	}
	lockKeycloakInterfaceMockFindAuthenticationExecutionForFlow.RLock()
	calls = mock.calls.FindAuthenticationExecutionForFlow
	lockKeycloakInterfaceMockFindAuthenticationExecutionForFlow.RUnlock()
	return calls
}

// FindAuthenticationFlowByAlias calls FindAuthenticationFlowByAliasFunc.
func (mock *KeycloakInterfaceMock) FindAuthenticationFlowByAlias(flowAlias string, realmName string) (*AuthenticationFlow, error) {
	if mock.FindAuthenticationFlowByAliasFunc == nil {
		panic("KeycloakInterfaceMock.FindAuthenticationFlowByAliasFunc: method is nil but KeycloakInterface.FindAuthenticationFlowByAlias was just called")
	}
	callInfo := struct {
		FlowAlias string
		RealmName string
	}{
		FlowAlias: flowAlias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockFindAuthenticationFlowByAlias.Lock()
	mock.calls.FindAuthenticationFlowByAlias = append(mock.calls.FindAuthenticationFlowByAlias, callInfo)
	lockKeycloakInterfaceMockFindAuthenticationFlowByAlias.Unlock()
	return mock.FindAuthenticationFlowByAliasFunc(flowAlias, realmName)
}

// FindAuthenticationFlowByAliasCalls gets all the calls that were made to FindAuthenticationFlowByAlias.
// Check the length with:
//     len(mockedKeycloakInterface.FindAuthenticationFlowByAliasCalls())
func (mock *KeycloakInterfaceMock) FindAuthenticationFlowByAliasCalls() []struct {
	FlowAlias string
	RealmName string
} {
	var calls []struct {
		FlowAlias string
		RealmName string
	}
	lockKeycloakInterfaceMockFindAuthenticationFlowByAlias.RLock()
	calls = mock.calls.FindAuthenticationFlowByAlias
	lockKeycloakInterfaceMockFindAuthenticationFlowByAlias.RUnlock()
	return calls
}

// FindAvailableGroupClientRole calls FindAvailableGroupClientRoleFunc.
func (mock *KeycloakInterfaceMock) FindAvailableGroupClientRole(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error) {
	if mock.FindAvailableGroupClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.FindAvailableGroupClientRoleFunc: method is nil but KeycloakInterface.FindAvailableGroupClientRole was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		GroupID   string
		Predicate func(*v1alpha1.KeycloakUserRole) bool
	}{
		RealmName: realmName,
		ClientID:  clientID,
		GroupID:   groupID,
		Predicate: predicate,
	}
	lockKeycloakInterfaceMockFindAvailableGroupClientRole.Lock()
	mock.calls.FindAvailableGroupClientRole = append(mock.calls.FindAvailableGroupClientRole, callInfo)
	lockKeycloakInterfaceMockFindAvailableGroupClientRole.Unlock()
	return mock.FindAvailableGroupClientRoleFunc(realmName, clientID, groupID, predicate)
}

// FindAvailableGroupClientRoleCalls gets all the calls that were made to FindAvailableGroupClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.FindAvailableGroupClientRoleCalls())
func (mock *KeycloakInterfaceMock) FindAvailableGroupClientRoleCalls() []struct {
	RealmName string
	ClientID  string
	GroupID   string
	Predicate func(*v1alpha1.KeycloakUserRole) bool
} {
	var calls []struct {
		RealmName string
		ClientID  string
		GroupID   string
		Predicate func(*v1alpha1.KeycloakUserRole) bool
	}
	lockKeycloakInterfaceMockFindAvailableGroupClientRole.RLock()
	calls = mock.calls.FindAvailableGroupClientRole
	lockKeycloakInterfaceMockFindAvailableGroupClientRole.RUnlock()
	return calls
}

// FindGroupByName calls FindGroupByNameFunc.
func (mock *KeycloakInterfaceMock) FindGroupByName(groupName string, realmName string) (*Group, error) {
	if mock.FindGroupByNameFunc == nil {
		panic("KeycloakInterfaceMock.FindGroupByNameFunc: method is nil but KeycloakInterface.FindGroupByName was just called")
	}
	callInfo := struct {
		GroupName string
		RealmName string
	}{
		GroupName: groupName,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockFindGroupByName.Lock()
	mock.calls.FindGroupByName = append(mock.calls.FindGroupByName, callInfo)
	lockKeycloakInterfaceMockFindGroupByName.Unlock()
	return mock.FindGroupByNameFunc(groupName, realmName)
}

// FindGroupByNameCalls gets all the calls that were made to FindGroupByName.
// Check the length with:
//     len(mockedKeycloakInterface.FindGroupByNameCalls())
func (mock *KeycloakInterfaceMock) FindGroupByNameCalls() []struct {
	GroupName string
	RealmName string
} {
	var calls []struct {
		GroupName string
		RealmName string
	}
	lockKeycloakInterfaceMockFindGroupByName.RLock()
	calls = mock.calls.FindGroupByName
	lockKeycloakInterfaceMockFindGroupByName.RUnlock()
	return calls
}

// FindGroupClientRole calls FindGroupClientRoleFunc.
func (mock *KeycloakInterfaceMock) FindGroupClientRole(realmName string, clientID string, groupID string, predicate func(*v1alpha1.KeycloakUserRole) bool) (*v1alpha1.KeycloakUserRole, error) {
	if mock.FindGroupClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.FindGroupClientRoleFunc: method is nil but KeycloakInterface.FindGroupClientRole was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		GroupID   string
		Predicate func(*v1alpha1.KeycloakUserRole) bool
	}{
		RealmName: realmName,
		ClientID:  clientID,
		GroupID:   groupID,
		Predicate: predicate,
	}
	lockKeycloakInterfaceMockFindGroupClientRole.Lock()
	mock.calls.FindGroupClientRole = append(mock.calls.FindGroupClientRole, callInfo)
	lockKeycloakInterfaceMockFindGroupClientRole.Unlock()
	return mock.FindGroupClientRoleFunc(realmName, clientID, groupID, predicate)
}

// FindGroupClientRoleCalls gets all the calls that were made to FindGroupClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.FindGroupClientRoleCalls())
func (mock *KeycloakInterfaceMock) FindGroupClientRoleCalls() []struct {
	RealmName string
	ClientID  string
	GroupID   string
	Predicate func(*v1alpha1.KeycloakUserRole) bool
} {
	var calls []struct {
		RealmName string
		ClientID  string
		GroupID   string
		Predicate func(*v1alpha1.KeycloakUserRole) bool
	}
	lockKeycloakInterfaceMockFindGroupClientRole.RLock()
	calls = mock.calls.FindGroupClientRole
	lockKeycloakInterfaceMockFindGroupClientRole.RUnlock()
	return calls
}

// FindUserByEmail calls FindUserByEmailFunc.
func (mock *KeycloakInterfaceMock) FindUserByEmail(email string, realm string) (*v1alpha1.KeycloakAPIUser, error) {
	if mock.FindUserByEmailFunc == nil {
		panic("KeycloakInterfaceMock.FindUserByEmailFunc: method is nil but KeycloakInterface.FindUserByEmail was just called")
	}
	callInfo := struct {
		Email string
		Realm string
	}{
		Email: email,
		Realm: realm,
	}
	lockKeycloakInterfaceMockFindUserByEmail.Lock()
	mock.calls.FindUserByEmail = append(mock.calls.FindUserByEmail, callInfo)
	lockKeycloakInterfaceMockFindUserByEmail.Unlock()
	return mock.FindUserByEmailFunc(email, realm)
}

// FindUserByEmailCalls gets all the calls that were made to FindUserByEmail.
// Check the length with:
//     len(mockedKeycloakInterface.FindUserByEmailCalls())
func (mock *KeycloakInterfaceMock) FindUserByEmailCalls() []struct {
	Email string
	Realm string
} {
	var calls []struct {
		Email string
		Realm string
	}
	lockKeycloakInterfaceMockFindUserByEmail.RLock()
	calls = mock.calls.FindUserByEmail
	lockKeycloakInterfaceMockFindUserByEmail.RUnlock()
	return calls
}

// FindUserByUsername calls FindUserByUsernameFunc.
func (mock *KeycloakInterfaceMock) FindUserByUsername(name string, realm string) (*v1alpha1.KeycloakAPIUser, error) {
	if mock.FindUserByUsernameFunc == nil {
		panic("KeycloakInterfaceMock.FindUserByUsernameFunc: method is nil but KeycloakInterface.FindUserByUsername was just called")
	}
	callInfo := struct {
		Name  string
		Realm string
	}{
		Name:  name,
		Realm: realm,
	}
	lockKeycloakInterfaceMockFindUserByUsername.Lock()
	mock.calls.FindUserByUsername = append(mock.calls.FindUserByUsername, callInfo)
	lockKeycloakInterfaceMockFindUserByUsername.Unlock()
	return mock.FindUserByUsernameFunc(name, realm)
}

// FindUserByUsernameCalls gets all the calls that were made to FindUserByUsername.
// Check the length with:
//     len(mockedKeycloakInterface.FindUserByUsernameCalls())
func (mock *KeycloakInterfaceMock) FindUserByUsernameCalls() []struct {
	Name  string
	Realm string
} {
	var calls []struct {
		Name  string
		Realm string
	}
	lockKeycloakInterfaceMockFindUserByUsername.RLock()
	calls = mock.calls.FindUserByUsername
	lockKeycloakInterfaceMockFindUserByUsername.RUnlock()
	return calls
}

// GetAuthenticatorConfig calls GetAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) GetAuthenticatorConfig(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error) {
	if mock.GetAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.GetAuthenticatorConfigFunc: method is nil but KeycloakInterface.GetAuthenticatorConfig was just called")
	}
	callInfo := struct {
		ConfigID  string
		RealmName string
	}{
		ConfigID:  configID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetAuthenticatorConfig.Lock()
	mock.calls.GetAuthenticatorConfig = append(mock.calls.GetAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockGetAuthenticatorConfig.Unlock()
	return mock.GetAuthenticatorConfigFunc(configID, realmName)
}

// GetAuthenticatorConfigCalls gets all the calls that were made to GetAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.GetAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) GetAuthenticatorConfigCalls() []struct {
	ConfigID  string
	RealmName string
} {
	var calls []struct {
		ConfigID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetAuthenticatorConfig.RLock()
	calls = mock.calls.GetAuthenticatorConfig
	lockKeycloakInterfaceMockGetAuthenticatorConfig.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KeycloakInterfaceMock) GetClient(clientID string, realmName string) (*v1alpha1.KeycloakAPIClient, error) {
	if mock.GetClientFunc == nil {
		panic("KeycloakInterfaceMock.GetClientFunc: method is nil but KeycloakInterface.GetClient was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockKeycloakInterfaceMockGetClient.Unlock()
	return mock.GetClientFunc(clientID, realmName)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientCalls())
func (mock *KeycloakInterfaceMock) GetClientCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockKeycloakInterfaceMockGetClient.RUnlock()
	return calls
}

// GetClientInstall calls GetClientInstallFunc.
func (mock *KeycloakInterfaceMock) GetClientInstall(clientID string, realmName string) ([]byte, error) {
	if mock.GetClientInstallFunc == nil {
		panic("KeycloakInterfaceMock.GetClientInstallFunc: method is nil but KeycloakInterface.GetClientInstall was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClientInstall.Lock()
	mock.calls.GetClientInstall = append(mock.calls.GetClientInstall, callInfo)
	lockKeycloakInterfaceMockGetClientInstall.Unlock()
	return mock.GetClientInstallFunc(clientID, realmName)
}

// GetClientInstallCalls gets all the calls that were made to GetClientInstall.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientInstallCalls())
func (mock *KeycloakInterfaceMock) GetClientInstallCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClientInstall.RLock()
	calls = mock.calls.GetClientInstall
	lockKeycloakInterfaceMockGetClientInstall.RUnlock()
	return calls
}

// GetClientSecret calls GetClientSecretFunc.
func (mock *KeycloakInterfaceMock) GetClientSecret(clientID string, realmName string) (string, error) {
	if mock.GetClientSecretFunc == nil {
		panic("KeycloakInterfaceMock.GetClientSecretFunc: method is nil but KeycloakInterface.GetClientSecret was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClientSecret.Lock()
	mock.calls.GetClientSecret = append(mock.calls.GetClientSecret, callInfo)
	lockKeycloakInterfaceMockGetClientSecret.Unlock()
	return mock.GetClientSecretFunc(clientID, realmName)
}

// GetClientSecretCalls gets all the calls that were made to GetClientSecret.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientSecretCalls())
func (mock *KeycloakInterfaceMock) GetClientSecretCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClientSecret.RLock()
	calls = mock.calls.GetClientSecret
	lockKeycloakInterfaceMockGetClientSecret.RUnlock()
	return calls
}

// GetIdentityProvider calls GetIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) GetIdentityProvider(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error) {
	if mock.GetIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.GetIdentityProviderFunc: method is nil but KeycloakInterface.GetIdentityProvider was just called")
	}
	callInfo := struct {
		Alias     string
		RealmName string
	}{
		Alias:     alias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetIdentityProvider.Lock()
	mock.calls.GetIdentityProvider = append(mock.calls.GetIdentityProvider, callInfo)
	lockKeycloakInterfaceMockGetIdentityProvider.Unlock()
	return mock.GetIdentityProviderFunc(alias, realmName)
}

// GetIdentityProviderCalls gets all the calls that were made to GetIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.GetIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) GetIdentityProviderCalls() []struct {
	Alias     string
	RealmName string
} {
	var calls []struct {
		Alias     string
		RealmName string
	}
	lockKeycloakInterfaceMockGetIdentityProvider.RLock()
	calls = mock.calls.GetIdentityProvider
	lockKeycloakInterfaceMockGetIdentityProvider.RUnlock()
	return calls
}

// GetRealm calls GetRealmFunc.
func (mock *KeycloakInterfaceMock) GetRealm(realmName string) (*v1alpha1.KeycloakRealm, error) {
	if mock.GetRealmFunc == nil {
		panic("KeycloakInterfaceMock.GetRealmFunc: method is nil but KeycloakInterface.GetRealm was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetRealm.Lock()
	mock.calls.GetRealm = append(mock.calls.GetRealm, callInfo)
	lockKeycloakInterfaceMockGetRealm.Unlock()
	return mock.GetRealmFunc(realmName)
}

// GetRealmCalls gets all the calls that were made to GetRealm.
// Check the length with:
//     len(mockedKeycloakInterface.GetRealmCalls())
func (mock *KeycloakInterfaceMock) GetRealmCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockGetRealm.RLock()
	calls = mock.calls.GetRealm
	lockKeycloakInterfaceMockGetRealm.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *KeycloakInterfaceMock) GetUser(userID string, realmName string) (*v1alpha1.KeycloakAPIUser, error) {
	if mock.GetUserFunc == nil {
		panic("KeycloakInterfaceMock.GetUserFunc: method is nil but KeycloakInterface.GetUser was just called")
	}
	callInfo := struct {
		UserID    string
		RealmName string
	}{
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	lockKeycloakInterfaceMockGetUser.Unlock()
	return mock.GetUserFunc(userID, realmName)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedKeycloakInterface.GetUserCalls())
func (mock *KeycloakInterfaceMock) GetUserCalls() []struct {
	UserID    string
	RealmName string
} {
	var calls []struct {
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockGetUser.RLock()
	calls = mock.calls.GetUser
	lockKeycloakInterfaceMockGetUser.RUnlock()
	return calls
}

// GetUserFederatedIdentities calls GetUserFederatedIdentitiesFunc.
func (mock *KeycloakInterfaceMock) GetUserFederatedIdentities(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error) {
	if mock.GetUserFederatedIdentitiesFunc == nil {
		panic("KeycloakInterfaceMock.GetUserFederatedIdentitiesFunc: method is nil but KeycloakInterface.GetUserFederatedIdentities was just called")
	}
	callInfo := struct {
		UserName  string
		RealmName string
	}{
		UserName:  userName,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetUserFederatedIdentities.Lock()
	mock.calls.GetUserFederatedIdentities = append(mock.calls.GetUserFederatedIdentities, callInfo)
	lockKeycloakInterfaceMockGetUserFederatedIdentities.Unlock()
	return mock.GetUserFederatedIdentitiesFunc(userName, realmName)
}

// GetUserFederatedIdentitiesCalls gets all the calls that were made to GetUserFederatedIdentities.
// Check the length with:
//     len(mockedKeycloakInterface.GetUserFederatedIdentitiesCalls())
func (mock *KeycloakInterfaceMock) GetUserFederatedIdentitiesCalls() []struct {
	UserName  string
	RealmName string
} {
	var calls []struct {
		UserName  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetUserFederatedIdentities.RLock()
	calls = mock.calls.GetUserFederatedIdentities
	lockKeycloakInterfaceMockGetUserFederatedIdentities.RUnlock()
	return calls
}

// ListAuthenticationExecutionsForFlow calls ListAuthenticationExecutionsForFlowFunc.
func (mock *KeycloakInterfaceMock) ListAuthenticationExecutionsForFlow(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error) {
	if mock.ListAuthenticationExecutionsForFlowFunc == nil {
		panic("KeycloakInterfaceMock.ListAuthenticationExecutionsForFlowFunc: method is nil but KeycloakInterface.ListAuthenticationExecutionsForFlow was just called")
	}
	callInfo := struct {
		FlowAlias string
		RealmName string
	}{
		FlowAlias: flowAlias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.Lock()
	mock.calls.ListAuthenticationExecutionsForFlow = append(mock.calls.ListAuthenticationExecutionsForFlow, callInfo)
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.Unlock()
	return mock.ListAuthenticationExecutionsForFlowFunc(flowAlias, realmName)
}

// ListAuthenticationExecutionsForFlowCalls gets all the calls that were made to ListAuthenticationExecutionsForFlow.
// Check the length with:
//     len(mockedKeycloakInterface.ListAuthenticationExecutionsForFlowCalls())
func (mock *KeycloakInterfaceMock) ListAuthenticationExecutionsForFlowCalls() []struct {
	FlowAlias string
	RealmName string
} {
	var calls []struct {
		FlowAlias string
		RealmName string
	}
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.RLock()
	calls = mock.calls.ListAuthenticationExecutionsForFlow
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.RUnlock()
	return calls
}

// ListAuthenticationFlows calls ListAuthenticationFlowsFunc.
func (mock *KeycloakInterfaceMock) ListAuthenticationFlows(realmName string) ([]*AuthenticationFlow, error) {
	if mock.ListAuthenticationFlowsFunc == nil {
		panic("KeycloakInterfaceMock.ListAuthenticationFlowsFunc: method is nil but KeycloakInterface.ListAuthenticationFlows was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListAuthenticationFlows.Lock()
	mock.calls.ListAuthenticationFlows = append(mock.calls.ListAuthenticationFlows, callInfo)
	lockKeycloakInterfaceMockListAuthenticationFlows.Unlock()
	return mock.ListAuthenticationFlowsFunc(realmName)
}

// ListAuthenticationFlowsCalls gets all the calls that were made to ListAuthenticationFlows.
// Check the length with:
//     len(mockedKeycloakInterface.ListAuthenticationFlowsCalls())
func (mock *KeycloakInterfaceMock) ListAuthenticationFlowsCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListAuthenticationFlows.RLock()
	calls = mock.calls.ListAuthenticationFlows
	lockKeycloakInterfaceMockListAuthenticationFlows.RUnlock()
	return calls
}

// ListAvailableGroupClientRoles calls ListAvailableGroupClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListAvailableGroupClientRoles(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListAvailableGroupClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListAvailableGroupClientRolesFunc: method is nil but KeycloakInterface.ListAvailableGroupClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		GroupID   string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockListAvailableGroupClientRoles.Lock()
	mock.calls.ListAvailableGroupClientRoles = append(mock.calls.ListAvailableGroupClientRoles, callInfo)
	lockKeycloakInterfaceMockListAvailableGroupClientRoles.Unlock()
	return mock.ListAvailableGroupClientRolesFunc(realmName, clientID, groupID)
}

// ListAvailableGroupClientRolesCalls gets all the calls that were made to ListAvailableGroupClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListAvailableGroupClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListAvailableGroupClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		GroupID   string
	}
	lockKeycloakInterfaceMockListAvailableGroupClientRoles.RLock()
	calls = mock.calls.ListAvailableGroupClientRoles
	lockKeycloakInterfaceMockListAvailableGroupClientRoles.RUnlock()
	return calls
}

// ListAvailableGroupRealmRoles calls ListAvailableGroupRealmRolesFunc.
func (mock *KeycloakInterfaceMock) ListAvailableGroupRealmRoles(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListAvailableGroupRealmRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListAvailableGroupRealmRolesFunc: method is nil but KeycloakInterface.ListAvailableGroupRealmRoles was just called")
	}
	callInfo := struct {
		RealmName string
		GroupID   string
	}{
		RealmName: realmName,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockListAvailableGroupRealmRoles.Lock()
	mock.calls.ListAvailableGroupRealmRoles = append(mock.calls.ListAvailableGroupRealmRoles, callInfo)
	lockKeycloakInterfaceMockListAvailableGroupRealmRoles.Unlock()
	return mock.ListAvailableGroupRealmRolesFunc(realmName, groupID)
}

// ListAvailableGroupRealmRolesCalls gets all the calls that were made to ListAvailableGroupRealmRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListAvailableGroupRealmRolesCalls())
func (mock *KeycloakInterfaceMock) ListAvailableGroupRealmRolesCalls() []struct {
	RealmName string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		GroupID   string
	}
	lockKeycloakInterfaceMockListAvailableGroupRealmRoles.RLock()
	calls = mock.calls.ListAvailableGroupRealmRoles
	lockKeycloakInterfaceMockListAvailableGroupRealmRoles.RUnlock()
	return calls
}

// ListAvailableUserClientRoles calls ListAvailableUserClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListAvailableUserClientRoles(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListAvailableUserClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListAvailableUserClientRolesFunc: method is nil but KeycloakInterface.ListAvailableUserClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		UserID    string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListAvailableUserClientRoles.Lock()
	mock.calls.ListAvailableUserClientRoles = append(mock.calls.ListAvailableUserClientRoles, callInfo)
	lockKeycloakInterfaceMockListAvailableUserClientRoles.Unlock()
	return mock.ListAvailableUserClientRolesFunc(realmName, clientID, userID)
}

// ListAvailableUserClientRolesCalls gets all the calls that were made to ListAvailableUserClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListAvailableUserClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListAvailableUserClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockListAvailableUserClientRoles.RLock()
	calls = mock.calls.ListAvailableUserClientRoles
	lockKeycloakInterfaceMockListAvailableUserClientRoles.RUnlock()
	return calls
}

// ListAvailableUserRealmRoles calls ListAvailableUserRealmRolesFunc.
func (mock *KeycloakInterfaceMock) ListAvailableUserRealmRoles(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListAvailableUserRealmRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListAvailableUserRealmRolesFunc: method is nil but KeycloakInterface.ListAvailableUserRealmRoles was just called")
	}
	callInfo := struct {
		RealmName string
		UserID    string
	}{
		RealmName: realmName,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListAvailableUserRealmRoles.Lock()
	mock.calls.ListAvailableUserRealmRoles = append(mock.calls.ListAvailableUserRealmRoles, callInfo)
	lockKeycloakInterfaceMockListAvailableUserRealmRoles.Unlock()
	return mock.ListAvailableUserRealmRolesFunc(realmName, userID)
}

// ListAvailableUserRealmRolesCalls gets all the calls that were made to ListAvailableUserRealmRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListAvailableUserRealmRolesCalls())
func (mock *KeycloakInterfaceMock) ListAvailableUserRealmRolesCalls() []struct {
	RealmName string
	UserID    string
} {
	var calls []struct {
		RealmName string
		UserID    string
	}
	lockKeycloakInterfaceMockListAvailableUserRealmRoles.RLock()
	calls = mock.calls.ListAvailableUserRealmRoles
	lockKeycloakInterfaceMockListAvailableUserRealmRoles.RUnlock()
	return calls
}

// ListClients calls ListClientsFunc.
func (mock *KeycloakInterfaceMock) ListClients(realmName string) ([]*v1alpha1.KeycloakAPIClient, error) {
	if mock.ListClientsFunc == nil {
		panic("KeycloakInterfaceMock.ListClientsFunc: method is nil but KeycloakInterface.ListClients was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListClients.Lock()
	mock.calls.ListClients = append(mock.calls.ListClients, callInfo)
	lockKeycloakInterfaceMockListClients.Unlock()
	return mock.ListClientsFunc(realmName)
}

// ListClientsCalls gets all the calls that were made to ListClients.
// Check the length with:
//     len(mockedKeycloakInterface.ListClientsCalls())
func (mock *KeycloakInterfaceMock) ListClientsCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListClients.RLock()
	calls = mock.calls.ListClients
	lockKeycloakInterfaceMockListClients.RUnlock()
	return calls
}

// ListDefaultGroups calls ListDefaultGroupsFunc.
func (mock *KeycloakInterfaceMock) ListDefaultGroups(realmName string) ([]*Group, error) {
	if mock.ListDefaultGroupsFunc == nil {
		panic("KeycloakInterfaceMock.ListDefaultGroupsFunc: method is nil but KeycloakInterface.ListDefaultGroups was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListDefaultGroups.Lock()
	mock.calls.ListDefaultGroups = append(mock.calls.ListDefaultGroups, callInfo)
	lockKeycloakInterfaceMockListDefaultGroups.Unlock()
	return mock.ListDefaultGroupsFunc(realmName)
}

// ListDefaultGroupsCalls gets all the calls that were made to ListDefaultGroups.
// Check the length with:
//     len(mockedKeycloakInterface.ListDefaultGroupsCalls())
func (mock *KeycloakInterfaceMock) ListDefaultGroupsCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListDefaultGroups.RLock()
	calls = mock.calls.ListDefaultGroups
	lockKeycloakInterfaceMockListDefaultGroups.RUnlock()
	return calls
}

// ListGroupClientRoles calls ListGroupClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListGroupClientRoles(realmName string, clientID string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListGroupClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListGroupClientRolesFunc: method is nil but KeycloakInterface.ListGroupClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		GroupID   string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockListGroupClientRoles.Lock()
	mock.calls.ListGroupClientRoles = append(mock.calls.ListGroupClientRoles, callInfo)
	lockKeycloakInterfaceMockListGroupClientRoles.Unlock()
	return mock.ListGroupClientRolesFunc(realmName, clientID, groupID)
}

// ListGroupClientRolesCalls gets all the calls that were made to ListGroupClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListGroupClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListGroupClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		GroupID   string
	}
	lockKeycloakInterfaceMockListGroupClientRoles.RLock()
	calls = mock.calls.ListGroupClientRoles
	lockKeycloakInterfaceMockListGroupClientRoles.RUnlock()
	return calls
}

// ListGroupRealmRoles calls ListGroupRealmRolesFunc.
func (mock *KeycloakInterfaceMock) ListGroupRealmRoles(realmName string, groupID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListGroupRealmRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListGroupRealmRolesFunc: method is nil but KeycloakInterface.ListGroupRealmRoles was just called")
	}
	callInfo := struct {
		RealmName string
		GroupID   string
	}{
		RealmName: realmName,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockListGroupRealmRoles.Lock()
	mock.calls.ListGroupRealmRoles = append(mock.calls.ListGroupRealmRoles, callInfo)
	lockKeycloakInterfaceMockListGroupRealmRoles.Unlock()
	return mock.ListGroupRealmRolesFunc(realmName, groupID)
}

// ListGroupRealmRolesCalls gets all the calls that were made to ListGroupRealmRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListGroupRealmRolesCalls())
func (mock *KeycloakInterfaceMock) ListGroupRealmRolesCalls() []struct {
	RealmName string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		GroupID   string
	}
	lockKeycloakInterfaceMockListGroupRealmRoles.RLock()
	calls = mock.calls.ListGroupRealmRoles
	lockKeycloakInterfaceMockListGroupRealmRoles.RUnlock()
	return calls
}

// ListIdentityProviders calls ListIdentityProvidersFunc.
func (mock *KeycloakInterfaceMock) ListIdentityProviders(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error) {
	if mock.ListIdentityProvidersFunc == nil {
		panic("KeycloakInterfaceMock.ListIdentityProvidersFunc: method is nil but KeycloakInterface.ListIdentityProviders was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListIdentityProviders.Lock()
	mock.calls.ListIdentityProviders = append(mock.calls.ListIdentityProviders, callInfo)
	lockKeycloakInterfaceMockListIdentityProviders.Unlock()
	return mock.ListIdentityProvidersFunc(realmName)
}

// ListIdentityProvidersCalls gets all the calls that were made to ListIdentityProviders.
// Check the length with:
//     len(mockedKeycloakInterface.ListIdentityProvidersCalls())
func (mock *KeycloakInterfaceMock) ListIdentityProvidersCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListIdentityProviders.RLock()
	calls = mock.calls.ListIdentityProviders
	lockKeycloakInterfaceMockListIdentityProviders.RUnlock()
	return calls
}

// ListRealms calls ListRealmsFunc.
func (mock *KeycloakInterfaceMock) ListRealms() ([]*v1alpha1.KeycloakAPIRealm, error) {
	if mock.ListRealmsFunc == nil {
		panic("KeycloakInterfaceMock.ListRealmsFunc: method is nil but KeycloakInterface.ListRealms was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakInterfaceMockListRealms.Lock()
	mock.calls.ListRealms = append(mock.calls.ListRealms, callInfo)
	lockKeycloakInterfaceMockListRealms.Unlock()
	return mock.ListRealmsFunc()
}

// ListRealmsCalls gets all the calls that were made to ListRealms.
// Check the length with:
//     len(mockedKeycloakInterface.ListRealmsCalls())
func (mock *KeycloakInterfaceMock) ListRealmsCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakInterfaceMockListRealms.RLock()
	calls = mock.calls.ListRealms
	lockKeycloakInterfaceMockListRealms.RUnlock()
	return calls
}

// ListUserClientRoles calls ListUserClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListUserClientRoles(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListUserClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListUserClientRolesFunc: method is nil but KeycloakInterface.ListUserClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		UserID    string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListUserClientRoles.Lock()
	mock.calls.ListUserClientRoles = append(mock.calls.ListUserClientRoles, callInfo)
	lockKeycloakInterfaceMockListUserClientRoles.Unlock()
	return mock.ListUserClientRolesFunc(realmName, clientID, userID)
}

// ListUserClientRolesCalls gets all the calls that were made to ListUserClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListUserClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListUserClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockListUserClientRoles.RLock()
	calls = mock.calls.ListUserClientRoles
	lockKeycloakInterfaceMockListUserClientRoles.RUnlock()
	return calls
}

// ListUserRealmRoles calls ListUserRealmRolesFunc.
func (mock *KeycloakInterfaceMock) ListUserRealmRoles(realmName string, userID string) ([]*v1alpha1.KeycloakUserRole, error) {
	if mock.ListUserRealmRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListUserRealmRolesFunc: method is nil but KeycloakInterface.ListUserRealmRoles was just called")
	}
	callInfo := struct {
		RealmName string
		UserID    string
	}{
		RealmName: realmName,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListUserRealmRoles.Lock()
	mock.calls.ListUserRealmRoles = append(mock.calls.ListUserRealmRoles, callInfo)
	lockKeycloakInterfaceMockListUserRealmRoles.Unlock()
	return mock.ListUserRealmRolesFunc(realmName, userID)
}

// ListUserRealmRolesCalls gets all the calls that were made to ListUserRealmRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListUserRealmRolesCalls())
func (mock *KeycloakInterfaceMock) ListUserRealmRolesCalls() []struct {
	RealmName string
	UserID    string
} {
	var calls []struct {
		RealmName string
		UserID    string
	}
	lockKeycloakInterfaceMockListUserRealmRoles.RLock()
	calls = mock.calls.ListUserRealmRoles
	lockKeycloakInterfaceMockListUserRealmRoles.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *KeycloakInterfaceMock) ListUsers(realmName string) ([]*v1alpha1.KeycloakAPIUser, error) {
	if mock.ListUsersFunc == nil {
		panic("KeycloakInterfaceMock.ListUsersFunc: method is nil but KeycloakInterface.ListUsers was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	lockKeycloakInterfaceMockListUsers.Unlock()
	return mock.ListUsersFunc(realmName)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//     len(mockedKeycloakInterface.ListUsersCalls())
func (mock *KeycloakInterfaceMock) ListUsersCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListUsers.RLock()
	calls = mock.calls.ListUsers
	lockKeycloakInterfaceMockListUsers.RUnlock()
	return calls
}

// ListUsersInGroup calls ListUsersInGroupFunc.
func (mock *KeycloakInterfaceMock) ListUsersInGroup(realmName string, groupID string) ([]*v1alpha1.KeycloakAPIUser, error) {
	if mock.ListUsersInGroupFunc == nil {
		panic("KeycloakInterfaceMock.ListUsersInGroupFunc: method is nil but KeycloakInterface.ListUsersInGroup was just called")
	}
	callInfo := struct {
		RealmName string
		GroupID   string
	}{
		RealmName: realmName,
		GroupID:   groupID,
	}
	lockKeycloakInterfaceMockListUsersInGroup.Lock()
	mock.calls.ListUsersInGroup = append(mock.calls.ListUsersInGroup, callInfo)
	lockKeycloakInterfaceMockListUsersInGroup.Unlock()
	return mock.ListUsersInGroupFunc(realmName, groupID)
}

// ListUsersInGroupCalls gets all the calls that were made to ListUsersInGroup.
// Check the length with:
//     len(mockedKeycloakInterface.ListUsersInGroupCalls())
func (mock *KeycloakInterfaceMock) ListUsersInGroupCalls() []struct {
	RealmName string
	GroupID   string
} {
	var calls []struct {
		RealmName string
		GroupID   string
	}
	lockKeycloakInterfaceMockListUsersInGroup.RLock()
	calls = mock.calls.ListUsersInGroup
	lockKeycloakInterfaceMockListUsersInGroup.RUnlock()
	return calls
}

// MakeGroupDefault calls MakeGroupDefaultFunc.
func (mock *KeycloakInterfaceMock) MakeGroupDefault(groupID string, realmName string) error {
	if mock.MakeGroupDefaultFunc == nil {
		panic("KeycloakInterfaceMock.MakeGroupDefaultFunc: method is nil but KeycloakInterface.MakeGroupDefault was just called")
	}
	callInfo := struct {
		GroupID   string
		RealmName string
	}{
		GroupID:   groupID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockMakeGroupDefault.Lock()
	mock.calls.MakeGroupDefault = append(mock.calls.MakeGroupDefault, callInfo)
	lockKeycloakInterfaceMockMakeGroupDefault.Unlock()
	return mock.MakeGroupDefaultFunc(groupID, realmName)
}

// MakeGroupDefaultCalls gets all the calls that were made to MakeGroupDefault.
// Check the length with:
//     len(mockedKeycloakInterface.MakeGroupDefaultCalls())
func (mock *KeycloakInterfaceMock) MakeGroupDefaultCalls() []struct {
	GroupID   string
	RealmName string
} {
	var calls []struct {
		GroupID   string
		RealmName string
	}
	lockKeycloakInterfaceMockMakeGroupDefault.RLock()
	calls = mock.calls.MakeGroupDefault
	lockKeycloakInterfaceMockMakeGroupDefault.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *KeycloakInterfaceMock) Ping() error {
	if mock.PingFunc == nil {
		panic("KeycloakInterfaceMock.PingFunc: method is nil but KeycloakInterface.Ping was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakInterfaceMockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	lockKeycloakInterfaceMockPing.Unlock()
	return mock.PingFunc()
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedKeycloakInterface.PingCalls())
func (mock *KeycloakInterfaceMock) PingCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakInterfaceMockPing.RLock()
	calls = mock.calls.Ping
	lockKeycloakInterfaceMockPing.RUnlock()
	return calls
}

// RemoveFederatedIdentity calls RemoveFederatedIdentityFunc.
func (mock *KeycloakInterfaceMock) RemoveFederatedIdentity(fid v1alpha1.FederatedIdentity, userID string, realmName string) error {
	if mock.RemoveFederatedIdentityFunc == nil {
		panic("KeycloakInterfaceMock.RemoveFederatedIdentityFunc: method is nil but KeycloakInterface.RemoveFederatedIdentity was just called")
	}
	callInfo := struct {
		Fid       v1alpha1.FederatedIdentity
		UserID    string
		RealmName string
	}{
		Fid:       fid,
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockRemoveFederatedIdentity.Lock()
	mock.calls.RemoveFederatedIdentity = append(mock.calls.RemoveFederatedIdentity, callInfo)
	lockKeycloakInterfaceMockRemoveFederatedIdentity.Unlock()
	return mock.RemoveFederatedIdentityFunc(fid, userID, realmName)
}

// RemoveFederatedIdentityCalls gets all the calls that were made to RemoveFederatedIdentity.
// Check the length with:
//     len(mockedKeycloakInterface.RemoveFederatedIdentityCalls())
func (mock *KeycloakInterfaceMock) RemoveFederatedIdentityCalls() []struct {
	Fid       v1alpha1.FederatedIdentity
	UserID    string
	RealmName string
} {
	var calls []struct {
		Fid       v1alpha1.FederatedIdentity
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockRemoveFederatedIdentity.RLock()
	calls = mock.calls.RemoveFederatedIdentity
	lockKeycloakInterfaceMockRemoveFederatedIdentity.RUnlock()
	return calls
}

// SetGroupChild calls SetGroupChildFunc.
func (mock *KeycloakInterfaceMock) SetGroupChild(groupID string, realmName string, childGroup *Group) error {
	if mock.SetGroupChildFunc == nil {
		panic("KeycloakInterfaceMock.SetGroupChildFunc: method is nil but KeycloakInterface.SetGroupChild was just called")
	}
	callInfo := struct {
		GroupID    string
		RealmName  string
		ChildGroup *Group
	}{
		GroupID:    groupID,
		RealmName:  realmName,
		ChildGroup: childGroup,
	}
	lockKeycloakInterfaceMockSetGroupChild.Lock()
	mock.calls.SetGroupChild = append(mock.calls.SetGroupChild, callInfo)
	lockKeycloakInterfaceMockSetGroupChild.Unlock()
	return mock.SetGroupChildFunc(groupID, realmName, childGroup)
}

// SetGroupChildCalls gets all the calls that were made to SetGroupChild.
// Check the length with:
//     len(mockedKeycloakInterface.SetGroupChildCalls())
func (mock *KeycloakInterfaceMock) SetGroupChildCalls() []struct {
	GroupID    string
	RealmName  string
	ChildGroup *Group
} {
	var calls []struct {
		GroupID    string
		RealmName  string
		ChildGroup *Group
	}
	lockKeycloakInterfaceMockSetGroupChild.RLock()
	calls = mock.calls.SetGroupChild
	lockKeycloakInterfaceMockSetGroupChild.RUnlock()
	return calls
}

// UpdateAuthenticationExecutionForFlow calls UpdateAuthenticationExecutionForFlowFunc.
func (mock *KeycloakInterfaceMock) UpdateAuthenticationExecutionForFlow(flowAlias string, realmName string, execution *v1alpha1.AuthenticationExecutionInfo) error {
	if mock.UpdateAuthenticationExecutionForFlowFunc == nil {
		panic("KeycloakInterfaceMock.UpdateAuthenticationExecutionForFlowFunc: method is nil but KeycloakInterface.UpdateAuthenticationExecutionForFlow was just called")
	}
	callInfo := struct {
		FlowAlias string
		RealmName string
		Execution *v1alpha1.AuthenticationExecutionInfo
	}{
		FlowAlias: flowAlias,
		RealmName: realmName,
		Execution: execution,
	}
	lockKeycloakInterfaceMockUpdateAuthenticationExecutionForFlow.Lock()
	mock.calls.UpdateAuthenticationExecutionForFlow = append(mock.calls.UpdateAuthenticationExecutionForFlow, callInfo)
	lockKeycloakInterfaceMockUpdateAuthenticationExecutionForFlow.Unlock()
	return mock.UpdateAuthenticationExecutionForFlowFunc(flowAlias, realmName, execution)
}

// UpdateAuthenticationExecutionForFlowCalls gets all the calls that were made to UpdateAuthenticationExecutionForFlow.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateAuthenticationExecutionForFlowCalls())
func (mock *KeycloakInterfaceMock) UpdateAuthenticationExecutionForFlowCalls() []struct {
	FlowAlias string
	RealmName string
	Execution *v1alpha1.AuthenticationExecutionInfo
} {
	var calls []struct {
		FlowAlias string
		RealmName string
		Execution *v1alpha1.AuthenticationExecutionInfo
	}
	lockKeycloakInterfaceMockUpdateAuthenticationExecutionForFlow.RLock()
	calls = mock.calls.UpdateAuthenticationExecutionForFlow
	lockKeycloakInterfaceMockUpdateAuthenticationExecutionForFlow.RUnlock()
	return calls
}

// UpdateAuthenticatorConfig calls UpdateAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) UpdateAuthenticatorConfig(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error {
	if mock.UpdateAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.UpdateAuthenticatorConfigFunc: method is nil but KeycloakInterface.UpdateAuthenticatorConfig was just called")
	}
	callInfo := struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
	}{
		AuthenticatorConfig: authenticatorConfig,
		RealmName:           realmName,
	}
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.Lock()
	mock.calls.UpdateAuthenticatorConfig = append(mock.calls.UpdateAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.Unlock()
	return mock.UpdateAuthenticatorConfigFunc(authenticatorConfig, realmName)
}

// UpdateAuthenticatorConfigCalls gets all the calls that were made to UpdateAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) UpdateAuthenticatorConfigCalls() []struct {
	AuthenticatorConfig *v1alpha1.AuthenticatorConfig
	RealmName           string
} {
	var calls []struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
	}
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.RLock()
	calls = mock.calls.UpdateAuthenticatorConfig
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.RUnlock()
	return calls
}

// UpdateClient calls UpdateClientFunc.
func (mock *KeycloakInterfaceMock) UpdateClient(specClient *v1alpha1.KeycloakAPIClient, realmName string) error {
	if mock.UpdateClientFunc == nil {
		panic("KeycloakInterfaceMock.UpdateClientFunc: method is nil but KeycloakInterface.UpdateClient was just called")
	}
	callInfo := struct {
		SpecClient *v1alpha1.KeycloakAPIClient
		RealmName  string
	}{
		SpecClient: specClient,
		RealmName:  realmName,
	}
	lockKeycloakInterfaceMockUpdateClient.Lock()
	mock.calls.UpdateClient = append(mock.calls.UpdateClient, callInfo)
	lockKeycloakInterfaceMockUpdateClient.Unlock()
	return mock.UpdateClientFunc(specClient, realmName)
}

// UpdateClientCalls gets all the calls that were made to UpdateClient.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateClientCalls())
func (mock *KeycloakInterfaceMock) UpdateClientCalls() []struct {
	SpecClient *v1alpha1.KeycloakAPIClient
	RealmName  string
} {
	var calls []struct {
		SpecClient *v1alpha1.KeycloakAPIClient
		RealmName  string
	}
	lockKeycloakInterfaceMockUpdateClient.RLock()
	calls = mock.calls.UpdateClient
	lockKeycloakInterfaceMockUpdateClient.RUnlock()
	return calls
}

// UpdateIdentityProvider calls UpdateIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) UpdateIdentityProvider(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
	if mock.UpdateIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.UpdateIdentityProviderFunc: method is nil but KeycloakInterface.UpdateIdentityProvider was just called")
	}
	callInfo := struct {
		SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName            string
	}{
		SpecIdentityProvider: specIdentityProvider,
		RealmName:            realmName,
	}
	lockKeycloakInterfaceMockUpdateIdentityProvider.Lock()
	mock.calls.UpdateIdentityProvider = append(mock.calls.UpdateIdentityProvider, callInfo)
	lockKeycloakInterfaceMockUpdateIdentityProvider.Unlock()
	return mock.UpdateIdentityProviderFunc(specIdentityProvider, realmName)
}

// UpdateIdentityProviderCalls gets all the calls that were made to UpdateIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) UpdateIdentityProviderCalls() []struct {
	SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
	RealmName            string
} {
	var calls []struct {
		SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName            string
	}
	lockKeycloakInterfaceMockUpdateIdentityProvider.RLock()
	calls = mock.calls.UpdateIdentityProvider
	lockKeycloakInterfaceMockUpdateIdentityProvider.RUnlock()
	return calls
}

// UpdatePassword calls UpdatePasswordFunc.
func (mock *KeycloakInterfaceMock) UpdatePassword(user *v1alpha1.KeycloakAPIUser, realmName string, newPass string) error {
	if mock.UpdatePasswordFunc == nil {
		panic("KeycloakInterfaceMock.UpdatePasswordFunc: method is nil but KeycloakInterface.UpdatePassword was just called")
	}
	callInfo := struct {
		User      *v1alpha1.KeycloakAPIUser
		RealmName string
		NewPass   string
	}{
		User:      user,
		RealmName: realmName,
		NewPass:   newPass,
	}
	lockKeycloakInterfaceMockUpdatePassword.Lock()
	mock.calls.UpdatePassword = append(mock.calls.UpdatePassword, callInfo)
	lockKeycloakInterfaceMockUpdatePassword.Unlock()
	return mock.UpdatePasswordFunc(user, realmName, newPass)
}

// UpdatePasswordCalls gets all the calls that were made to UpdatePassword.
// Check the length with:
//     len(mockedKeycloakInterface.UpdatePasswordCalls())
func (mock *KeycloakInterfaceMock) UpdatePasswordCalls() []struct {
	User      *v1alpha1.KeycloakAPIUser
	RealmName string
	NewPass   string
} {
	var calls []struct {
		User      *v1alpha1.KeycloakAPIUser
		RealmName string
		NewPass   string
	}
	lockKeycloakInterfaceMockUpdatePassword.RLock()
	calls = mock.calls.UpdatePassword
	lockKeycloakInterfaceMockUpdatePassword.RUnlock()
	return calls
}

// UpdateRealm calls UpdateRealmFunc.
func (mock *KeycloakInterfaceMock) UpdateRealm(specRealm *v1alpha1.KeycloakRealm) error {
	if mock.UpdateRealmFunc == nil {
		panic("KeycloakInterfaceMock.UpdateRealmFunc: method is nil but KeycloakInterface.UpdateRealm was just called")
	}
	callInfo := struct {
		SpecRealm *v1alpha1.KeycloakRealm
	}{
		SpecRealm: specRealm,
	}
	lockKeycloakInterfaceMockUpdateRealm.Lock()
	mock.calls.UpdateRealm = append(mock.calls.UpdateRealm, callInfo)
	lockKeycloakInterfaceMockUpdateRealm.Unlock()
	return mock.UpdateRealmFunc(specRealm)
}

// UpdateRealmCalls gets all the calls that were made to UpdateRealm.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateRealmCalls())
func (mock *KeycloakInterfaceMock) UpdateRealmCalls() []struct {
	SpecRealm *v1alpha1.KeycloakRealm
} {
	var calls []struct {
		SpecRealm *v1alpha1.KeycloakRealm
	}
	lockKeycloakInterfaceMockUpdateRealm.RLock()
	calls = mock.calls.UpdateRealm
	lockKeycloakInterfaceMockUpdateRealm.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *KeycloakInterfaceMock) UpdateUser(specUser *v1alpha1.KeycloakAPIUser, realmName string) error {
	if mock.UpdateUserFunc == nil {
		panic("KeycloakInterfaceMock.UpdateUserFunc: method is nil but KeycloakInterface.UpdateUser was just called")
	}
	callInfo := struct {
		SpecUser  *v1alpha1.KeycloakAPIUser
		RealmName string
	}{
		SpecUser:  specUser,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockKeycloakInterfaceMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(specUser, realmName)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateUserCalls())
func (mock *KeycloakInterfaceMock) UpdateUserCalls() []struct {
	SpecUser  *v1alpha1.KeycloakAPIUser
	RealmName string
} {
	var calls []struct {
		SpecUser  *v1alpha1.KeycloakAPIUser
		RealmName string
	}
	lockKeycloakInterfaceMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockKeycloakInterfaceMockUpdateUser.RUnlock()
	return calls
}
