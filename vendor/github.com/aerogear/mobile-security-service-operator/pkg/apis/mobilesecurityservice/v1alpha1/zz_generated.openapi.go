// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityService":             schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityService(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceApp":          schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceApp(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppSpec":      schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceAppSpec(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppStatus":    schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceAppStatus(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackup":       schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackup(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupSpec":   schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackupSpec(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupStatus": schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackupStatus(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDB":           schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDB(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBSpec":       schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDBSpec(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBStatus":     schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDBStatus(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceSpec":         schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceSpec(ref),
		"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceStatus":       schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceStatus(ref),
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityService is the Schema for the mobilesecurityservices API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceSpec", "github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceApp(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceApp is the Schema for the mobilesecurityserviceapps API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppSpec", "github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceAppStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceAppSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceAppSpec defines the desired state of MobileSecurityServiceApp",
				Properties: map[string]spec.Schema{
					"appName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the app which will be created in the Service side",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appId": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique Identifier for the app which will be created in the Service side",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"appName", "appId"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceAppStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceAppStatus defines the observed state of MobileSecurityServiceApp",
				Properties: map[string]spec.Schema{
					"bindStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"bindStatus"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceBackup is the Schema for the mobilesecurityservicedbbackups API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupSpec", "github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceBackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceBackupSpec defines the desired state of MobileSecurityServiceBackup",
				Properties: map[string]spec.Schema{
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule period for the CronJob  \"0 0 * * *\" # daily at 00:00. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image:tag used to do the backup. More Info: https://github.com/integr8ly/backup-container-image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Database version. (E.g 9.6). IMPORTANT: Just the first 2 digits should be used. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"productName": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to create the directory where the files will be stored More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsS3BucketName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsAccessKeyId": {
						SchemaProps: spec.SchemaProps{
							Description: "Key ID of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret/Token of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsCredentialsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the AWS data credentials already created in the cluster More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsCredentialsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the namespace where the scret with the AWS data credentials is in the cluster More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the EncryptionKey data already created in the cluster More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the namespace where the secret with the EncryptionKey data is in the cluster More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgPublicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG public key to create the EncryptionKeySecret with this data More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG email to create the EncryptionKeySecret with this data More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgTrustModel": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. More info: https://github.com/aerogear/mobile-security-service-operator#configuring-the-backup-service See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceBackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceBackupStatus defines the observed state of MobileSecurityServiceBackup",
				Properties: map[string]spec.Schema{
					"backupStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cronJobName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the CronJob object created and managed by it to schedule the backup job More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dbSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret object created with the database data to allow the backup image connect to the database More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dbSecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data  of the secret object created with the database data to allow the backup image connect to the database More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"awsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Aws data to allow send the backup files to the AWS storage More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data  of the secret object with the Aws data to allow send the backup files to the AWS storage More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"awsCredentialsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Encryption GPG Key More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-type",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the secret object with the Encryption GPG Key More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data of the secret object with the Encryption GPG Key More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hasEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when it has an EncryptionKey to be used to send the backup files More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"databasePodFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"databaseServiceFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cronJobStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the CronJob object More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/batch/v1beta1.CronJobStatus"),
						},
					},
				},
				Required: []string{"backupStatus", "cronJobName", "dbSecretName", "dbSecretData", "awsSecretName", "awsSecretData", "awsCredentialsSecretNamespace", "encryptionKeySecretName", "encryptionKeySecretNamespace", "encryptionKeySecretData", "hasEncryptionKey", "databasePodFound", "databaseServiceFound", "cronJobStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/batch/v1beta1.CronJobStatus"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDB(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceDB is the Schema for the mobilesecurityservicedbs API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBSpec", "github.com/aerogear/mobile-security-service-operator/pkg/apis/mobilesecurityservice/v1alpha1.MobileSecurityServiceDBStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDBSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceDBSpec defines the desired state of MobileSecurityServiceDB",
				Properties: map[string]spec.Schema{
					"databaseName": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabaseNameParam). This value will be used when the ConfigMap created by the MobileSecurityService is not found More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabasePasswordParam). This value will be used when the ConfigMap created by the MobileSecurityService is not found More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabaseUser). This value will be used when the ConfigMap created by the MobileSecurityService is not found More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseNameParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePasswordParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUserParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePort": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Quantity of instances",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Database image:tag E.g \"centos/postgresql-96-centos7\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name to create the Database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory Request which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseStorageRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Storage Request which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceDBStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceDBStatus defines the observed state of MobileSecurityServiceDB",
				Properties: map[string]spec.Schema{
					"persistentVolumeClaimName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the PersistentVolumeClaim created and managed by it More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Database Deployment created and managed by it More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Deployment created and managed by it More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/apps/v1.DeploymentStatus"),
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Database Service created and managed by it More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Service created and managed by it More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
					"databaseStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"persistentVolumeClaimName", "deploymentName", "deploymentStatus", "serviceName", "serviceStatus", "databaseStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/apps/v1.DeploymentStatus", "k8s.io/api/core/v1.ServiceStatus"},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceSpec defines the desired state of MobileSecurityService",
				Properties: map[string]spec.Schema{
					"databaseName": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (PGDATABASE). This value will be shared to create the database managed by the MobileSecurityServiceDB via a configMap. More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (PGPASSWORD). This value will be shared to create the database managed by the MobileSecurityServiceDB via a configMap. More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (PGUSER). This value will be shared to create the database managed by the MobileSecurityServiceDB via a configMap. More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseHost": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (PGHOST) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (LOG_LEVEL) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logFormat": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (LOG_FORMAT) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessControlAllowOrigin": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (ACCESS_CONTROL_ALLOW_ORIGIN) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessControlAllowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (ACCESS_CONTROL_ALLOW_CREDENTIALS) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Service Environment Variable (PORT) More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Quantity of instances",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Service image:tag E.g quay.io/aerogear/mobile-security-service:0.1.0",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the container which will be created for the Service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to create the URL to allow public access to the Servic Options [http or https].",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"memoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory which will be available for the Service container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"memoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory Request which will be available for the Service container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceCpuLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of CPU which will be available for the Service container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceCpu": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU resource which will be available for the Service container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory which will be available for the OAuth container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory Request which will be available for the OAuth container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthResourceCpuLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of CPU which will be available for the OAuth container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthResourceCpu": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU resource which will be available for the OAuth container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthImage": {
						SchemaProps: spec.SchemaProps{
							Description: "Oauth image:tag E.g quay.io/openshift/origin-oauth-proxy:4.2.0 More info: https://github.com/openshift/oauth-proxy",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthContainerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the container which will be created for the Service pod as sidecar",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap which will be created to share the data with MobileSecurityServiceDB. Note that by default it is empty and the name will be : MobileSecurityService CR instance Name + -config More info: https://github.com/aerogear/mobile-security-service-operator#changing-the-environment-variables-values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the route which will vbe created to expose the Service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthContainerImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy definition to pull the Oauth Image More info: https://kubernetes.io/docs/concepts/containers/images/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy definition to pull the Service Image More info: https://kubernetes.io/docs/concepts/containers/images/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_mobilesecurityservice_v1alpha1_MobileSecurityServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MobileSecurityServiceStatus defines the observed state of MobileSecurityService",
				Properties: map[string]spec.Schema{
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ConfigMap created and managed by it with the values used in the Service and Database Environment Variables More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Deployment created and managed by it to provided the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Deployment created and managed by it to provided the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/apps/v1.DeploymentStatus"),
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Service created and managed by it to expose the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Service created and managed by it to expose the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
					"proxyServiceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Proxy Service created and managed by it to allow its internal communication with the database. Required because of the Oauth configuration. More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyServiceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Proxy Service created and managed by it to allow its internal communication with the database. Required because of the Oauth configuration. More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
					"routeName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Route object required to expose public the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Route object required to expose public the Service Application More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-type",
							Ref:         ref("github.com/openshift/api/route/v1.RouteStatus"),
						},
					},
					"appStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully More info: https://github.com/aerogear/mobile-security-service-operator#status-definition-per-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"configMapName", "deploymentName", "deploymentStatus", "serviceName", "serviceStatus", "proxyServiceName", "proxyServiceStatus", "routeName", "routeStatus", "appStatus"},
			},
		},
		Dependencies: []string{
			"github.com/openshift/api/route/v1.RouteStatus", "k8s.io/api/apps/v1.DeploymentStatus", "k8s.io/api/core/v1.ServiceStatus"},
	}
}
