// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	integreatlyv1alpha1 "github.com/integr8ly/integreatly-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/runtime"
	"sync"
)

// Ensure, that ConfigReadableMock does implement ConfigReadable.
// If this is not the case, regenerate this file with moq.
var _ ConfigReadable = &ConfigReadableMock{}

// ConfigReadableMock is a mock implementation of ConfigReadable.
//
//	func TestSomethingThatUsesConfigReadable(t *testing.T) {
//
//		// make and configure a mocked ConfigReadable
//		mockedConfigReadable := &ConfigReadableMock{
//			GetHostFunc: func() string {
//				panic("mock out the GetHost method")
//			},
//			GetNamespaceFunc: func() string {
//				panic("mock out the GetNamespace method")
//			},
//			GetOperatorVersionFunc: func() integreatlyv1alpha1.OperatorVersion {
//				panic("mock out the GetOperatorVersion method")
//			},
//			GetProductNameFunc: func() integreatlyv1alpha1.ProductName {
//				panic("mock out the GetProductName method")
//			},
//			GetProductVersionFunc: func() integreatlyv1alpha1.ProductVersion {
//				panic("mock out the GetProductVersion method")
//			},
//			GetWatchableCRDsFunc: func() []runtime.Object {
//				panic("mock out the GetWatchableCRDs method")
//			},
//			ReadFunc: func() ProductConfig {
//				panic("mock out the Read method")
//			},
//		}
//
//		// use mockedConfigReadable in code that requires ConfigReadable
//		// and then make assertions.
//
//	}
type ConfigReadableMock struct {
	// GetHostFunc mocks the GetHost method.
	GetHostFunc func() string

	// GetNamespaceFunc mocks the GetNamespace method.
	GetNamespaceFunc func() string

	// GetOperatorVersionFunc mocks the GetOperatorVersion method.
	GetOperatorVersionFunc func() integreatlyv1alpha1.OperatorVersion

	// GetProductNameFunc mocks the GetProductName method.
	GetProductNameFunc func() integreatlyv1alpha1.ProductName

	// GetProductVersionFunc mocks the GetProductVersion method.
	GetProductVersionFunc func() integreatlyv1alpha1.ProductVersion

	// GetWatchableCRDsFunc mocks the GetWatchableCRDs method.
	GetWatchableCRDsFunc func() []runtime.Object

	// ReadFunc mocks the Read method.
	ReadFunc func() ProductConfig

	// calls tracks calls to the methods.
	calls struct {
		// GetHost holds details about calls to the GetHost method.
		GetHost []struct {
		}
		// GetNamespace holds details about calls to the GetNamespace method.
		GetNamespace []struct {
		}
		// GetOperatorVersion holds details about calls to the GetOperatorVersion method.
		GetOperatorVersion []struct {
		}
		// GetProductName holds details about calls to the GetProductName method.
		GetProductName []struct {
		}
		// GetProductVersion holds details about calls to the GetProductVersion method.
		GetProductVersion []struct {
		}
		// GetWatchableCRDs holds details about calls to the GetWatchableCRDs method.
		GetWatchableCRDs []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
		}
	}
	lockGetHost            sync.RWMutex
	lockGetNamespace       sync.RWMutex
	lockGetOperatorVersion sync.RWMutex
	lockGetProductName     sync.RWMutex
	lockGetProductVersion  sync.RWMutex
	lockGetWatchableCRDs   sync.RWMutex
	lockRead               sync.RWMutex
}

// GetHost calls GetHostFunc.
func (mock *ConfigReadableMock) GetHost() string {
	if mock.GetHostFunc == nil {
		panic("ConfigReadableMock.GetHostFunc: method is nil but ConfigReadable.GetHost was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetHost.Lock()
	mock.calls.GetHost = append(mock.calls.GetHost, callInfo)
	mock.lockGetHost.Unlock()
	return mock.GetHostFunc()
}

// GetHostCalls gets all the calls that were made to GetHost.
// Check the length with:
//
//	len(mockedConfigReadable.GetHostCalls())
func (mock *ConfigReadableMock) GetHostCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetHost.RLock()
	calls = mock.calls.GetHost
	mock.lockGetHost.RUnlock()
	return calls
}

// GetNamespace calls GetNamespaceFunc.
func (mock *ConfigReadableMock) GetNamespace() string {
	if mock.GetNamespaceFunc == nil {
		panic("ConfigReadableMock.GetNamespaceFunc: method is nil but ConfigReadable.GetNamespace was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetNamespace.Lock()
	mock.calls.GetNamespace = append(mock.calls.GetNamespace, callInfo)
	mock.lockGetNamespace.Unlock()
	return mock.GetNamespaceFunc()
}

// GetNamespaceCalls gets all the calls that were made to GetNamespace.
// Check the length with:
//
//	len(mockedConfigReadable.GetNamespaceCalls())
func (mock *ConfigReadableMock) GetNamespaceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetNamespace.RLock()
	calls = mock.calls.GetNamespace
	mock.lockGetNamespace.RUnlock()
	return calls
}

// GetOperatorVersion calls GetOperatorVersionFunc.
func (mock *ConfigReadableMock) GetOperatorVersion() integreatlyv1alpha1.OperatorVersion {
	if mock.GetOperatorVersionFunc == nil {
		panic("ConfigReadableMock.GetOperatorVersionFunc: method is nil but ConfigReadable.GetOperatorVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOperatorVersion.Lock()
	mock.calls.GetOperatorVersion = append(mock.calls.GetOperatorVersion, callInfo)
	mock.lockGetOperatorVersion.Unlock()
	return mock.GetOperatorVersionFunc()
}

// GetOperatorVersionCalls gets all the calls that were made to GetOperatorVersion.
// Check the length with:
//
//	len(mockedConfigReadable.GetOperatorVersionCalls())
func (mock *ConfigReadableMock) GetOperatorVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOperatorVersion.RLock()
	calls = mock.calls.GetOperatorVersion
	mock.lockGetOperatorVersion.RUnlock()
	return calls
}

// GetProductName calls GetProductNameFunc.
func (mock *ConfigReadableMock) GetProductName() integreatlyv1alpha1.ProductName {
	if mock.GetProductNameFunc == nil {
		panic("ConfigReadableMock.GetProductNameFunc: method is nil but ConfigReadable.GetProductName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetProductName.Lock()
	mock.calls.GetProductName = append(mock.calls.GetProductName, callInfo)
	mock.lockGetProductName.Unlock()
	return mock.GetProductNameFunc()
}

// GetProductNameCalls gets all the calls that were made to GetProductName.
// Check the length with:
//
//	len(mockedConfigReadable.GetProductNameCalls())
func (mock *ConfigReadableMock) GetProductNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetProductName.RLock()
	calls = mock.calls.GetProductName
	mock.lockGetProductName.RUnlock()
	return calls
}

// GetProductVersion calls GetProductVersionFunc.
func (mock *ConfigReadableMock) GetProductVersion() integreatlyv1alpha1.ProductVersion {
	if mock.GetProductVersionFunc == nil {
		panic("ConfigReadableMock.GetProductVersionFunc: method is nil but ConfigReadable.GetProductVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetProductVersion.Lock()
	mock.calls.GetProductVersion = append(mock.calls.GetProductVersion, callInfo)
	mock.lockGetProductVersion.Unlock()
	return mock.GetProductVersionFunc()
}

// GetProductVersionCalls gets all the calls that were made to GetProductVersion.
// Check the length with:
//
//	len(mockedConfigReadable.GetProductVersionCalls())
func (mock *ConfigReadableMock) GetProductVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetProductVersion.RLock()
	calls = mock.calls.GetProductVersion
	mock.lockGetProductVersion.RUnlock()
	return calls
}

// GetWatchableCRDs calls GetWatchableCRDsFunc.
func (mock *ConfigReadableMock) GetWatchableCRDs() []runtime.Object {
	if mock.GetWatchableCRDsFunc == nil {
		panic("ConfigReadableMock.GetWatchableCRDsFunc: method is nil but ConfigReadable.GetWatchableCRDs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWatchableCRDs.Lock()
	mock.calls.GetWatchableCRDs = append(mock.calls.GetWatchableCRDs, callInfo)
	mock.lockGetWatchableCRDs.Unlock()
	return mock.GetWatchableCRDsFunc()
}

// GetWatchableCRDsCalls gets all the calls that were made to GetWatchableCRDs.
// Check the length with:
//
//	len(mockedConfigReadable.GetWatchableCRDsCalls())
func (mock *ConfigReadableMock) GetWatchableCRDsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWatchableCRDs.RLock()
	calls = mock.calls.GetWatchableCRDs
	mock.lockGetWatchableCRDs.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *ConfigReadableMock) Read() ProductConfig {
	if mock.ReadFunc == nil {
		panic("ConfigReadableMock.ReadFunc: method is nil but ConfigReadable.Read was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedConfigReadable.ReadCalls())
func (mock *ConfigReadableMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}
