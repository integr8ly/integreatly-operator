// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	integreatlyv1alpha1 "github.com/integr8ly/integreatly-operator/apis/v1alpha1"
	"sync"
)

// Ensure, that ConfigReadWriterMock does implement ConfigReadWriter.
// If this is not the case, regenerate this file with moq.
var _ ConfigReadWriter = &ConfigReadWriterMock{}

// ConfigReadWriterMock is a mock implementation of ConfigReadWriter.
//
// 	func TestSomethingThatUsesConfigReadWriter(t *testing.T) {
//
// 		// make and configure a mocked ConfigReadWriter
// 		mockedConfigReadWriter := &ConfigReadWriterMock{
// 			GetBackupsSecretNameFunc: func() string {
// 				panic("mock out the GetBackupsSecretName method")
// 			},
// 			GetGHOauthClientsSecretNameFunc: func() string {
// 				panic("mock out the GetGHOauthClientsSecretName method")
// 			},
// 			GetOauthClientsSecretNameFunc: func() string {
// 				panic("mock out the GetOauthClientsSecretName method")
// 			},
// 			GetOperatorNamespaceFunc: func() string {
// 				panic("mock out the GetOperatorNamespace method")
// 			},
// 			ReadAMQOnlineFunc: func() (*AMQOnline, error) {
// 				panic("mock out the ReadAMQOnline method")
// 			},
// 			ReadAMQStreamsFunc: func() (*AMQStreams, error) {
// 				panic("mock out the ReadAMQStreams method")
// 			},
// 			ReadApicurioRegistryFunc: func() (*ApicurioRegistry, error) {
// 				panic("mock out the ReadApicurioRegistry method")
// 			},
// 			ReadApicuritoFunc: func() (*Apicurito, error) {
// 				panic("mock out the ReadApicurito method")
// 			},
// 			ReadCloudResourcesFunc: func() (*CloudResources, error) {
// 				panic("mock out the ReadCloudResources method")
// 			},
// 			ReadCodeReadyFunc: func() (*CodeReady, error) {
// 				panic("mock out the ReadCodeReady method")
// 			},
// 			ReadDataSyncFunc: func() (*DataSync, error) {
// 				panic("mock out the ReadDataSync method")
// 			},
// 			ReadFuseFunc: func() (*Fuse, error) {
// 				panic("mock out the ReadFuse method")
// 			},
// 			ReadFuseOnOpenshiftFunc: func() (*FuseOnOpenshift, error) {
// 				panic("mock out the ReadFuseOnOpenshift method")
// 			},
// 			ReadGrafanaFunc: func() (*Grafana, error) {
// 				panic("mock out the ReadGrafana method")
// 			},
// 			ReadMarin3rFunc: func() (*Marin3r, error) {
// 				panic("mock out the ReadMarin3r method")
// 			},
// 			ReadMonitoringFunc: func() (*Monitoring, error) {
// 				panic("mock out the ReadMonitoring method")
// 			},
// 			ReadMonitoringSpecFunc: func() (*MonitoringSpec, error) {
// 				panic("mock out the ReadMonitoringSpec method")
// 			},
// 			ReadObservabilityFunc: func() (*Observability, error) {
// 				panic("mock out the ReadObservability method")
// 			},
// 			ReadProductFunc: func(product integreatlyv1alpha1.ProductName) (ConfigReadable, error) {
// 				panic("mock out the ReadProduct method")
// 			},
// 			ReadRHSSOFunc: func() (*RHSSO, error) {
// 				panic("mock out the ReadRHSSO method")
// 			},
// 			ReadRHSSOUserFunc: func() (*RHSSOUser, error) {
// 				panic("mock out the ReadRHSSOUser method")
// 			},
// 			ReadSolutionExplorerFunc: func() (*SolutionExplorer, error) {
// 				panic("mock out the ReadSolutionExplorer method")
// 			},
// 			ReadThreeScaleFunc: func() (*ThreeScale, error) {
// 				panic("mock out the ReadThreeScale method")
// 			},
// 			ReadUpsFunc: func() (*Ups, error) {
// 				panic("mock out the ReadUps method")
// 			},
// 			WriteConfigFunc: func(config ConfigReadable) error {
// 				panic("mock out the WriteConfig method")
// 			},
// 			readConfigForProductFunc: func(product integreatlyv1alpha1.ProductName) (ProductConfig, error) {
// 				panic("mock out the readConfigForProduct method")
// 			},
// 		}
//
// 		// use mockedConfigReadWriter in code that requires ConfigReadWriter
// 		// and then make assertions.
//
// 	}
type ConfigReadWriterMock struct {
	// GetBackupsSecretNameFunc mocks the GetBackupsSecretName method.
	GetBackupsSecretNameFunc func() string

	// GetGHOauthClientsSecretNameFunc mocks the GetGHOauthClientsSecretName method.
	GetGHOauthClientsSecretNameFunc func() string

	// GetOauthClientsSecretNameFunc mocks the GetOauthClientsSecretName method.
	GetOauthClientsSecretNameFunc func() string

	// GetOperatorNamespaceFunc mocks the GetOperatorNamespace method.
	GetOperatorNamespaceFunc func() string

	// ReadAMQOnlineFunc mocks the ReadAMQOnline method.
	ReadAMQOnlineFunc func() (*AMQOnline, error)

	// ReadAMQStreamsFunc mocks the ReadAMQStreams method.
	ReadAMQStreamsFunc func() (*AMQStreams, error)

	// ReadApicurioRegistryFunc mocks the ReadApicurioRegistry method.
	ReadApicurioRegistryFunc func() (*ApicurioRegistry, error)

	// ReadApicuritoFunc mocks the ReadApicurito method.
	ReadApicuritoFunc func() (*Apicurito, error)

	// ReadCloudResourcesFunc mocks the ReadCloudResources method.
	ReadCloudResourcesFunc func() (*CloudResources, error)

	// ReadCodeReadyFunc mocks the ReadCodeReady method.
	ReadCodeReadyFunc func() (*CodeReady, error)

	// ReadDataSyncFunc mocks the ReadDataSync method.
	ReadDataSyncFunc func() (*DataSync, error)

	// ReadFuseFunc mocks the ReadFuse method.
	ReadFuseFunc func() (*Fuse, error)

	// ReadFuseOnOpenshiftFunc mocks the ReadFuseOnOpenshift method.
	ReadFuseOnOpenshiftFunc func() (*FuseOnOpenshift, error)

	// ReadGrafanaFunc mocks the ReadGrafana method.
	ReadGrafanaFunc func() (*Grafana, error)

	// ReadMarin3rFunc mocks the ReadMarin3r method.
	ReadMarin3rFunc func() (*Marin3r, error)

	// ReadMonitoringFunc mocks the ReadMonitoring method.
	ReadMonitoringFunc func() (*Monitoring, error)

	// ReadMonitoringSpecFunc mocks the ReadMonitoringSpec method.
	ReadMonitoringSpecFunc func() (*MonitoringSpec, error)

	// ReadObservabilityFunc mocks the ReadObservability method.
	ReadObservabilityFunc func() (*Observability, error)

	// ReadProductFunc mocks the ReadProduct method.
	ReadProductFunc func(product integreatlyv1alpha1.ProductName) (ConfigReadable, error)

	// ReadRHSSOFunc mocks the ReadRHSSO method.
	ReadRHSSOFunc func() (*RHSSO, error)

	// ReadRHSSOUserFunc mocks the ReadRHSSOUser method.
	ReadRHSSOUserFunc func() (*RHSSOUser, error)

	// ReadSolutionExplorerFunc mocks the ReadSolutionExplorer method.
	ReadSolutionExplorerFunc func() (*SolutionExplorer, error)

	// ReadThreeScaleFunc mocks the ReadThreeScale method.
	ReadThreeScaleFunc func() (*ThreeScale, error)

	// ReadUpsFunc mocks the ReadUps method.
	ReadUpsFunc func() (*Ups, error)

	// WriteConfigFunc mocks the WriteConfig method.
	WriteConfigFunc func(config ConfigReadable) error

	// readConfigForProductFunc mocks the readConfigForProduct method.
	readConfigForProductFunc func(product integreatlyv1alpha1.ProductName) (ProductConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBackupsSecretName holds details about calls to the GetBackupsSecretName method.
		GetBackupsSecretName []struct {
		}
		// GetGHOauthClientsSecretName holds details about calls to the GetGHOauthClientsSecretName method.
		GetGHOauthClientsSecretName []struct {
		}
		// GetOauthClientsSecretName holds details about calls to the GetOauthClientsSecretName method.
		GetOauthClientsSecretName []struct {
		}
		// GetOperatorNamespace holds details about calls to the GetOperatorNamespace method.
		GetOperatorNamespace []struct {
		}
		// ReadAMQOnline holds details about calls to the ReadAMQOnline method.
		ReadAMQOnline []struct {
		}
		// ReadAMQStreams holds details about calls to the ReadAMQStreams method.
		ReadAMQStreams []struct {
		}
		// ReadApicurioRegistry holds details about calls to the ReadApicurioRegistry method.
		ReadApicurioRegistry []struct {
		}
		// ReadApicurito holds details about calls to the ReadApicurito method.
		ReadApicurito []struct {
		}
		// ReadCloudResources holds details about calls to the ReadCloudResources method.
		ReadCloudResources []struct {
		}
		// ReadCodeReady holds details about calls to the ReadCodeReady method.
		ReadCodeReady []struct {
		}
		// ReadDataSync holds details about calls to the ReadDataSync method.
		ReadDataSync []struct {
		}
		// ReadFuse holds details about calls to the ReadFuse method.
		ReadFuse []struct {
		}
		// ReadFuseOnOpenshift holds details about calls to the ReadFuseOnOpenshift method.
		ReadFuseOnOpenshift []struct {
		}
		// ReadGrafana holds details about calls to the ReadGrafana method.
		ReadGrafana []struct {
		}
		// ReadMarin3r holds details about calls to the ReadMarin3r method.
		ReadMarin3r []struct {
		}
		// ReadMonitoring holds details about calls to the ReadMonitoring method.
		ReadMonitoring []struct {
		}
		// ReadMonitoringSpec holds details about calls to the ReadMonitoringSpec method.
		ReadMonitoringSpec []struct {
		}
		// ReadObservability holds details about calls to the ReadObservability method.
		ReadObservability []struct {
		}
		// ReadProduct holds details about calls to the ReadProduct method.
		ReadProduct []struct {
			// Product is the product argument value.
			Product integreatlyv1alpha1.ProductName
		}
		// ReadRHSSO holds details about calls to the ReadRHSSO method.
		ReadRHSSO []struct {
		}
		// ReadRHSSOUser holds details about calls to the ReadRHSSOUser method.
		ReadRHSSOUser []struct {
		}
		// ReadSolutionExplorer holds details about calls to the ReadSolutionExplorer method.
		ReadSolutionExplorer []struct {
		}
		// ReadThreeScale holds details about calls to the ReadThreeScale method.
		ReadThreeScale []struct {
		}
		// ReadUps holds details about calls to the ReadUps method.
		ReadUps []struct {
		}
		// WriteConfig holds details about calls to the WriteConfig method.
		WriteConfig []struct {
			// Config is the config argument value.
			Config ConfigReadable
		}
		// readConfigForProduct holds details about calls to the readConfigForProduct method.
		readConfigForProduct []struct {
			// Product is the product argument value.
			Product integreatlyv1alpha1.ProductName
		}
	}
	lockGetBackupsSecretName        sync.RWMutex
	lockGetGHOauthClientsSecretName sync.RWMutex
	lockGetOauthClientsSecretName   sync.RWMutex
	lockGetOperatorNamespace        sync.RWMutex
	lockReadAMQOnline               sync.RWMutex
	lockReadAMQStreams              sync.RWMutex
	lockReadApicurioRegistry        sync.RWMutex
	lockReadApicurito               sync.RWMutex
	lockReadCloudResources          sync.RWMutex
	lockReadCodeReady               sync.RWMutex
	lockReadDataSync                sync.RWMutex
	lockReadFuse                    sync.RWMutex
	lockReadFuseOnOpenshift         sync.RWMutex
	lockReadGrafana                 sync.RWMutex
	lockReadMarin3r                 sync.RWMutex
	lockReadMonitoring              sync.RWMutex
	lockReadMonitoringSpec          sync.RWMutex
	lockReadObservability           sync.RWMutex
	lockReadProduct                 sync.RWMutex
	lockReadRHSSO                   sync.RWMutex
	lockReadRHSSOUser               sync.RWMutex
	lockReadSolutionExplorer        sync.RWMutex
	lockReadThreeScale              sync.RWMutex
	lockReadUps                     sync.RWMutex
	lockWriteConfig                 sync.RWMutex
	lockreadConfigForProduct        sync.RWMutex
}

// GetBackupsSecretName calls GetBackupsSecretNameFunc.
func (mock *ConfigReadWriterMock) GetBackupsSecretName() string {
	if mock.GetBackupsSecretNameFunc == nil {
		panic("ConfigReadWriterMock.GetBackupsSecretNameFunc: method is nil but ConfigReadWriter.GetBackupsSecretName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBackupsSecretName.Lock()
	mock.calls.GetBackupsSecretName = append(mock.calls.GetBackupsSecretName, callInfo)
	mock.lockGetBackupsSecretName.Unlock()
	return mock.GetBackupsSecretNameFunc()
}

// GetBackupsSecretNameCalls gets all the calls that were made to GetBackupsSecretName.
// Check the length with:
//     len(mockedConfigReadWriter.GetBackupsSecretNameCalls())
func (mock *ConfigReadWriterMock) GetBackupsSecretNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBackupsSecretName.RLock()
	calls = mock.calls.GetBackupsSecretName
	mock.lockGetBackupsSecretName.RUnlock()
	return calls
}

// GetGHOauthClientsSecretName calls GetGHOauthClientsSecretNameFunc.
func (mock *ConfigReadWriterMock) GetGHOauthClientsSecretName() string {
	if mock.GetGHOauthClientsSecretNameFunc == nil {
		panic("ConfigReadWriterMock.GetGHOauthClientsSecretNameFunc: method is nil but ConfigReadWriter.GetGHOauthClientsSecretName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGHOauthClientsSecretName.Lock()
	mock.calls.GetGHOauthClientsSecretName = append(mock.calls.GetGHOauthClientsSecretName, callInfo)
	mock.lockGetGHOauthClientsSecretName.Unlock()
	return mock.GetGHOauthClientsSecretNameFunc()
}

// GetGHOauthClientsSecretNameCalls gets all the calls that were made to GetGHOauthClientsSecretName.
// Check the length with:
//     len(mockedConfigReadWriter.GetGHOauthClientsSecretNameCalls())
func (mock *ConfigReadWriterMock) GetGHOauthClientsSecretNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGHOauthClientsSecretName.RLock()
	calls = mock.calls.GetGHOauthClientsSecretName
	mock.lockGetGHOauthClientsSecretName.RUnlock()
	return calls
}

// GetOauthClientsSecretName calls GetOauthClientsSecretNameFunc.
func (mock *ConfigReadWriterMock) GetOauthClientsSecretName() string {
	if mock.GetOauthClientsSecretNameFunc == nil {
		panic("ConfigReadWriterMock.GetOauthClientsSecretNameFunc: method is nil but ConfigReadWriter.GetOauthClientsSecretName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOauthClientsSecretName.Lock()
	mock.calls.GetOauthClientsSecretName = append(mock.calls.GetOauthClientsSecretName, callInfo)
	mock.lockGetOauthClientsSecretName.Unlock()
	return mock.GetOauthClientsSecretNameFunc()
}

// GetOauthClientsSecretNameCalls gets all the calls that were made to GetOauthClientsSecretName.
// Check the length with:
//     len(mockedConfigReadWriter.GetOauthClientsSecretNameCalls())
func (mock *ConfigReadWriterMock) GetOauthClientsSecretNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOauthClientsSecretName.RLock()
	calls = mock.calls.GetOauthClientsSecretName
	mock.lockGetOauthClientsSecretName.RUnlock()
	return calls
}

// GetOperatorNamespace calls GetOperatorNamespaceFunc.
func (mock *ConfigReadWriterMock) GetOperatorNamespace() string {
	if mock.GetOperatorNamespaceFunc == nil {
		panic("ConfigReadWriterMock.GetOperatorNamespaceFunc: method is nil but ConfigReadWriter.GetOperatorNamespace was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOperatorNamespace.Lock()
	mock.calls.GetOperatorNamespace = append(mock.calls.GetOperatorNamespace, callInfo)
	mock.lockGetOperatorNamespace.Unlock()
	return mock.GetOperatorNamespaceFunc()
}

// GetOperatorNamespaceCalls gets all the calls that were made to GetOperatorNamespace.
// Check the length with:
//     len(mockedConfigReadWriter.GetOperatorNamespaceCalls())
func (mock *ConfigReadWriterMock) GetOperatorNamespaceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOperatorNamespace.RLock()
	calls = mock.calls.GetOperatorNamespace
	mock.lockGetOperatorNamespace.RUnlock()
	return calls
}

// ReadAMQOnline calls ReadAMQOnlineFunc.
func (mock *ConfigReadWriterMock) ReadAMQOnline() (*AMQOnline, error) {
	if mock.ReadAMQOnlineFunc == nil {
		panic("ConfigReadWriterMock.ReadAMQOnlineFunc: method is nil but ConfigReadWriter.ReadAMQOnline was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadAMQOnline.Lock()
	mock.calls.ReadAMQOnline = append(mock.calls.ReadAMQOnline, callInfo)
	mock.lockReadAMQOnline.Unlock()
	return mock.ReadAMQOnlineFunc()
}

// ReadAMQOnlineCalls gets all the calls that were made to ReadAMQOnline.
// Check the length with:
//     len(mockedConfigReadWriter.ReadAMQOnlineCalls())
func (mock *ConfigReadWriterMock) ReadAMQOnlineCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadAMQOnline.RLock()
	calls = mock.calls.ReadAMQOnline
	mock.lockReadAMQOnline.RUnlock()
	return calls
}

// ReadAMQStreams calls ReadAMQStreamsFunc.
func (mock *ConfigReadWriterMock) ReadAMQStreams() (*AMQStreams, error) {
	if mock.ReadAMQStreamsFunc == nil {
		panic("ConfigReadWriterMock.ReadAMQStreamsFunc: method is nil but ConfigReadWriter.ReadAMQStreams was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadAMQStreams.Lock()
	mock.calls.ReadAMQStreams = append(mock.calls.ReadAMQStreams, callInfo)
	mock.lockReadAMQStreams.Unlock()
	return mock.ReadAMQStreamsFunc()
}

// ReadAMQStreamsCalls gets all the calls that were made to ReadAMQStreams.
// Check the length with:
//     len(mockedConfigReadWriter.ReadAMQStreamsCalls())
func (mock *ConfigReadWriterMock) ReadAMQStreamsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadAMQStreams.RLock()
	calls = mock.calls.ReadAMQStreams
	mock.lockReadAMQStreams.RUnlock()
	return calls
}

// ReadApicurioRegistry calls ReadApicurioRegistryFunc.
func (mock *ConfigReadWriterMock) ReadApicurioRegistry() (*ApicurioRegistry, error) {
	if mock.ReadApicurioRegistryFunc == nil {
		panic("ConfigReadWriterMock.ReadApicurioRegistryFunc: method is nil but ConfigReadWriter.ReadApicurioRegistry was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadApicurioRegistry.Lock()
	mock.calls.ReadApicurioRegistry = append(mock.calls.ReadApicurioRegistry, callInfo)
	mock.lockReadApicurioRegistry.Unlock()
	return mock.ReadApicurioRegistryFunc()
}

// ReadApicurioRegistryCalls gets all the calls that were made to ReadApicurioRegistry.
// Check the length with:
//     len(mockedConfigReadWriter.ReadApicurioRegistryCalls())
func (mock *ConfigReadWriterMock) ReadApicurioRegistryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadApicurioRegistry.RLock()
	calls = mock.calls.ReadApicurioRegistry
	mock.lockReadApicurioRegistry.RUnlock()
	return calls
}

// ReadApicurito calls ReadApicuritoFunc.
func (mock *ConfigReadWriterMock) ReadApicurito() (*Apicurito, error) {
	if mock.ReadApicuritoFunc == nil {
		panic("ConfigReadWriterMock.ReadApicuritoFunc: method is nil but ConfigReadWriter.ReadApicurito was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadApicurito.Lock()
	mock.calls.ReadApicurito = append(mock.calls.ReadApicurito, callInfo)
	mock.lockReadApicurito.Unlock()
	return mock.ReadApicuritoFunc()
}

// ReadApicuritoCalls gets all the calls that were made to ReadApicurito.
// Check the length with:
//     len(mockedConfigReadWriter.ReadApicuritoCalls())
func (mock *ConfigReadWriterMock) ReadApicuritoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadApicurito.RLock()
	calls = mock.calls.ReadApicurito
	mock.lockReadApicurito.RUnlock()
	return calls
}

// ReadCloudResources calls ReadCloudResourcesFunc.
func (mock *ConfigReadWriterMock) ReadCloudResources() (*CloudResources, error) {
	if mock.ReadCloudResourcesFunc == nil {
		panic("ConfigReadWriterMock.ReadCloudResourcesFunc: method is nil but ConfigReadWriter.ReadCloudResources was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadCloudResources.Lock()
	mock.calls.ReadCloudResources = append(mock.calls.ReadCloudResources, callInfo)
	mock.lockReadCloudResources.Unlock()
	return mock.ReadCloudResourcesFunc()
}

// ReadCloudResourcesCalls gets all the calls that were made to ReadCloudResources.
// Check the length with:
//     len(mockedConfigReadWriter.ReadCloudResourcesCalls())
func (mock *ConfigReadWriterMock) ReadCloudResourcesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadCloudResources.RLock()
	calls = mock.calls.ReadCloudResources
	mock.lockReadCloudResources.RUnlock()
	return calls
}

// ReadCodeReady calls ReadCodeReadyFunc.
func (mock *ConfigReadWriterMock) ReadCodeReady() (*CodeReady, error) {
	if mock.ReadCodeReadyFunc == nil {
		panic("ConfigReadWriterMock.ReadCodeReadyFunc: method is nil but ConfigReadWriter.ReadCodeReady was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadCodeReady.Lock()
	mock.calls.ReadCodeReady = append(mock.calls.ReadCodeReady, callInfo)
	mock.lockReadCodeReady.Unlock()
	return mock.ReadCodeReadyFunc()
}

// ReadCodeReadyCalls gets all the calls that were made to ReadCodeReady.
// Check the length with:
//     len(mockedConfigReadWriter.ReadCodeReadyCalls())
func (mock *ConfigReadWriterMock) ReadCodeReadyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadCodeReady.RLock()
	calls = mock.calls.ReadCodeReady
	mock.lockReadCodeReady.RUnlock()
	return calls
}

// ReadDataSync calls ReadDataSyncFunc.
func (mock *ConfigReadWriterMock) ReadDataSync() (*DataSync, error) {
	if mock.ReadDataSyncFunc == nil {
		panic("ConfigReadWriterMock.ReadDataSyncFunc: method is nil but ConfigReadWriter.ReadDataSync was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadDataSync.Lock()
	mock.calls.ReadDataSync = append(mock.calls.ReadDataSync, callInfo)
	mock.lockReadDataSync.Unlock()
	return mock.ReadDataSyncFunc()
}

// ReadDataSyncCalls gets all the calls that were made to ReadDataSync.
// Check the length with:
//     len(mockedConfigReadWriter.ReadDataSyncCalls())
func (mock *ConfigReadWriterMock) ReadDataSyncCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadDataSync.RLock()
	calls = mock.calls.ReadDataSync
	mock.lockReadDataSync.RUnlock()
	return calls
}

// ReadFuse calls ReadFuseFunc.
func (mock *ConfigReadWriterMock) ReadFuse() (*Fuse, error) {
	if mock.ReadFuseFunc == nil {
		panic("ConfigReadWriterMock.ReadFuseFunc: method is nil but ConfigReadWriter.ReadFuse was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadFuse.Lock()
	mock.calls.ReadFuse = append(mock.calls.ReadFuse, callInfo)
	mock.lockReadFuse.Unlock()
	return mock.ReadFuseFunc()
}

// ReadFuseCalls gets all the calls that were made to ReadFuse.
// Check the length with:
//     len(mockedConfigReadWriter.ReadFuseCalls())
func (mock *ConfigReadWriterMock) ReadFuseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadFuse.RLock()
	calls = mock.calls.ReadFuse
	mock.lockReadFuse.RUnlock()
	return calls
}

// ReadFuseOnOpenshift calls ReadFuseOnOpenshiftFunc.
func (mock *ConfigReadWriterMock) ReadFuseOnOpenshift() (*FuseOnOpenshift, error) {
	if mock.ReadFuseOnOpenshiftFunc == nil {
		panic("ConfigReadWriterMock.ReadFuseOnOpenshiftFunc: method is nil but ConfigReadWriter.ReadFuseOnOpenshift was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadFuseOnOpenshift.Lock()
	mock.calls.ReadFuseOnOpenshift = append(mock.calls.ReadFuseOnOpenshift, callInfo)
	mock.lockReadFuseOnOpenshift.Unlock()
	return mock.ReadFuseOnOpenshiftFunc()
}

// ReadFuseOnOpenshiftCalls gets all the calls that were made to ReadFuseOnOpenshift.
// Check the length with:
//     len(mockedConfigReadWriter.ReadFuseOnOpenshiftCalls())
func (mock *ConfigReadWriterMock) ReadFuseOnOpenshiftCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadFuseOnOpenshift.RLock()
	calls = mock.calls.ReadFuseOnOpenshift
	mock.lockReadFuseOnOpenshift.RUnlock()
	return calls
}

// ReadGrafana calls ReadGrafanaFunc.
func (mock *ConfigReadWriterMock) ReadGrafana() (*Grafana, error) {
	if mock.ReadGrafanaFunc == nil {
		panic("ConfigReadWriterMock.ReadGrafanaFunc: method is nil but ConfigReadWriter.ReadGrafana was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadGrafana.Lock()
	mock.calls.ReadGrafana = append(mock.calls.ReadGrafana, callInfo)
	mock.lockReadGrafana.Unlock()
	return mock.ReadGrafanaFunc()
}

// ReadGrafanaCalls gets all the calls that were made to ReadGrafana.
// Check the length with:
//     len(mockedConfigReadWriter.ReadGrafanaCalls())
func (mock *ConfigReadWriterMock) ReadGrafanaCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadGrafana.RLock()
	calls = mock.calls.ReadGrafana
	mock.lockReadGrafana.RUnlock()
	return calls
}

// ReadMarin3r calls ReadMarin3rFunc.
func (mock *ConfigReadWriterMock) ReadMarin3r() (*Marin3r, error) {
	if mock.ReadMarin3rFunc == nil {
		panic("ConfigReadWriterMock.ReadMarin3rFunc: method is nil but ConfigReadWriter.ReadMarin3r was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadMarin3r.Lock()
	mock.calls.ReadMarin3r = append(mock.calls.ReadMarin3r, callInfo)
	mock.lockReadMarin3r.Unlock()
	return mock.ReadMarin3rFunc()
}

// ReadMarin3rCalls gets all the calls that were made to ReadMarin3r.
// Check the length with:
//     len(mockedConfigReadWriter.ReadMarin3rCalls())
func (mock *ConfigReadWriterMock) ReadMarin3rCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadMarin3r.RLock()
	calls = mock.calls.ReadMarin3r
	mock.lockReadMarin3r.RUnlock()
	return calls
}

// ReadMonitoring calls ReadMonitoringFunc.
func (mock *ConfigReadWriterMock) ReadMonitoring() (*Monitoring, error) {
	if mock.ReadMonitoringFunc == nil {
		panic("ConfigReadWriterMock.ReadMonitoringFunc: method is nil but ConfigReadWriter.ReadMonitoring was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadMonitoring.Lock()
	mock.calls.ReadMonitoring = append(mock.calls.ReadMonitoring, callInfo)
	mock.lockReadMonitoring.Unlock()
	return mock.ReadMonitoringFunc()
}

// ReadMonitoringCalls gets all the calls that were made to ReadMonitoring.
// Check the length with:
//     len(mockedConfigReadWriter.ReadMonitoringCalls())
func (mock *ConfigReadWriterMock) ReadMonitoringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadMonitoring.RLock()
	calls = mock.calls.ReadMonitoring
	mock.lockReadMonitoring.RUnlock()
	return calls
}

// ReadMonitoringSpec calls ReadMonitoringSpecFunc.
func (mock *ConfigReadWriterMock) ReadMonitoringSpec() (*MonitoringSpec, error) {
	if mock.ReadMonitoringSpecFunc == nil {
		panic("ConfigReadWriterMock.ReadMonitoringSpecFunc: method is nil but ConfigReadWriter.ReadMonitoringSpec was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadMonitoringSpec.Lock()
	mock.calls.ReadMonitoringSpec = append(mock.calls.ReadMonitoringSpec, callInfo)
	mock.lockReadMonitoringSpec.Unlock()
	return mock.ReadMonitoringSpecFunc()
}

// ReadMonitoringSpecCalls gets all the calls that were made to ReadMonitoringSpec.
// Check the length with:
//     len(mockedConfigReadWriter.ReadMonitoringSpecCalls())
func (mock *ConfigReadWriterMock) ReadMonitoringSpecCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadMonitoringSpec.RLock()
	calls = mock.calls.ReadMonitoringSpec
	mock.lockReadMonitoringSpec.RUnlock()
	return calls
}

// ReadObservability calls ReadObservabilityFunc.
func (mock *ConfigReadWriterMock) ReadObservability() (*Observability, error) {
	if mock.ReadObservabilityFunc == nil {
		panic("ConfigReadWriterMock.ReadObservabilityFunc: method is nil but ConfigReadWriter.ReadObservability was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadObservability.Lock()
	mock.calls.ReadObservability = append(mock.calls.ReadObservability, callInfo)
	mock.lockReadObservability.Unlock()
	return mock.ReadObservabilityFunc()
}

// ReadObservabilityCalls gets all the calls that were made to ReadObservability.
// Check the length with:
//     len(mockedConfigReadWriter.ReadObservabilityCalls())
func (mock *ConfigReadWriterMock) ReadObservabilityCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadObservability.RLock()
	calls = mock.calls.ReadObservability
	mock.lockReadObservability.RUnlock()
	return calls
}

// ReadProduct calls ReadProductFunc.
func (mock *ConfigReadWriterMock) ReadProduct(product integreatlyv1alpha1.ProductName) (ConfigReadable, error) {
	if mock.ReadProductFunc == nil {
		panic("ConfigReadWriterMock.ReadProductFunc: method is nil but ConfigReadWriter.ReadProduct was just called")
	}
	callInfo := struct {
		Product integreatlyv1alpha1.ProductName
	}{
		Product: product,
	}
	mock.lockReadProduct.Lock()
	mock.calls.ReadProduct = append(mock.calls.ReadProduct, callInfo)
	mock.lockReadProduct.Unlock()
	return mock.ReadProductFunc(product)
}

// ReadProductCalls gets all the calls that were made to ReadProduct.
// Check the length with:
//     len(mockedConfigReadWriter.ReadProductCalls())
func (mock *ConfigReadWriterMock) ReadProductCalls() []struct {
	Product integreatlyv1alpha1.ProductName
} {
	var calls []struct {
		Product integreatlyv1alpha1.ProductName
	}
	mock.lockReadProduct.RLock()
	calls = mock.calls.ReadProduct
	mock.lockReadProduct.RUnlock()
	return calls
}

// ReadRHSSO calls ReadRHSSOFunc.
func (mock *ConfigReadWriterMock) ReadRHSSO() (*RHSSO, error) {
	if mock.ReadRHSSOFunc == nil {
		panic("ConfigReadWriterMock.ReadRHSSOFunc: method is nil but ConfigReadWriter.ReadRHSSO was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadRHSSO.Lock()
	mock.calls.ReadRHSSO = append(mock.calls.ReadRHSSO, callInfo)
	mock.lockReadRHSSO.Unlock()
	return mock.ReadRHSSOFunc()
}

// ReadRHSSOCalls gets all the calls that were made to ReadRHSSO.
// Check the length with:
//     len(mockedConfigReadWriter.ReadRHSSOCalls())
func (mock *ConfigReadWriterMock) ReadRHSSOCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadRHSSO.RLock()
	calls = mock.calls.ReadRHSSO
	mock.lockReadRHSSO.RUnlock()
	return calls
}

// ReadRHSSOUser calls ReadRHSSOUserFunc.
func (mock *ConfigReadWriterMock) ReadRHSSOUser() (*RHSSOUser, error) {
	if mock.ReadRHSSOUserFunc == nil {
		panic("ConfigReadWriterMock.ReadRHSSOUserFunc: method is nil but ConfigReadWriter.ReadRHSSOUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadRHSSOUser.Lock()
	mock.calls.ReadRHSSOUser = append(mock.calls.ReadRHSSOUser, callInfo)
	mock.lockReadRHSSOUser.Unlock()
	return mock.ReadRHSSOUserFunc()
}

// ReadRHSSOUserCalls gets all the calls that were made to ReadRHSSOUser.
// Check the length with:
//     len(mockedConfigReadWriter.ReadRHSSOUserCalls())
func (mock *ConfigReadWriterMock) ReadRHSSOUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadRHSSOUser.RLock()
	calls = mock.calls.ReadRHSSOUser
	mock.lockReadRHSSOUser.RUnlock()
	return calls
}

// ReadSolutionExplorer calls ReadSolutionExplorerFunc.
func (mock *ConfigReadWriterMock) ReadSolutionExplorer() (*SolutionExplorer, error) {
	if mock.ReadSolutionExplorerFunc == nil {
		panic("ConfigReadWriterMock.ReadSolutionExplorerFunc: method is nil but ConfigReadWriter.ReadSolutionExplorer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadSolutionExplorer.Lock()
	mock.calls.ReadSolutionExplorer = append(mock.calls.ReadSolutionExplorer, callInfo)
	mock.lockReadSolutionExplorer.Unlock()
	return mock.ReadSolutionExplorerFunc()
}

// ReadSolutionExplorerCalls gets all the calls that were made to ReadSolutionExplorer.
// Check the length with:
//     len(mockedConfigReadWriter.ReadSolutionExplorerCalls())
func (mock *ConfigReadWriterMock) ReadSolutionExplorerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadSolutionExplorer.RLock()
	calls = mock.calls.ReadSolutionExplorer
	mock.lockReadSolutionExplorer.RUnlock()
	return calls
}

// ReadThreeScale calls ReadThreeScaleFunc.
func (mock *ConfigReadWriterMock) ReadThreeScale() (*ThreeScale, error) {
	if mock.ReadThreeScaleFunc == nil {
		panic("ConfigReadWriterMock.ReadThreeScaleFunc: method is nil but ConfigReadWriter.ReadThreeScale was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadThreeScale.Lock()
	mock.calls.ReadThreeScale = append(mock.calls.ReadThreeScale, callInfo)
	mock.lockReadThreeScale.Unlock()
	return mock.ReadThreeScaleFunc()
}

// ReadThreeScaleCalls gets all the calls that were made to ReadThreeScale.
// Check the length with:
//     len(mockedConfigReadWriter.ReadThreeScaleCalls())
func (mock *ConfigReadWriterMock) ReadThreeScaleCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadThreeScale.RLock()
	calls = mock.calls.ReadThreeScale
	mock.lockReadThreeScale.RUnlock()
	return calls
}

// ReadUps calls ReadUpsFunc.
func (mock *ConfigReadWriterMock) ReadUps() (*Ups, error) {
	if mock.ReadUpsFunc == nil {
		panic("ConfigReadWriterMock.ReadUpsFunc: method is nil but ConfigReadWriter.ReadUps was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadUps.Lock()
	mock.calls.ReadUps = append(mock.calls.ReadUps, callInfo)
	mock.lockReadUps.Unlock()
	return mock.ReadUpsFunc()
}

// ReadUpsCalls gets all the calls that were made to ReadUps.
// Check the length with:
//     len(mockedConfigReadWriter.ReadUpsCalls())
func (mock *ConfigReadWriterMock) ReadUpsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadUps.RLock()
	calls = mock.calls.ReadUps
	mock.lockReadUps.RUnlock()
	return calls
}

// WriteConfig calls WriteConfigFunc.
func (mock *ConfigReadWriterMock) WriteConfig(config ConfigReadable) error {
	if mock.WriteConfigFunc == nil {
		panic("ConfigReadWriterMock.WriteConfigFunc: method is nil but ConfigReadWriter.WriteConfig was just called")
	}
	callInfo := struct {
		Config ConfigReadable
	}{
		Config: config,
	}
	mock.lockWriteConfig.Lock()
	mock.calls.WriteConfig = append(mock.calls.WriteConfig, callInfo)
	mock.lockWriteConfig.Unlock()
	return mock.WriteConfigFunc(config)
}

// WriteConfigCalls gets all the calls that were made to WriteConfig.
// Check the length with:
//     len(mockedConfigReadWriter.WriteConfigCalls())
func (mock *ConfigReadWriterMock) WriteConfigCalls() []struct {
	Config ConfigReadable
} {
	var calls []struct {
		Config ConfigReadable
	}
	mock.lockWriteConfig.RLock()
	calls = mock.calls.WriteConfig
	mock.lockWriteConfig.RUnlock()
	return calls
}

// readConfigForProduct calls readConfigForProductFunc.
func (mock *ConfigReadWriterMock) readConfigForProduct(product integreatlyv1alpha1.ProductName) (ProductConfig, error) {
	if mock.readConfigForProductFunc == nil {
		panic("ConfigReadWriterMock.readConfigForProductFunc: method is nil but ConfigReadWriter.readConfigForProduct was just called")
	}
	callInfo := struct {
		Product integreatlyv1alpha1.ProductName
	}{
		Product: product,
	}
	mock.lockreadConfigForProduct.Lock()
	mock.calls.readConfigForProduct = append(mock.calls.readConfigForProduct, callInfo)
	mock.lockreadConfigForProduct.Unlock()
	return mock.readConfigForProductFunc(product)
}

// readConfigForProductCalls gets all the calls that were made to readConfigForProduct.
// Check the length with:
//     len(mockedConfigReadWriter.readConfigForProductCalls())
func (mock *ConfigReadWriterMock) readConfigForProductCalls() []struct {
	Product integreatlyv1alpha1.ProductName
} {
	var calls []struct {
		Product integreatlyv1alpha1.ProductName
	}
	mock.lockreadConfigForProduct.RLock()
	calls = mock.calls.readConfigForProduct
	mock.lockreadConfigForProduct.RUnlock()
	return calls
}
