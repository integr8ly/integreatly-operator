// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package products

import (
	"context"
	"github.com/integr8ly/integreatly-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

var (
	lockInterfaceMockGetPreflightObject sync.RWMutex
	lockInterfaceMockReconcile          sync.RWMutex
	lockInterfaceMockVerifyVersion      sync.RWMutex
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked Interface
//         mockedInterface := &InterfaceMock{
//             GetPreflightObjectFunc: func(ns string) runtime.Object {
// 	               panic("mock out the GetPreflightObject method")
//             },
//             ReconcileFunc: func(ctx context.Context, installation *v1alpha1.RHMI, product *v1alpha1.RHMIProductStatus, serverClient client.Client) (v1alpha1.StatusPhase, error) {
// 	               panic("mock out the Reconcile method")
//             },
//             VerifyVersionFunc: func(installation *v1alpha1.RHMI) bool {
// 	               panic("mock out the VerifyVersion method")
//             },
//         }
//
//         // use mockedInterface in code that requires Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// GetPreflightObjectFunc mocks the GetPreflightObject method.
	GetPreflightObjectFunc func(ns string) runtime.Object

	// ReconcileFunc mocks the Reconcile method.
	ReconcileFunc func(ctx context.Context, installation *v1alpha1.RHMI, product *v1alpha1.RHMIProductStatus, serverClient client.Client) (v1alpha1.StatusPhase, error)

	// VerifyVersionFunc mocks the VerifyVersion method.
	VerifyVersionFunc func(installation *v1alpha1.RHMI) bool

	// calls tracks calls to the methods.
	calls struct {
		// GetPreflightObject holds details about calls to the GetPreflightObject method.
		GetPreflightObject []struct {
			// Ns is the ns argument value.
			Ns string
		}
		// Reconcile holds details about calls to the Reconcile method.
		Reconcile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Installation is the installation argument value.
			Installation *v1alpha1.RHMI
			// Product is the product argument value.
			Product *v1alpha1.RHMIProductStatus
			// ServerClient is the serverClient argument value.
			ServerClient client.Client
		}
		// VerifyVersion holds details about calls to the VerifyVersion method.
		VerifyVersion []struct {
			// Installation is the installation argument value.
			Installation *v1alpha1.RHMI
		}
	}
}

// GetPreflightObject calls GetPreflightObjectFunc.
func (mock *InterfaceMock) GetPreflightObject(ns string) runtime.Object {
	if mock.GetPreflightObjectFunc == nil {
		panic("InterfaceMock.GetPreflightObjectFunc: method is nil but Interface.GetPreflightObject was just called")
	}
	callInfo := struct {
		Ns string
	}{
		Ns: ns,
	}
	lockInterfaceMockGetPreflightObject.Lock()
	mock.calls.GetPreflightObject = append(mock.calls.GetPreflightObject, callInfo)
	lockInterfaceMockGetPreflightObject.Unlock()
	return mock.GetPreflightObjectFunc(ns)
}

// GetPreflightObjectCalls gets all the calls that were made to GetPreflightObject.
// Check the length with:
//     len(mockedInterface.GetPreflightObjectCalls())
func (mock *InterfaceMock) GetPreflightObjectCalls() []struct {
	Ns string
} {
	var calls []struct {
		Ns string
	}
	lockInterfaceMockGetPreflightObject.RLock()
	calls = mock.calls.GetPreflightObject
	lockInterfaceMockGetPreflightObject.RUnlock()
	return calls
}

// Reconcile calls ReconcileFunc.
func (mock *InterfaceMock) Reconcile(ctx context.Context, installation *v1alpha1.RHMI, product *v1alpha1.RHMIProductStatus, serverClient client.Client) (v1alpha1.StatusPhase, error) {
	if mock.ReconcileFunc == nil {
		panic("InterfaceMock.ReconcileFunc: method is nil but Interface.Reconcile was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Installation *v1alpha1.RHMI
		Product      *v1alpha1.RHMIProductStatus
		ServerClient client.Client
	}{
		Ctx:          ctx,
		Installation: installation,
		Product:      product,
		ServerClient: serverClient,
	}
	lockInterfaceMockReconcile.Lock()
	mock.calls.Reconcile = append(mock.calls.Reconcile, callInfo)
	lockInterfaceMockReconcile.Unlock()
	return mock.ReconcileFunc(ctx, installation, product, serverClient)
}

// ReconcileCalls gets all the calls that were made to Reconcile.
// Check the length with:
//     len(mockedInterface.ReconcileCalls())
func (mock *InterfaceMock) ReconcileCalls() []struct {
	Ctx          context.Context
	Installation *v1alpha1.RHMI
	Product      *v1alpha1.RHMIProductStatus
	ServerClient client.Client
} {
	var calls []struct {
		Ctx          context.Context
		Installation *v1alpha1.RHMI
		Product      *v1alpha1.RHMIProductStatus
		ServerClient client.Client
	}
	lockInterfaceMockReconcile.RLock()
	calls = mock.calls.Reconcile
	lockInterfaceMockReconcile.RUnlock()
	return calls
}

// VerifyVersion calls VerifyVersionFunc.
func (mock *InterfaceMock) VerifyVersion(installation *v1alpha1.RHMI) bool {
	if mock.VerifyVersionFunc == nil {
		panic("InterfaceMock.VerifyVersionFunc: method is nil but Interface.VerifyVersion was just called")
	}
	callInfo := struct {
		Installation *v1alpha1.RHMI
	}{
		Installation: installation,
	}
	lockInterfaceMockVerifyVersion.Lock()
	mock.calls.VerifyVersion = append(mock.calls.VerifyVersion, callInfo)
	lockInterfaceMockVerifyVersion.Unlock()
	return mock.VerifyVersionFunc(installation)
}

// VerifyVersionCalls gets all the calls that were made to VerifyVersion.
// Check the length with:
//     len(mockedInterface.VerifyVersionCalls())
func (mock *InterfaceMock) VerifyVersionCalls() []struct {
	Installation *v1alpha1.RHMI
} {
	var calls []struct {
		Installation *v1alpha1.RHMI
	}
	lockInterfaceMockVerifyVersion.RLock()
	calls = mock.calls.VerifyVersion
	lockInterfaceMockVerifyVersion.RUnlock()
	return calls
}
