// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package products

import (
	"context"
	integreatlyv1alpha1 "github.com/integr8ly/integreatly-operator/apis/v1alpha1"
	"github.com/integr8ly/integreatly-operator/pkg/resources/sku"
	"k8s.io/apimachinery/pkg/runtime"
	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
// 	func TestSomethingThatUsesInterface(t *testing.T) {
//
// 		// make and configure a mocked Interface
// 		mockedInterface := &InterfaceMock{
// 			GetPreflightObjectFunc: func(ns string) runtime.Object {
// 				panic("mock out the GetPreflightObject method")
// 			},
// 			ReconcileFunc: func(ctx context.Context, installation *integreatlyv1alpha1.RHMI, product *integreatlyv1alpha1.RHMIProductStatus, serverClient k8sclient.Client, productConfig sku.ProductConfig) (integreatlyv1alpha1.StatusPhase, error) {
// 				panic("mock out the Reconcile method")
// 			},
// 			VerifyVersionFunc: func(installation *integreatlyv1alpha1.RHMI) bool {
// 				panic("mock out the VerifyVersion method")
// 			},
// 		}
//
// 		// use mockedInterface in code that requires Interface
// 		// and then make assertions.
//
// 	}
type InterfaceMock struct {
	// GetPreflightObjectFunc mocks the GetPreflightObject method.
	GetPreflightObjectFunc func(ns string) runtime.Object

	// ReconcileFunc mocks the Reconcile method.
	ReconcileFunc func(ctx context.Context, installation *integreatlyv1alpha1.RHMI, product *integreatlyv1alpha1.RHMIProductStatus, serverClient k8sclient.Client, productConfig sku.ProductConfig) (integreatlyv1alpha1.StatusPhase, error)

	// VerifyVersionFunc mocks the VerifyVersion method.
	VerifyVersionFunc func(installation *integreatlyv1alpha1.RHMI) bool

	// calls tracks calls to the methods.
	calls struct {
		// GetPreflightObject holds details about calls to the GetPreflightObject method.
		GetPreflightObject []struct {
			// Ns is the ns argument value.
			Ns string
		}
		// Reconcile holds details about calls to the Reconcile method.
		Reconcile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Installation is the installation argument value.
			Installation *integreatlyv1alpha1.RHMI
			// Product is the product argument value.
			Product *integreatlyv1alpha1.RHMIProductStatus
			// ServerClient is the serverClient argument value.
			ServerClient k8sclient.Client
			// ProductConfig is the productConfig argument value.
			ProductConfig sku.ProductConfig
		}
		// VerifyVersion holds details about calls to the VerifyVersion method.
		VerifyVersion []struct {
			// Installation is the installation argument value.
			Installation *integreatlyv1alpha1.RHMI
		}
	}
	lockGetPreflightObject sync.RWMutex
	lockReconcile          sync.RWMutex
	lockVerifyVersion      sync.RWMutex
}

// GetPreflightObject calls GetPreflightObjectFunc.
func (mock *InterfaceMock) GetPreflightObject(ns string) runtime.Object {
	if mock.GetPreflightObjectFunc == nil {
		panic("InterfaceMock.GetPreflightObjectFunc: method is nil but Interface.GetPreflightObject was just called")
	}
	callInfo := struct {
		Ns string
	}{
		Ns: ns,
	}
	mock.lockGetPreflightObject.Lock()
	mock.calls.GetPreflightObject = append(mock.calls.GetPreflightObject, callInfo)
	mock.lockGetPreflightObject.Unlock()
	return mock.GetPreflightObjectFunc(ns)
}

// GetPreflightObjectCalls gets all the calls that were made to GetPreflightObject.
// Check the length with:
//     len(mockedInterface.GetPreflightObjectCalls())
func (mock *InterfaceMock) GetPreflightObjectCalls() []struct {
	Ns string
} {
	var calls []struct {
		Ns string
	}
	mock.lockGetPreflightObject.RLock()
	calls = mock.calls.GetPreflightObject
	mock.lockGetPreflightObject.RUnlock()
	return calls
}

// Reconcile calls ReconcileFunc.
func (mock *InterfaceMock) Reconcile(ctx context.Context, installation *integreatlyv1alpha1.RHMI, product *integreatlyv1alpha1.RHMIProductStatus, serverClient k8sclient.Client, productConfig sku.ProductConfig) (integreatlyv1alpha1.StatusPhase, error) {
	if mock.ReconcileFunc == nil {
		panic("InterfaceMock.ReconcileFunc: method is nil but Interface.Reconcile was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Installation  *integreatlyv1alpha1.RHMI
		Product       *integreatlyv1alpha1.RHMIProductStatus
		ServerClient  k8sclient.Client
		ProductConfig sku.ProductConfig
	}{
		Ctx:           ctx,
		Installation:  installation,
		Product:       product,
		ServerClient:  serverClient,
		ProductConfig: productConfig,
	}
	mock.lockReconcile.Lock()
	mock.calls.Reconcile = append(mock.calls.Reconcile, callInfo)
	mock.lockReconcile.Unlock()
	return mock.ReconcileFunc(ctx, installation, product, serverClient, productConfig)
}

// ReconcileCalls gets all the calls that were made to Reconcile.
// Check the length with:
//     len(mockedInterface.ReconcileCalls())
func (mock *InterfaceMock) ReconcileCalls() []struct {
	Ctx           context.Context
	Installation  *integreatlyv1alpha1.RHMI
	Product       *integreatlyv1alpha1.RHMIProductStatus
	ServerClient  k8sclient.Client
	ProductConfig sku.ProductConfig
} {
	var calls []struct {
		Ctx           context.Context
		Installation  *integreatlyv1alpha1.RHMI
		Product       *integreatlyv1alpha1.RHMIProductStatus
		ServerClient  k8sclient.Client
		ProductConfig sku.ProductConfig
	}
	mock.lockReconcile.RLock()
	calls = mock.calls.Reconcile
	mock.lockReconcile.RUnlock()
	return calls
}

// VerifyVersion calls VerifyVersionFunc.
func (mock *InterfaceMock) VerifyVersion(installation *integreatlyv1alpha1.RHMI) bool {
	if mock.VerifyVersionFunc == nil {
		panic("InterfaceMock.VerifyVersionFunc: method is nil but Interface.VerifyVersion was just called")
	}
	callInfo := struct {
		Installation *integreatlyv1alpha1.RHMI
	}{
		Installation: installation,
	}
	mock.lockVerifyVersion.Lock()
	mock.calls.VerifyVersion = append(mock.calls.VerifyVersion, callInfo)
	mock.lockVerifyVersion.Unlock()
	return mock.VerifyVersionFunc(installation)
}

// VerifyVersionCalls gets all the calls that were made to VerifyVersion.
// Check the length with:
//     len(mockedInterface.VerifyVersionCalls())
func (mock *InterfaceMock) VerifyVersionCalls() []struct {
	Installation *integreatlyv1alpha1.RHMI
} {
	var calls []struct {
		Installation *integreatlyv1alpha1.RHMI
	}
	mock.lockVerifyVersion.RLock()
	calls = mock.calls.VerifyVersion
	mock.lockVerifyVersion.RUnlock()
	return calls
}
