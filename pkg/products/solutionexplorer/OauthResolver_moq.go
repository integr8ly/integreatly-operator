// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package solutionexplorer

import (
	"github.com/integr8ly/integreatly-operator/pkg/resources"
	"sync"
)

var (
	lockOauthResolverMockGetOauthEndPoint sync.RWMutex
)

// Ensure, that OauthResolverMock does implement OauthResolver.
// If this is not the case, regenerate this file with moq.
var _ OauthResolver = &OauthResolverMock{}

// OauthResolverMock is a mock implementation of OauthResolver.
//
//     func TestSomethingThatUsesOauthResolver(t *testing.T) {
//
//         // make and configure a mocked OauthResolver
//         mockedOauthResolver := &OauthResolverMock{
//             GetOauthEndPointFunc: func() (*resources.OauthServerConfig, error) {
// 	               panic("mock out the GetOauthEndPoint method")
//             },
//         }
//
//         // use mockedOauthResolver in code that requires OauthResolver
//         // and then make assertions.
//
//     }
type OauthResolverMock struct {
	// GetOauthEndPointFunc mocks the GetOauthEndPoint method.
	GetOauthEndPointFunc func() (*resources.OauthServerConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetOauthEndPoint holds details about calls to the GetOauthEndPoint method.
		GetOauthEndPoint []struct {
		}
	}
}

// GetOauthEndPoint calls GetOauthEndPointFunc.
func (mock *OauthResolverMock) GetOauthEndPoint() (*resources.OauthServerConfig, error) {
	if mock.GetOauthEndPointFunc == nil {
		panic("OauthResolverMock.GetOauthEndPointFunc: method is nil but OauthResolver.GetOauthEndPoint was just called")
	}
	callInfo := struct {
	}{}
	lockOauthResolverMockGetOauthEndPoint.Lock()
	mock.calls.GetOauthEndPoint = append(mock.calls.GetOauthEndPoint, callInfo)
	lockOauthResolverMockGetOauthEndPoint.Unlock()
	return mock.GetOauthEndPointFunc()
}

// GetOauthEndPointCalls gets all the calls that were made to GetOauthEndPoint.
// Check the length with:
//     len(mockedOauthResolver.GetOauthEndPointCalls())
func (mock *OauthResolverMock) GetOauthEndPointCalls() []struct {
} {
	var calls []struct {
	}
	lockOauthResolverMockGetOauthEndPoint.RLock()
	calls = mock.calls.GetOauthEndPoint
	lockOauthResolverMockGetOauthEndPoint.RUnlock()
	return calls
}
