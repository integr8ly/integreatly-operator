// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package threescale

import (
	"net/http"
	"sync"
)

var (
	lockThreeScaleInterfaceMockAddAuthenticationProvider       sync.RWMutex
	lockThreeScaleInterfaceMockAddUser                         sync.RWMutex
	lockThreeScaleInterfaceMockCreateAccount                   sync.RWMutex
	lockThreeScaleInterfaceMockCreateApplication               sync.RWMutex
	lockThreeScaleInterfaceMockCreateApplicationPlan           sync.RWMutex
	lockThreeScaleInterfaceMockCreateBackend                   sync.RWMutex
	lockThreeScaleInterfaceMockCreateBackendMappingRule        sync.RWMutex
	lockThreeScaleInterfaceMockCreateBackendUsage              sync.RWMutex
	lockThreeScaleInterfaceMockCreateMetric                    sync.RWMutex
	lockThreeScaleInterfaceMockCreateService                   sync.RWMutex
	lockThreeScaleInterfaceMockDeleteAccount                   sync.RWMutex
	lockThreeScaleInterfaceMockDeleteBackend                   sync.RWMutex
	lockThreeScaleInterfaceMockDeleteService                   sync.RWMutex
	lockThreeScaleInterfaceMockDeleteUser                      sync.RWMutex
	lockThreeScaleInterfaceMockDeployProxy                     sync.RWMutex
	lockThreeScaleInterfaceMockGetAuthenticationProviderByName sync.RWMutex
	lockThreeScaleInterfaceMockGetAuthenticationProviders      sync.RWMutex
	lockThreeScaleInterfaceMockGetUser                         sync.RWMutex
	lockThreeScaleInterfaceMockGetUsers                        sync.RWMutex
	lockThreeScaleInterfaceMockPromoteProxy                    sync.RWMutex
	lockThreeScaleInterfaceMockSetFromEmailAddress             sync.RWMutex
	lockThreeScaleInterfaceMockSetNamespace                    sync.RWMutex
	lockThreeScaleInterfaceMockSetUserAsAdmin                  sync.RWMutex
	lockThreeScaleInterfaceMockSetUserAsMember                 sync.RWMutex
	lockThreeScaleInterfaceMockUpdateUser                      sync.RWMutex
)

// Ensure, that ThreeScaleInterfaceMock does implement ThreeScaleInterface.
// If this is not the case, regenerate this file with moq.
var _ ThreeScaleInterface = &ThreeScaleInterfaceMock{}

// ThreeScaleInterfaceMock is a mock implementation of ThreeScaleInterface.
//
//     func TestSomethingThatUsesThreeScaleInterface(t *testing.T) {
//
//         // make and configure a mocked ThreeScaleInterface
//         mockedThreeScaleInterface := &ThreeScaleInterfaceMock{
//             AddAuthenticationProviderFunc: func(data map[string]string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the AddAuthenticationProvider method")
//             },
//             AddUserFunc: func(username string, email string, password string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the AddUser method")
//             },
//             CreateAccountFunc: func(accessToken string, orgName string, username string) (string, error) {
// 	               panic("mock out the CreateAccount method")
//             },
//             CreateApplicationFunc: func(accessToken string, accountID string, planID string, name string, description string) (string, error) {
// 	               panic("mock out the CreateApplication method")
//             },
//             CreateApplicationPlanFunc: func(accessToken string, serviceID string, name string) (string, error) {
// 	               panic("mock out the CreateApplicationPlan method")
//             },
//             CreateBackendFunc: func(accessToken string, name string, privateEndpoint string) (int, error) {
// 	               panic("mock out the CreateBackend method")
//             },
//             CreateBackendMappingRuleFunc: func(accessToken string, backendID int, metricID int, httpMethod string, pattern string, delta int) error {
// 	               panic("mock out the CreateBackendMappingRule method")
//             },
//             CreateBackendUsageFunc: func(accessToken string, serviceID string, backendID int, path string) error {
// 	               panic("mock out the CreateBackendUsage method")
//             },
//             CreateMetricFunc: func(accessToken string, backendID int, friendlyName string, unit string) (int, error) {
// 	               panic("mock out the CreateMetric method")
//             },
//             CreateServiceFunc: func(accessToken string, name string, systemName string) (string, error) {
// 	               panic("mock out the CreateService method")
//             },
//             DeleteAccountFunc: func(accessToken string, accountID string) error {
// 	               panic("mock out the DeleteAccount method")
//             },
//             DeleteBackendFunc: func(accessToken string, backendID int) error {
// 	               panic("mock out the DeleteBackend method")
//             },
//             DeleteServiceFunc: func(accessToken string, serviceID string) error {
// 	               panic("mock out the DeleteService method")
//             },
//             DeleteUserFunc: func(userID int, accessToken string) (*http.Response, error) {
// 	               panic("mock out the DeleteUser method")
//             },
//             DeployProxyFunc: func(accessToken string, serviceID string) error {
// 	               panic("mock out the DeployProxy method")
//             },
//             GetAuthenticationProviderByNameFunc: func(name string, accessToken string) (*AuthProvider, error) {
// 	               panic("mock out the GetAuthenticationProviderByName method")
//             },
//             GetAuthenticationProvidersFunc: func(accessToken string) (*AuthProviders, error) {
// 	               panic("mock out the GetAuthenticationProviders method")
//             },
//             GetUserFunc: func(username string, accessToken string) (*User, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUsersFunc: func(accessToken string) (*Users, error) {
// 	               panic("mock out the GetUsers method")
//             },
//             PromoteProxyFunc: func(accessToken string, serviceID string, env string, to string) (string, error) {
// 	               panic("mock out the PromoteProxy method")
//             },
//             SetFromEmailAddressFunc: func(emailAddress string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the SetFromEmailAddress method")
//             },
//             SetNamespaceFunc: func(ns string)  {
// 	               panic("mock out the SetNamespace method")
//             },
//             SetUserAsAdminFunc: func(userID int, accessToken string) (*http.Response, error) {
// 	               panic("mock out the SetUserAsAdmin method")
//             },
//             SetUserAsMemberFunc: func(userID int, accessToken string) (*http.Response, error) {
// 	               panic("mock out the SetUserAsMember method")
//             },
//             UpdateUserFunc: func(userID int, username string, email string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the UpdateUser method")
//             },
//         }
//
//         // use mockedThreeScaleInterface in code that requires ThreeScaleInterface
//         // and then make assertions.
//
//     }
type ThreeScaleInterfaceMock struct {
	// AddAuthenticationProviderFunc mocks the AddAuthenticationProvider method.
	AddAuthenticationProviderFunc func(data map[string]string, accessToken string) (*http.Response, error)

	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(username string, email string, password string, accessToken string) (*http.Response, error)

	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(accessToken string, orgName string, username string) (string, error)

	// CreateApplicationFunc mocks the CreateApplication method.
	CreateApplicationFunc func(accessToken string, accountID string, planID string, name string, description string) (string, error)

	// CreateApplicationPlanFunc mocks the CreateApplicationPlan method.
	CreateApplicationPlanFunc func(accessToken string, serviceID string, name string) (string, error)

	// CreateBackendFunc mocks the CreateBackend method.
	CreateBackendFunc func(accessToken string, name string, privateEndpoint string) (int, error)

	// CreateBackendMappingRuleFunc mocks the CreateBackendMappingRule method.
	CreateBackendMappingRuleFunc func(accessToken string, backendID int, metricID int, httpMethod string, pattern string, delta int) error

	// CreateBackendUsageFunc mocks the CreateBackendUsage method.
	CreateBackendUsageFunc func(accessToken string, serviceID string, backendID int, path string) error

	// CreateMetricFunc mocks the CreateMetric method.
	CreateMetricFunc func(accessToken string, backendID int, friendlyName string, unit string) (int, error)

	// CreateServiceFunc mocks the CreateService method.
	CreateServiceFunc func(accessToken string, name string, systemName string) (string, error)

	// DeleteAccountFunc mocks the DeleteAccount method.
	DeleteAccountFunc func(accessToken string, accountID string) error

	// DeleteBackendFunc mocks the DeleteBackend method.
	DeleteBackendFunc func(accessToken string, backendID int) error

	// DeleteServiceFunc mocks the DeleteService method.
	DeleteServiceFunc func(accessToken string, serviceID string) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(userID int, accessToken string) (*http.Response, error)

	// DeployProxyFunc mocks the DeployProxy method.
	DeployProxyFunc func(accessToken string, serviceID string) error

	// GetAuthenticationProviderByNameFunc mocks the GetAuthenticationProviderByName method.
	GetAuthenticationProviderByNameFunc func(name string, accessToken string) (*AuthProvider, error)

	// GetAuthenticationProvidersFunc mocks the GetAuthenticationProviders method.
	GetAuthenticationProvidersFunc func(accessToken string) (*AuthProviders, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(username string, accessToken string) (*User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(accessToken string) (*Users, error)

	// PromoteProxyFunc mocks the PromoteProxy method.
	PromoteProxyFunc func(accessToken string, serviceID string, env string, to string) (string, error)

	// SetFromEmailAddressFunc mocks the SetFromEmailAddress method.
	SetFromEmailAddressFunc func(emailAddress string, accessToken string) (*http.Response, error)

	// SetNamespaceFunc mocks the SetNamespace method.
	SetNamespaceFunc func(ns string)

	// SetUserAsAdminFunc mocks the SetUserAsAdmin method.
	SetUserAsAdminFunc func(userID int, accessToken string) (*http.Response, error)

	// SetUserAsMemberFunc mocks the SetUserAsMember method.
	SetUserAsMemberFunc func(userID int, accessToken string) (*http.Response, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(userID int, username string, email string, accessToken string) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddAuthenticationProvider holds details about calls to the AddAuthenticationProvider method.
		AddAuthenticationProvider []struct {
			// Data is the data argument value.
			Data map[string]string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// OrgName is the orgName argument value.
			OrgName string
			// Username is the username argument value.
			Username string
		}
		// CreateApplication holds details about calls to the CreateApplication method.
		CreateApplication []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AccountID is the accountID argument value.
			AccountID string
			// PlanID is the planID argument value.
			PlanID string
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
		// CreateApplicationPlan holds details about calls to the CreateApplicationPlan method.
		CreateApplicationPlan []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceID is the serviceID argument value.
			ServiceID string
			// Name is the name argument value.
			Name string
		}
		// CreateBackend holds details about calls to the CreateBackend method.
		CreateBackend []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Name is the name argument value.
			Name string
			// PrivateEndpoint is the privateEndpoint argument value.
			PrivateEndpoint string
		}
		// CreateBackendMappingRule holds details about calls to the CreateBackendMappingRule method.
		CreateBackendMappingRule []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// BackendID is the backendID argument value.
			BackendID int
			// MetricID is the metricID argument value.
			MetricID int
			// HttpMethod is the httpMethod argument value.
			HttpMethod string
			// Pattern is the pattern argument value.
			Pattern string
			// Delta is the delta argument value.
			Delta int
		}
		// CreateBackendUsage holds details about calls to the CreateBackendUsage method.
		CreateBackendUsage []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceID is the serviceID argument value.
			ServiceID string
			// BackendID is the backendID argument value.
			BackendID int
			// Path is the path argument value.
			Path string
		}
		// CreateMetric holds details about calls to the CreateMetric method.
		CreateMetric []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// BackendID is the backendID argument value.
			BackendID int
			// FriendlyName is the friendlyName argument value.
			FriendlyName string
			// Unit is the unit argument value.
			Unit string
		}
		// CreateService holds details about calls to the CreateService method.
		CreateService []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Name is the name argument value.
			Name string
			// SystemName is the systemName argument value.
			SystemName string
		}
		// DeleteAccount holds details about calls to the DeleteAccount method.
		DeleteAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AccountID is the accountID argument value.
			AccountID string
		}
		// DeleteBackend holds details about calls to the DeleteBackend method.
		DeleteBackend []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// BackendID is the backendID argument value.
			BackendID int
		}
		// DeleteService holds details about calls to the DeleteService method.
		DeleteService []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceID is the serviceID argument value.
			ServiceID string
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// UserID is the userID argument value.
			UserID int
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// DeployProxy holds details about calls to the DeployProxy method.
		DeployProxy []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceID is the serviceID argument value.
			ServiceID string
		}
		// GetAuthenticationProviderByName holds details about calls to the GetAuthenticationProviderByName method.
		GetAuthenticationProviderByName []struct {
			// Name is the name argument value.
			Name string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetAuthenticationProviders holds details about calls to the GetAuthenticationProviders method.
		GetAuthenticationProviders []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Username is the username argument value.
			Username string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// PromoteProxy holds details about calls to the PromoteProxy method.
		PromoteProxy []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceID is the serviceID argument value.
			ServiceID string
			// Env is the env argument value.
			Env string
			// To is the to argument value.
			To string
		}
		// SetFromEmailAddress holds details about calls to the SetFromEmailAddress method.
		SetFromEmailAddress []struct {
			// EmailAddress is the emailAddress argument value.
			EmailAddress string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// SetNamespace holds details about calls to the SetNamespace method.
		SetNamespace []struct {
			// Ns is the ns argument value.
			Ns string
		}
		// SetUserAsAdmin holds details about calls to the SetUserAsAdmin method.
		SetUserAsAdmin []struct {
			// UserID is the userID argument value.
			UserID int
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// SetUserAsMember holds details about calls to the SetUserAsMember method.
		SetUserAsMember []struct {
			// UserID is the userID argument value.
			UserID int
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// UserID is the userID argument value.
			UserID int
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
	}
}

// AddAuthenticationProvider calls AddAuthenticationProviderFunc.
func (mock *ThreeScaleInterfaceMock) AddAuthenticationProvider(data map[string]string, accessToken string) (*http.Response, error) {
	if mock.AddAuthenticationProviderFunc == nil {
		panic("ThreeScaleInterfaceMock.AddAuthenticationProviderFunc: method is nil but ThreeScaleInterface.AddAuthenticationProvider was just called")
	}
	callInfo := struct {
		Data        map[string]string
		AccessToken string
	}{
		Data:        data,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockAddAuthenticationProvider.Lock()
	mock.calls.AddAuthenticationProvider = append(mock.calls.AddAuthenticationProvider, callInfo)
	lockThreeScaleInterfaceMockAddAuthenticationProvider.Unlock()
	return mock.AddAuthenticationProviderFunc(data, accessToken)
}

// AddAuthenticationProviderCalls gets all the calls that were made to AddAuthenticationProvider.
// Check the length with:
//     len(mockedThreeScaleInterface.AddAuthenticationProviderCalls())
func (mock *ThreeScaleInterfaceMock) AddAuthenticationProviderCalls() []struct {
	Data        map[string]string
	AccessToken string
} {
	var calls []struct {
		Data        map[string]string
		AccessToken string
	}
	lockThreeScaleInterfaceMockAddAuthenticationProvider.RLock()
	calls = mock.calls.AddAuthenticationProvider
	lockThreeScaleInterfaceMockAddAuthenticationProvider.RUnlock()
	return calls
}

// AddUser calls AddUserFunc.
func (mock *ThreeScaleInterfaceMock) AddUser(username string, email string, password string, accessToken string) (*http.Response, error) {
	if mock.AddUserFunc == nil {
		panic("ThreeScaleInterfaceMock.AddUserFunc: method is nil but ThreeScaleInterface.AddUser was just called")
	}
	callInfo := struct {
		Username    string
		Email       string
		Password    string
		AccessToken string
	}{
		Username:    username,
		Email:       email,
		Password:    password,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	lockThreeScaleInterfaceMockAddUser.Unlock()
	return mock.AddUserFunc(username, email, password, accessToken)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//     len(mockedThreeScaleInterface.AddUserCalls())
func (mock *ThreeScaleInterfaceMock) AddUserCalls() []struct {
	Username    string
	Email       string
	Password    string
	AccessToken string
} {
	var calls []struct {
		Username    string
		Email       string
		Password    string
		AccessToken string
	}
	lockThreeScaleInterfaceMockAddUser.RLock()
	calls = mock.calls.AddUser
	lockThreeScaleInterfaceMockAddUser.RUnlock()
	return calls
}

// CreateAccount calls CreateAccountFunc.
func (mock *ThreeScaleInterfaceMock) CreateAccount(accessToken string, orgName string, username string) (string, error) {
	if mock.CreateAccountFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateAccountFunc: method is nil but ThreeScaleInterface.CreateAccount was just called")
	}
	callInfo := struct {
		AccessToken string
		OrgName     string
		Username    string
	}{
		AccessToken: accessToken,
		OrgName:     orgName,
		Username:    username,
	}
	lockThreeScaleInterfaceMockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	lockThreeScaleInterfaceMockCreateAccount.Unlock()
	return mock.CreateAccountFunc(accessToken, orgName, username)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateAccountCalls())
func (mock *ThreeScaleInterfaceMock) CreateAccountCalls() []struct {
	AccessToken string
	OrgName     string
	Username    string
} {
	var calls []struct {
		AccessToken string
		OrgName     string
		Username    string
	}
	lockThreeScaleInterfaceMockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	lockThreeScaleInterfaceMockCreateAccount.RUnlock()
	return calls
}

// CreateApplication calls CreateApplicationFunc.
func (mock *ThreeScaleInterfaceMock) CreateApplication(accessToken string, accountID string, planID string, name string, description string) (string, error) {
	if mock.CreateApplicationFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateApplicationFunc: method is nil but ThreeScaleInterface.CreateApplication was just called")
	}
	callInfo := struct {
		AccessToken string
		AccountID   string
		PlanID      string
		Name        string
		Description string
	}{
		AccessToken: accessToken,
		AccountID:   accountID,
		PlanID:      planID,
		Name:        name,
		Description: description,
	}
	lockThreeScaleInterfaceMockCreateApplication.Lock()
	mock.calls.CreateApplication = append(mock.calls.CreateApplication, callInfo)
	lockThreeScaleInterfaceMockCreateApplication.Unlock()
	return mock.CreateApplicationFunc(accessToken, accountID, planID, name, description)
}

// CreateApplicationCalls gets all the calls that were made to CreateApplication.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateApplicationCalls())
func (mock *ThreeScaleInterfaceMock) CreateApplicationCalls() []struct {
	AccessToken string
	AccountID   string
	PlanID      string
	Name        string
	Description string
} {
	var calls []struct {
		AccessToken string
		AccountID   string
		PlanID      string
		Name        string
		Description string
	}
	lockThreeScaleInterfaceMockCreateApplication.RLock()
	calls = mock.calls.CreateApplication
	lockThreeScaleInterfaceMockCreateApplication.RUnlock()
	return calls
}

// CreateApplicationPlan calls CreateApplicationPlanFunc.
func (mock *ThreeScaleInterfaceMock) CreateApplicationPlan(accessToken string, serviceID string, name string) (string, error) {
	if mock.CreateApplicationPlanFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateApplicationPlanFunc: method is nil but ThreeScaleInterface.CreateApplicationPlan was just called")
	}
	callInfo := struct {
		AccessToken string
		ServiceID   string
		Name        string
	}{
		AccessToken: accessToken,
		ServiceID:   serviceID,
		Name:        name,
	}
	lockThreeScaleInterfaceMockCreateApplicationPlan.Lock()
	mock.calls.CreateApplicationPlan = append(mock.calls.CreateApplicationPlan, callInfo)
	lockThreeScaleInterfaceMockCreateApplicationPlan.Unlock()
	return mock.CreateApplicationPlanFunc(accessToken, serviceID, name)
}

// CreateApplicationPlanCalls gets all the calls that were made to CreateApplicationPlan.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateApplicationPlanCalls())
func (mock *ThreeScaleInterfaceMock) CreateApplicationPlanCalls() []struct {
	AccessToken string
	ServiceID   string
	Name        string
} {
	var calls []struct {
		AccessToken string
		ServiceID   string
		Name        string
	}
	lockThreeScaleInterfaceMockCreateApplicationPlan.RLock()
	calls = mock.calls.CreateApplicationPlan
	lockThreeScaleInterfaceMockCreateApplicationPlan.RUnlock()
	return calls
}

// CreateBackend calls CreateBackendFunc.
func (mock *ThreeScaleInterfaceMock) CreateBackend(accessToken string, name string, privateEndpoint string) (int, error) {
	if mock.CreateBackendFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateBackendFunc: method is nil but ThreeScaleInterface.CreateBackend was just called")
	}
	callInfo := struct {
		AccessToken     string
		Name            string
		PrivateEndpoint string
	}{
		AccessToken:     accessToken,
		Name:            name,
		PrivateEndpoint: privateEndpoint,
	}
	lockThreeScaleInterfaceMockCreateBackend.Lock()
	mock.calls.CreateBackend = append(mock.calls.CreateBackend, callInfo)
	lockThreeScaleInterfaceMockCreateBackend.Unlock()
	return mock.CreateBackendFunc(accessToken, name, privateEndpoint)
}

// CreateBackendCalls gets all the calls that were made to CreateBackend.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateBackendCalls())
func (mock *ThreeScaleInterfaceMock) CreateBackendCalls() []struct {
	AccessToken     string
	Name            string
	PrivateEndpoint string
} {
	var calls []struct {
		AccessToken     string
		Name            string
		PrivateEndpoint string
	}
	lockThreeScaleInterfaceMockCreateBackend.RLock()
	calls = mock.calls.CreateBackend
	lockThreeScaleInterfaceMockCreateBackend.RUnlock()
	return calls
}

// CreateBackendMappingRule calls CreateBackendMappingRuleFunc.
func (mock *ThreeScaleInterfaceMock) CreateBackendMappingRule(accessToken string, backendID int, metricID int, httpMethod string, pattern string, delta int) error {
	if mock.CreateBackendMappingRuleFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateBackendMappingRuleFunc: method is nil but ThreeScaleInterface.CreateBackendMappingRule was just called")
	}
	callInfo := struct {
		AccessToken string
		BackendID   int
		MetricID    int
		HttpMethod  string
		Pattern     string
		Delta       int
	}{
		AccessToken: accessToken,
		BackendID:   backendID,
		MetricID:    metricID,
		HttpMethod:  httpMethod,
		Pattern:     pattern,
		Delta:       delta,
	}
	lockThreeScaleInterfaceMockCreateBackendMappingRule.Lock()
	mock.calls.CreateBackendMappingRule = append(mock.calls.CreateBackendMappingRule, callInfo)
	lockThreeScaleInterfaceMockCreateBackendMappingRule.Unlock()
	return mock.CreateBackendMappingRuleFunc(accessToken, backendID, metricID, httpMethod, pattern, delta)
}

// CreateBackendMappingRuleCalls gets all the calls that were made to CreateBackendMappingRule.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateBackendMappingRuleCalls())
func (mock *ThreeScaleInterfaceMock) CreateBackendMappingRuleCalls() []struct {
	AccessToken string
	BackendID   int
	MetricID    int
	HttpMethod  string
	Pattern     string
	Delta       int
} {
	var calls []struct {
		AccessToken string
		BackendID   int
		MetricID    int
		HttpMethod  string
		Pattern     string
		Delta       int
	}
	lockThreeScaleInterfaceMockCreateBackendMappingRule.RLock()
	calls = mock.calls.CreateBackendMappingRule
	lockThreeScaleInterfaceMockCreateBackendMappingRule.RUnlock()
	return calls
}

// CreateBackendUsage calls CreateBackendUsageFunc.
func (mock *ThreeScaleInterfaceMock) CreateBackendUsage(accessToken string, serviceID string, backendID int, path string) error {
	if mock.CreateBackendUsageFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateBackendUsageFunc: method is nil but ThreeScaleInterface.CreateBackendUsage was just called")
	}
	callInfo := struct {
		AccessToken string
		ServiceID   string
		BackendID   int
		Path        string
	}{
		AccessToken: accessToken,
		ServiceID:   serviceID,
		BackendID:   backendID,
		Path:        path,
	}
	lockThreeScaleInterfaceMockCreateBackendUsage.Lock()
	mock.calls.CreateBackendUsage = append(mock.calls.CreateBackendUsage, callInfo)
	lockThreeScaleInterfaceMockCreateBackendUsage.Unlock()
	return mock.CreateBackendUsageFunc(accessToken, serviceID, backendID, path)
}

// CreateBackendUsageCalls gets all the calls that were made to CreateBackendUsage.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateBackendUsageCalls())
func (mock *ThreeScaleInterfaceMock) CreateBackendUsageCalls() []struct {
	AccessToken string
	ServiceID   string
	BackendID   int
	Path        string
} {
	var calls []struct {
		AccessToken string
		ServiceID   string
		BackendID   int
		Path        string
	}
	lockThreeScaleInterfaceMockCreateBackendUsage.RLock()
	calls = mock.calls.CreateBackendUsage
	lockThreeScaleInterfaceMockCreateBackendUsage.RUnlock()
	return calls
}

// CreateMetric calls CreateMetricFunc.
func (mock *ThreeScaleInterfaceMock) CreateMetric(accessToken string, backendID int, friendlyName string, unit string) (int, error) {
	if mock.CreateMetricFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateMetricFunc: method is nil but ThreeScaleInterface.CreateMetric was just called")
	}
	callInfo := struct {
		AccessToken  string
		BackendID    int
		FriendlyName string
		Unit         string
	}{
		AccessToken:  accessToken,
		BackendID:    backendID,
		FriendlyName: friendlyName,
		Unit:         unit,
	}
	lockThreeScaleInterfaceMockCreateMetric.Lock()
	mock.calls.CreateMetric = append(mock.calls.CreateMetric, callInfo)
	lockThreeScaleInterfaceMockCreateMetric.Unlock()
	return mock.CreateMetricFunc(accessToken, backendID, friendlyName, unit)
}

// CreateMetricCalls gets all the calls that were made to CreateMetric.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateMetricCalls())
func (mock *ThreeScaleInterfaceMock) CreateMetricCalls() []struct {
	AccessToken  string
	BackendID    int
	FriendlyName string
	Unit         string
} {
	var calls []struct {
		AccessToken  string
		BackendID    int
		FriendlyName string
		Unit         string
	}
	lockThreeScaleInterfaceMockCreateMetric.RLock()
	calls = mock.calls.CreateMetric
	lockThreeScaleInterfaceMockCreateMetric.RUnlock()
	return calls
}

// CreateService calls CreateServiceFunc.
func (mock *ThreeScaleInterfaceMock) CreateService(accessToken string, name string, systemName string) (string, error) {
	if mock.CreateServiceFunc == nil {
		panic("ThreeScaleInterfaceMock.CreateServiceFunc: method is nil but ThreeScaleInterface.CreateService was just called")
	}
	callInfo := struct {
		AccessToken string
		Name        string
		SystemName  string
	}{
		AccessToken: accessToken,
		Name:        name,
		SystemName:  systemName,
	}
	lockThreeScaleInterfaceMockCreateService.Lock()
	mock.calls.CreateService = append(mock.calls.CreateService, callInfo)
	lockThreeScaleInterfaceMockCreateService.Unlock()
	return mock.CreateServiceFunc(accessToken, name, systemName)
}

// CreateServiceCalls gets all the calls that were made to CreateService.
// Check the length with:
//     len(mockedThreeScaleInterface.CreateServiceCalls())
func (mock *ThreeScaleInterfaceMock) CreateServiceCalls() []struct {
	AccessToken string
	Name        string
	SystemName  string
} {
	var calls []struct {
		AccessToken string
		Name        string
		SystemName  string
	}
	lockThreeScaleInterfaceMockCreateService.RLock()
	calls = mock.calls.CreateService
	lockThreeScaleInterfaceMockCreateService.RUnlock()
	return calls
}

// DeleteAccount calls DeleteAccountFunc.
func (mock *ThreeScaleInterfaceMock) DeleteAccount(accessToken string, accountID string) error {
	if mock.DeleteAccountFunc == nil {
		panic("ThreeScaleInterfaceMock.DeleteAccountFunc: method is nil but ThreeScaleInterface.DeleteAccount was just called")
	}
	callInfo := struct {
		AccessToken string
		AccountID   string
	}{
		AccessToken: accessToken,
		AccountID:   accountID,
	}
	lockThreeScaleInterfaceMockDeleteAccount.Lock()
	mock.calls.DeleteAccount = append(mock.calls.DeleteAccount, callInfo)
	lockThreeScaleInterfaceMockDeleteAccount.Unlock()
	return mock.DeleteAccountFunc(accessToken, accountID)
}

// DeleteAccountCalls gets all the calls that were made to DeleteAccount.
// Check the length with:
//     len(mockedThreeScaleInterface.DeleteAccountCalls())
func (mock *ThreeScaleInterfaceMock) DeleteAccountCalls() []struct {
	AccessToken string
	AccountID   string
} {
	var calls []struct {
		AccessToken string
		AccountID   string
	}
	lockThreeScaleInterfaceMockDeleteAccount.RLock()
	calls = mock.calls.DeleteAccount
	lockThreeScaleInterfaceMockDeleteAccount.RUnlock()
	return calls
}

// DeleteBackend calls DeleteBackendFunc.
func (mock *ThreeScaleInterfaceMock) DeleteBackend(accessToken string, backendID int) error {
	if mock.DeleteBackendFunc == nil {
		panic("ThreeScaleInterfaceMock.DeleteBackendFunc: method is nil but ThreeScaleInterface.DeleteBackend was just called")
	}
	callInfo := struct {
		AccessToken string
		BackendID   int
	}{
		AccessToken: accessToken,
		BackendID:   backendID,
	}
	lockThreeScaleInterfaceMockDeleteBackend.Lock()
	mock.calls.DeleteBackend = append(mock.calls.DeleteBackend, callInfo)
	lockThreeScaleInterfaceMockDeleteBackend.Unlock()
	return mock.DeleteBackendFunc(accessToken, backendID)
}

// DeleteBackendCalls gets all the calls that were made to DeleteBackend.
// Check the length with:
//     len(mockedThreeScaleInterface.DeleteBackendCalls())
func (mock *ThreeScaleInterfaceMock) DeleteBackendCalls() []struct {
	AccessToken string
	BackendID   int
} {
	var calls []struct {
		AccessToken string
		BackendID   int
	}
	lockThreeScaleInterfaceMockDeleteBackend.RLock()
	calls = mock.calls.DeleteBackend
	lockThreeScaleInterfaceMockDeleteBackend.RUnlock()
	return calls
}

// DeleteService calls DeleteServiceFunc.
func (mock *ThreeScaleInterfaceMock) DeleteService(accessToken string, serviceID string) error {
	if mock.DeleteServiceFunc == nil {
		panic("ThreeScaleInterfaceMock.DeleteServiceFunc: method is nil but ThreeScaleInterface.DeleteService was just called")
	}
	callInfo := struct {
		AccessToken string
		ServiceID   string
	}{
		AccessToken: accessToken,
		ServiceID:   serviceID,
	}
	lockThreeScaleInterfaceMockDeleteService.Lock()
	mock.calls.DeleteService = append(mock.calls.DeleteService, callInfo)
	lockThreeScaleInterfaceMockDeleteService.Unlock()
	return mock.DeleteServiceFunc(accessToken, serviceID)
}

// DeleteServiceCalls gets all the calls that were made to DeleteService.
// Check the length with:
//     len(mockedThreeScaleInterface.DeleteServiceCalls())
func (mock *ThreeScaleInterfaceMock) DeleteServiceCalls() []struct {
	AccessToken string
	ServiceID   string
} {
	var calls []struct {
		AccessToken string
		ServiceID   string
	}
	lockThreeScaleInterfaceMockDeleteService.RLock()
	calls = mock.calls.DeleteService
	lockThreeScaleInterfaceMockDeleteService.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *ThreeScaleInterfaceMock) DeleteUser(userID int, accessToken string) (*http.Response, error) {
	if mock.DeleteUserFunc == nil {
		panic("ThreeScaleInterfaceMock.DeleteUserFunc: method is nil but ThreeScaleInterface.DeleteUser was just called")
	}
	callInfo := struct {
		UserID      int
		AccessToken string
	}{
		UserID:      userID,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockThreeScaleInterfaceMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(userID, accessToken)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedThreeScaleInterface.DeleteUserCalls())
func (mock *ThreeScaleInterfaceMock) DeleteUserCalls() []struct {
	UserID      int
	AccessToken string
} {
	var calls []struct {
		UserID      int
		AccessToken string
	}
	lockThreeScaleInterfaceMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockThreeScaleInterfaceMockDeleteUser.RUnlock()
	return calls
}

// DeployProxy calls DeployProxyFunc.
func (mock *ThreeScaleInterfaceMock) DeployProxy(accessToken string, serviceID string) error {
	if mock.DeployProxyFunc == nil {
		panic("ThreeScaleInterfaceMock.DeployProxyFunc: method is nil but ThreeScaleInterface.DeployProxy was just called")
	}
	callInfo := struct {
		AccessToken string
		ServiceID   string
	}{
		AccessToken: accessToken,
		ServiceID:   serviceID,
	}
	lockThreeScaleInterfaceMockDeployProxy.Lock()
	mock.calls.DeployProxy = append(mock.calls.DeployProxy, callInfo)
	lockThreeScaleInterfaceMockDeployProxy.Unlock()
	return mock.DeployProxyFunc(accessToken, serviceID)
}

// DeployProxyCalls gets all the calls that were made to DeployProxy.
// Check the length with:
//     len(mockedThreeScaleInterface.DeployProxyCalls())
func (mock *ThreeScaleInterfaceMock) DeployProxyCalls() []struct {
	AccessToken string
	ServiceID   string
} {
	var calls []struct {
		AccessToken string
		ServiceID   string
	}
	lockThreeScaleInterfaceMockDeployProxy.RLock()
	calls = mock.calls.DeployProxy
	lockThreeScaleInterfaceMockDeployProxy.RUnlock()
	return calls
}

// GetAuthenticationProviderByName calls GetAuthenticationProviderByNameFunc.
func (mock *ThreeScaleInterfaceMock) GetAuthenticationProviderByName(name string, accessToken string) (*AuthProvider, error) {
	if mock.GetAuthenticationProviderByNameFunc == nil {
		panic("ThreeScaleInterfaceMock.GetAuthenticationProviderByNameFunc: method is nil but ThreeScaleInterface.GetAuthenticationProviderByName was just called")
	}
	callInfo := struct {
		Name        string
		AccessToken string
	}{
		Name:        name,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetAuthenticationProviderByName.Lock()
	mock.calls.GetAuthenticationProviderByName = append(mock.calls.GetAuthenticationProviderByName, callInfo)
	lockThreeScaleInterfaceMockGetAuthenticationProviderByName.Unlock()
	return mock.GetAuthenticationProviderByNameFunc(name, accessToken)
}

// GetAuthenticationProviderByNameCalls gets all the calls that were made to GetAuthenticationProviderByName.
// Check the length with:
//     len(mockedThreeScaleInterface.GetAuthenticationProviderByNameCalls())
func (mock *ThreeScaleInterfaceMock) GetAuthenticationProviderByNameCalls() []struct {
	Name        string
	AccessToken string
} {
	var calls []struct {
		Name        string
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetAuthenticationProviderByName.RLock()
	calls = mock.calls.GetAuthenticationProviderByName
	lockThreeScaleInterfaceMockGetAuthenticationProviderByName.RUnlock()
	return calls
}

// GetAuthenticationProviders calls GetAuthenticationProvidersFunc.
func (mock *ThreeScaleInterfaceMock) GetAuthenticationProviders(accessToken string) (*AuthProviders, error) {
	if mock.GetAuthenticationProvidersFunc == nil {
		panic("ThreeScaleInterfaceMock.GetAuthenticationProvidersFunc: method is nil but ThreeScaleInterface.GetAuthenticationProviders was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetAuthenticationProviders.Lock()
	mock.calls.GetAuthenticationProviders = append(mock.calls.GetAuthenticationProviders, callInfo)
	lockThreeScaleInterfaceMockGetAuthenticationProviders.Unlock()
	return mock.GetAuthenticationProvidersFunc(accessToken)
}

// GetAuthenticationProvidersCalls gets all the calls that were made to GetAuthenticationProviders.
// Check the length with:
//     len(mockedThreeScaleInterface.GetAuthenticationProvidersCalls())
func (mock *ThreeScaleInterfaceMock) GetAuthenticationProvidersCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetAuthenticationProviders.RLock()
	calls = mock.calls.GetAuthenticationProviders
	lockThreeScaleInterfaceMockGetAuthenticationProviders.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *ThreeScaleInterfaceMock) GetUser(username string, accessToken string) (*User, error) {
	if mock.GetUserFunc == nil {
		panic("ThreeScaleInterfaceMock.GetUserFunc: method is nil but ThreeScaleInterface.GetUser was just called")
	}
	callInfo := struct {
		Username    string
		AccessToken string
	}{
		Username:    username,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	lockThreeScaleInterfaceMockGetUser.Unlock()
	return mock.GetUserFunc(username, accessToken)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedThreeScaleInterface.GetUserCalls())
func (mock *ThreeScaleInterfaceMock) GetUserCalls() []struct {
	Username    string
	AccessToken string
} {
	var calls []struct {
		Username    string
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetUser.RLock()
	calls = mock.calls.GetUser
	lockThreeScaleInterfaceMockGetUser.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *ThreeScaleInterfaceMock) GetUsers(accessToken string) (*Users, error) {
	if mock.GetUsersFunc == nil {
		panic("ThreeScaleInterfaceMock.GetUsersFunc: method is nil but ThreeScaleInterface.GetUsers was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	lockThreeScaleInterfaceMockGetUsers.Unlock()
	return mock.GetUsersFunc(accessToken)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//     len(mockedThreeScaleInterface.GetUsersCalls())
func (mock *ThreeScaleInterfaceMock) GetUsersCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetUsers.RLock()
	calls = mock.calls.GetUsers
	lockThreeScaleInterfaceMockGetUsers.RUnlock()
	return calls
}

// PromoteProxy calls PromoteProxyFunc.
func (mock *ThreeScaleInterfaceMock) PromoteProxy(accessToken string, serviceID string, env string, to string) (string, error) {
	if mock.PromoteProxyFunc == nil {
		panic("ThreeScaleInterfaceMock.PromoteProxyFunc: method is nil but ThreeScaleInterface.PromoteProxy was just called")
	}
	callInfo := struct {
		AccessToken string
		ServiceID   string
		Env         string
		To          string
	}{
		AccessToken: accessToken,
		ServiceID:   serviceID,
		Env:         env,
		To:          to,
	}
	lockThreeScaleInterfaceMockPromoteProxy.Lock()
	mock.calls.PromoteProxy = append(mock.calls.PromoteProxy, callInfo)
	lockThreeScaleInterfaceMockPromoteProxy.Unlock()
	return mock.PromoteProxyFunc(accessToken, serviceID, env, to)
}

// PromoteProxyCalls gets all the calls that were made to PromoteProxy.
// Check the length with:
//     len(mockedThreeScaleInterface.PromoteProxyCalls())
func (mock *ThreeScaleInterfaceMock) PromoteProxyCalls() []struct {
	AccessToken string
	ServiceID   string
	Env         string
	To          string
} {
	var calls []struct {
		AccessToken string
		ServiceID   string
		Env         string
		To          string
	}
	lockThreeScaleInterfaceMockPromoteProxy.RLock()
	calls = mock.calls.PromoteProxy
	lockThreeScaleInterfaceMockPromoteProxy.RUnlock()
	return calls
}

// SetFromEmailAddress calls SetFromEmailAddressFunc.
func (mock *ThreeScaleInterfaceMock) SetFromEmailAddress(emailAddress string, accessToken string) (*http.Response, error) {
	if mock.SetFromEmailAddressFunc == nil {
		panic("ThreeScaleInterfaceMock.SetFromEmailAddressFunc: method is nil but ThreeScaleInterface.SetFromEmailAddress was just called")
	}
	callInfo := struct {
		EmailAddress string
		AccessToken  string
	}{
		EmailAddress: emailAddress,
		AccessToken:  accessToken,
	}
	lockThreeScaleInterfaceMockSetFromEmailAddress.Lock()
	mock.calls.SetFromEmailAddress = append(mock.calls.SetFromEmailAddress, callInfo)
	lockThreeScaleInterfaceMockSetFromEmailAddress.Unlock()
	return mock.SetFromEmailAddressFunc(emailAddress, accessToken)
}

// SetFromEmailAddressCalls gets all the calls that were made to SetFromEmailAddress.
// Check the length with:
//     len(mockedThreeScaleInterface.SetFromEmailAddressCalls())
func (mock *ThreeScaleInterfaceMock) SetFromEmailAddressCalls() []struct {
	EmailAddress string
	AccessToken  string
} {
	var calls []struct {
		EmailAddress string
		AccessToken  string
	}
	lockThreeScaleInterfaceMockSetFromEmailAddress.RLock()
	calls = mock.calls.SetFromEmailAddress
	lockThreeScaleInterfaceMockSetFromEmailAddress.RUnlock()
	return calls
}

// SetNamespace calls SetNamespaceFunc.
func (mock *ThreeScaleInterfaceMock) SetNamespace(ns string) {
	if mock.SetNamespaceFunc == nil {
		panic("ThreeScaleInterfaceMock.SetNamespaceFunc: method is nil but ThreeScaleInterface.SetNamespace was just called")
	}
	callInfo := struct {
		Ns string
	}{
		Ns: ns,
	}
	lockThreeScaleInterfaceMockSetNamespace.Lock()
	mock.calls.SetNamespace = append(mock.calls.SetNamespace, callInfo)
	lockThreeScaleInterfaceMockSetNamespace.Unlock()
	mock.SetNamespaceFunc(ns)
}

// SetNamespaceCalls gets all the calls that were made to SetNamespace.
// Check the length with:
//     len(mockedThreeScaleInterface.SetNamespaceCalls())
func (mock *ThreeScaleInterfaceMock) SetNamespaceCalls() []struct {
	Ns string
} {
	var calls []struct {
		Ns string
	}
	lockThreeScaleInterfaceMockSetNamespace.RLock()
	calls = mock.calls.SetNamespace
	lockThreeScaleInterfaceMockSetNamespace.RUnlock()
	return calls
}

// SetUserAsAdmin calls SetUserAsAdminFunc.
func (mock *ThreeScaleInterfaceMock) SetUserAsAdmin(userID int, accessToken string) (*http.Response, error) {
	if mock.SetUserAsAdminFunc == nil {
		panic("ThreeScaleInterfaceMock.SetUserAsAdminFunc: method is nil but ThreeScaleInterface.SetUserAsAdmin was just called")
	}
	callInfo := struct {
		UserID      int
		AccessToken string
	}{
		UserID:      userID,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockSetUserAsAdmin.Lock()
	mock.calls.SetUserAsAdmin = append(mock.calls.SetUserAsAdmin, callInfo)
	lockThreeScaleInterfaceMockSetUserAsAdmin.Unlock()
	return mock.SetUserAsAdminFunc(userID, accessToken)
}

// SetUserAsAdminCalls gets all the calls that were made to SetUserAsAdmin.
// Check the length with:
//     len(mockedThreeScaleInterface.SetUserAsAdminCalls())
func (mock *ThreeScaleInterfaceMock) SetUserAsAdminCalls() []struct {
	UserID      int
	AccessToken string
} {
	var calls []struct {
		UserID      int
		AccessToken string
	}
	lockThreeScaleInterfaceMockSetUserAsAdmin.RLock()
	calls = mock.calls.SetUserAsAdmin
	lockThreeScaleInterfaceMockSetUserAsAdmin.RUnlock()
	return calls
}

// SetUserAsMember calls SetUserAsMemberFunc.
func (mock *ThreeScaleInterfaceMock) SetUserAsMember(userID int, accessToken string) (*http.Response, error) {
	if mock.SetUserAsMemberFunc == nil {
		panic("ThreeScaleInterfaceMock.SetUserAsMemberFunc: method is nil but ThreeScaleInterface.SetUserAsMember was just called")
	}
	callInfo := struct {
		UserID      int
		AccessToken string
	}{
		UserID:      userID,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockSetUserAsMember.Lock()
	mock.calls.SetUserAsMember = append(mock.calls.SetUserAsMember, callInfo)
	lockThreeScaleInterfaceMockSetUserAsMember.Unlock()
	return mock.SetUserAsMemberFunc(userID, accessToken)
}

// SetUserAsMemberCalls gets all the calls that were made to SetUserAsMember.
// Check the length with:
//     len(mockedThreeScaleInterface.SetUserAsMemberCalls())
func (mock *ThreeScaleInterfaceMock) SetUserAsMemberCalls() []struct {
	UserID      int
	AccessToken string
} {
	var calls []struct {
		UserID      int
		AccessToken string
	}
	lockThreeScaleInterfaceMockSetUserAsMember.RLock()
	calls = mock.calls.SetUserAsMember
	lockThreeScaleInterfaceMockSetUserAsMember.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *ThreeScaleInterfaceMock) UpdateUser(userID int, username string, email string, accessToken string) (*http.Response, error) {
	if mock.UpdateUserFunc == nil {
		panic("ThreeScaleInterfaceMock.UpdateUserFunc: method is nil but ThreeScaleInterface.UpdateUser was just called")
	}
	callInfo := struct {
		UserID      int
		Username    string
		Email       string
		AccessToken string
	}{
		UserID:      userID,
		Username:    username,
		Email:       email,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockThreeScaleInterfaceMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(userID, username, email, accessToken)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedThreeScaleInterface.UpdateUserCalls())
func (mock *ThreeScaleInterfaceMock) UpdateUserCalls() []struct {
	UserID      int
	Username    string
	Email       string
	AccessToken string
} {
	var calls []struct {
		UserID      int
		Username    string
		Email       string
		AccessToken string
	}
	lockThreeScaleInterfaceMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockThreeScaleInterfaceMockUpdateUser.RUnlock()
	return calls
}
