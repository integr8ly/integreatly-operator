// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sku

import (
	marin3rconfig "github.com/integr8ly/integreatly-operator/pkg/products/marin3r/config"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sync"
)

// Ensure, that ProductConfigMock does implement ProductConfig.
// If this is not the case, regenerate this file with moq.
var _ ProductConfig = &ProductConfigMock{}

// ProductConfigMock is a mock implementation of ProductConfig.
//
// 	func TestSomethingThatUsesProductConfig(t *testing.T) {
//
// 		// make and configure a mocked ProductConfig
// 		mockedProductConfig := &ProductConfigMock{
// 			ConfigureFunc: func(obj metav1.Object) error {
// 				panic("mock out the Configure method")
// 			},
// 			GetRateLimitConfigFunc: func() marin3rconfig.RateLimitConfig {
// 				panic("mock out the GetRateLimitConfig method")
// 			},
// 			GetReplicasFunc: func(ddcssName string) int32 {
// 				panic("mock out the GetReplicas method")
// 			},
// 			GetResourceConfigFunc: func(ddcssName string) (corev1.ResourceRequirements, bool) {
// 				panic("mock out the GetResourceConfig method")
// 			},
// 		}
//
// 		// use mockedProductConfig in code that requires ProductConfig
// 		// and then make assertions.
//
// 	}
type ProductConfigMock struct {
	// ConfigureFunc mocks the Configure method.
	ConfigureFunc func(obj metav1.Object) error

	// GetRateLimitConfigFunc mocks the GetRateLimitConfig method.
	GetRateLimitConfigFunc func() marin3rconfig.RateLimitConfig

	// GetReplicasFunc mocks the GetReplicas method.
	GetReplicasFunc func(ddcssName string) int32

	// GetResourceConfigFunc mocks the GetResourceConfig method.
	GetResourceConfigFunc func(ddcssName string) (corev1.ResourceRequirements, bool)

	// calls tracks calls to the methods.
	calls struct {
		// Configure holds details about calls to the Configure method.
		Configure []struct {
			// Obj is the obj argument value.
			Obj metav1.Object
		}
		// GetRateLimitConfig holds details about calls to the GetRateLimitConfig method.
		GetRateLimitConfig []struct {
		}
		// GetReplicas holds details about calls to the GetReplicas method.
		GetReplicas []struct {
			// DdcssName is the ddcssName argument value.
			DdcssName string
		}
		// GetResourceConfig holds details about calls to the GetResourceConfig method.
		GetResourceConfig []struct {
			// DdcssName is the ddcssName argument value.
			DdcssName string
		}
	}
	lockConfigure          sync.RWMutex
	lockGetRateLimitConfig sync.RWMutex
	lockGetReplicas        sync.RWMutex
	lockGetResourceConfig  sync.RWMutex
}

// Configure calls ConfigureFunc.
func (mock *ProductConfigMock) Configure(obj metav1.Object) error {
	if mock.ConfigureFunc == nil {
		panic("ProductConfigMock.ConfigureFunc: method is nil but ProductConfig.Configure was just called")
	}
	callInfo := struct {
		Obj metav1.Object
	}{
		Obj: obj,
	}
	mock.lockConfigure.Lock()
	mock.calls.Configure = append(mock.calls.Configure, callInfo)
	mock.lockConfigure.Unlock()
	return mock.ConfigureFunc(obj)
}

// ConfigureCalls gets all the calls that were made to Configure.
// Check the length with:
//     len(mockedProductConfig.ConfigureCalls())
func (mock *ProductConfigMock) ConfigureCalls() []struct {
	Obj metav1.Object
} {
	var calls []struct {
		Obj metav1.Object
	}
	mock.lockConfigure.RLock()
	calls = mock.calls.Configure
	mock.lockConfigure.RUnlock()
	return calls
}

// GetRateLimitConfig calls GetRateLimitConfigFunc.
func (mock *ProductConfigMock) GetRateLimitConfig() marin3rconfig.RateLimitConfig {
	if mock.GetRateLimitConfigFunc == nil {
		panic("ProductConfigMock.GetRateLimitConfigFunc: method is nil but ProductConfig.GetRateLimitConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRateLimitConfig.Lock()
	mock.calls.GetRateLimitConfig = append(mock.calls.GetRateLimitConfig, callInfo)
	mock.lockGetRateLimitConfig.Unlock()
	return mock.GetRateLimitConfigFunc()
}

// GetRateLimitConfigCalls gets all the calls that were made to GetRateLimitConfig.
// Check the length with:
//     len(mockedProductConfig.GetRateLimitConfigCalls())
func (mock *ProductConfigMock) GetRateLimitConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRateLimitConfig.RLock()
	calls = mock.calls.GetRateLimitConfig
	mock.lockGetRateLimitConfig.RUnlock()
	return calls
}

// GetReplicas calls GetReplicasFunc.
func (mock *ProductConfigMock) GetReplicas(ddcssName string) int32 {
	if mock.GetReplicasFunc == nil {
		panic("ProductConfigMock.GetReplicasFunc: method is nil but ProductConfig.GetReplicas was just called")
	}
	callInfo := struct {
		DdcssName string
	}{
		DdcssName: ddcssName,
	}
	mock.lockGetReplicas.Lock()
	mock.calls.GetReplicas = append(mock.calls.GetReplicas, callInfo)
	mock.lockGetReplicas.Unlock()
	return mock.GetReplicasFunc(ddcssName)
}

// GetReplicasCalls gets all the calls that were made to GetReplicas.
// Check the length with:
//     len(mockedProductConfig.GetReplicasCalls())
func (mock *ProductConfigMock) GetReplicasCalls() []struct {
	DdcssName string
} {
	var calls []struct {
		DdcssName string
	}
	mock.lockGetReplicas.RLock()
	calls = mock.calls.GetReplicas
	mock.lockGetReplicas.RUnlock()
	return calls
}

// GetResourceConfig calls GetResourceConfigFunc.
func (mock *ProductConfigMock) GetResourceConfig(ddcssName string) (corev1.ResourceRequirements, bool) {
	if mock.GetResourceConfigFunc == nil {
		panic("ProductConfigMock.GetResourceConfigFunc: method is nil but ProductConfig.GetResourceConfig was just called")
	}
	callInfo := struct {
		DdcssName string
	}{
		DdcssName: ddcssName,
	}
	mock.lockGetResourceConfig.Lock()
	mock.calls.GetResourceConfig = append(mock.calls.GetResourceConfig, callInfo)
	mock.lockGetResourceConfig.Unlock()
	return mock.GetResourceConfigFunc(ddcssName)
}

// GetResourceConfigCalls gets all the calls that were made to GetResourceConfig.
// Check the length with:
//     len(mockedProductConfig.GetResourceConfigCalls())
func (mock *ProductConfigMock) GetResourceConfigCalls() []struct {
	DdcssName string
} {
	var calls []struct {
		DdcssName string
	}
	mock.lockGetResourceConfig.RLock()
	calls = mock.calls.GetResourceConfig
	mock.lockGetResourceConfig.RUnlock()
	return calls
}
