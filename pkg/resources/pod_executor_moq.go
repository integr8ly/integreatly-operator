// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package resources

import (
	"sync"
)

// Ensure, that PodExecutorInterfaceMock does implement PodExecutorInterface.
// If this is not the case, regenerate this file with moq.
var _ PodExecutorInterface = &PodExecutorInterfaceMock{}

// PodExecutorInterfaceMock is a mock implementation of PodExecutorInterface.
//
//	func TestSomethingThatUsesPodExecutorInterface(t *testing.T) {
//
//		// make and configure a mocked PodExecutorInterface
//		mockedPodExecutorInterface := &PodExecutorInterfaceMock{
//			ExecuteRemoteCommandFunc: func(ns string, podName string, command []string) (string, string, error) {
//				panic("mock out the ExecuteRemoteCommand method")
//			},
//			ExecuteRemoteContainerCommandFunc: func(ns string, podName string, container string, command []string) (string, string, error) {
//				panic("mock out the ExecuteRemoteContainerCommand method")
//			},
//		}
//
//		// use mockedPodExecutorInterface in code that requires PodExecutorInterface
//		// and then make assertions.
//
//	}
type PodExecutorInterfaceMock struct {
	// ExecuteRemoteCommandFunc mocks the ExecuteRemoteCommand method.
	ExecuteRemoteCommandFunc func(ns string, podName string, command []string) (string, string, error)

	// ExecuteRemoteContainerCommandFunc mocks the ExecuteRemoteContainerCommand method.
	ExecuteRemoteContainerCommandFunc func(ns string, podName string, container string, command []string) (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteRemoteCommand holds details about calls to the ExecuteRemoteCommand method.
		ExecuteRemoteCommand []struct {
			// Ns is the ns argument value.
			Ns string
			// PodName is the podName argument value.
			PodName string
			// Command is the command argument value.
			Command []string
		}
		// ExecuteRemoteContainerCommand holds details about calls to the ExecuteRemoteContainerCommand method.
		ExecuteRemoteContainerCommand []struct {
			// Ns is the ns argument value.
			Ns string
			// PodName is the podName argument value.
			PodName string
			// Container is the container argument value.
			Container string
			// Command is the command argument value.
			Command []string
		}
	}
	lockExecuteRemoteCommand          sync.RWMutex
	lockExecuteRemoteContainerCommand sync.RWMutex
}

// ExecuteRemoteCommand calls ExecuteRemoteCommandFunc.
func (mock *PodExecutorInterfaceMock) ExecuteRemoteCommand(ns string, podName string, command []string) (string, string, error) {
	if mock.ExecuteRemoteCommandFunc == nil {
		panic("PodExecutorInterfaceMock.ExecuteRemoteCommandFunc: method is nil but PodExecutorInterface.ExecuteRemoteCommand was just called")
	}
	callInfo := struct {
		Ns      string
		PodName string
		Command []string
	}{
		Ns:      ns,
		PodName: podName,
		Command: command,
	}
	mock.lockExecuteRemoteCommand.Lock()
	mock.calls.ExecuteRemoteCommand = append(mock.calls.ExecuteRemoteCommand, callInfo)
	mock.lockExecuteRemoteCommand.Unlock()
	return mock.ExecuteRemoteCommandFunc(ns, podName, command)
}

// ExecuteRemoteCommandCalls gets all the calls that were made to ExecuteRemoteCommand.
// Check the length with:
//
//	len(mockedPodExecutorInterface.ExecuteRemoteCommandCalls())
func (mock *PodExecutorInterfaceMock) ExecuteRemoteCommandCalls() []struct {
	Ns      string
	PodName string
	Command []string
} {
	var calls []struct {
		Ns      string
		PodName string
		Command []string
	}
	mock.lockExecuteRemoteCommand.RLock()
	calls = mock.calls.ExecuteRemoteCommand
	mock.lockExecuteRemoteCommand.RUnlock()
	return calls
}

// ExecuteRemoteContainerCommand calls ExecuteRemoteContainerCommandFunc.
func (mock *PodExecutorInterfaceMock) ExecuteRemoteContainerCommand(ns string, podName string, container string, command []string) (string, string, error) {
	if mock.ExecuteRemoteContainerCommandFunc == nil {
		panic("PodExecutorInterfaceMock.ExecuteRemoteContainerCommandFunc: method is nil but PodExecutorInterface.ExecuteRemoteContainerCommand was just called")
	}
	callInfo := struct {
		Ns        string
		PodName   string
		Container string
		Command   []string
	}{
		Ns:        ns,
		PodName:   podName,
		Container: container,
		Command:   command,
	}
	mock.lockExecuteRemoteContainerCommand.Lock()
	mock.calls.ExecuteRemoteContainerCommand = append(mock.calls.ExecuteRemoteContainerCommand, callInfo)
	mock.lockExecuteRemoteContainerCommand.Unlock()
	return mock.ExecuteRemoteContainerCommandFunc(ns, podName, container, command)
}

// ExecuteRemoteContainerCommandCalls gets all the calls that were made to ExecuteRemoteContainerCommand.
// Check the length with:
//
//	len(mockedPodExecutorInterface.ExecuteRemoteContainerCommandCalls())
func (mock *PodExecutorInterfaceMock) ExecuteRemoteContainerCommandCalls() []struct {
	Ns        string
	PodName   string
	Container string
	Command   []string
} {
	var calls []struct {
		Ns        string
		PodName   string
		Container string
		Command   []string
	}
	mock.lockExecuteRemoteContainerCommand.RLock()
	calls = mock.calls.ExecuteRemoteContainerCommand
	mock.lockExecuteRemoteContainerCommand.RUnlock()
	return calls
}
